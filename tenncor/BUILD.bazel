licenses(["notice"])

load("//third_party:tools/pybind.bzl", "pybind_py_library")

package(
    default_visibility = ["//visibility:public"],
)

filegroup(
    name = "srcs",
    srcs = [
        ":tenncor_hdrs",
        ":tenncor_srcs",
        ":pybind_hdrs",
        ":pybind_srcs",
        ":ctest_srcs",
        ":ptest_srcs",
        ":benchmark_srcs",
        "//tenncor/eteq:srcs",
        "//tenncor/hone:srcs",
        "//tenncor/serial:srcs",
        "//tenncor/trainer:srcs",
        "//tenncor/distr:srcs",
        "//tenncor/layr:srcs",
        "//tenncor/pyutils:srcs",
        "BUILD.bazel",
    ],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "benchmark_srcs",
    srcs = glob(["bm/*.cpp", "bm/*.py"]),
)

filegroup(
    name = "tenncor_hdrs",
    srcs = glob(["*.hpp"])
)

filegroup(
    name = "tenncor_srcs",
    srcs = glob(["src/*.cpp"])
)

filegroup(
    name = "pybind_hdrs",
    srcs = glob(["python/*.hpp"]),
)

filegroup(
    name = "pybind_srcs",
    srcs = glob(["python/*.cpp"]),
)

filegroup(
    name = "ctest_srcs",
    srcs = glob(["test/*.cpp"]),
)

filegroup(
    name = "ptest_srcs",
    srcs = [
        "test/main.py",
        "test/test_api.py",
        "test/test_distrib.py",
        "test/test_layer.py",
    ],
)

######### LIBRARY #########

GEN_CMD_FMT = """$(location //tools/egen:egen) --plugins \
plugins.apis:APIsPlugin \
plugins.pyapis:PyAPIsPlugin \
--out $(@D)/generated \
--strip_prefix=$(@D)/.. \
--ext_path=`dirname $$(echo '$(locations //cfg:tenncor_classes)' | awk '{{print $$1}}')` \
--cfgs $(locations //cfg:{})"""

GEN_HDRS = [
    "generated/api.hpp",
]

genrule(
    name = "generated_tenncor",
    srcs = select({
        "//conditions:default": ["//cfg:tenncor_min"],
        "//internal/eigen:fast_build": ["//cfg:tenncor_min"],
        "//internal/eigen:full_build": ["//cfg:tenncor"],
    }) + ["//cfg:tenncor_classes"],
    outs = [
        "generated/api.hpp",
        "generated/pyapi.hpp",
        "generated/api.cpp",
        "generated/pyapi_tenncor.cpp",
    ],
    tools = ["//tools/egen:egen"],
    cmd = select({
        "//conditions:default": GEN_CMD_FMT.format("tenncor_min"),
        "//internal/eigen:fast_build": GEN_CMD_FMT.format("tenncor_min"),
        "//internal/eigen:full_build": GEN_CMD_FMT.format("tenncor"),
    })
)

cc_library(
    name = "tenncor",
    hdrs = [
        ":generated/api.hpp",
        ":tenncor_hdrs",
    ],
    srcs = [
        ":generated/api.cpp",
        ":tenncor_srcs",
    ],
    copts = ["-std=c++17"],
    include_prefix = "tenncor",
    includes = ["."],
    deps = [
        "//tenncor/eteq/opsvc:opsvc",
        "//tenncor/find/lusvc:lusvc",
        "//tenncor/hone/hosvc:hosvc",
        "//tenncor/serial/oxsvc:oxsvc",
        "//tenncor/trainer:trainer",
    ],
)

pybind_py_library(
    name = "tenncor_py",
    cc_srcs = [
        ":pybind_hdrs",
        ":pybind_srcs",
        ":generated/pyapi.hpp",
        ":generated/pyapi_tenncor.cpp",
    ],
    cc_deps = [
        ":tenncor",
        "//dbg/print/printsvc:printsvc",
        "//tenncor/pyutils:pyutils",
    ],
    copts = ["-std=c++17"],
    py_imports = ["."]
)

######### BENCHMARK #########

cc_binary(
    name = "benchmark",
    srcs = ["bm/benchmark.cpp"],
    deps = [
        ":tenncor",
        "@com_github_google_benchmark//:benchmark",
    ],
    copts = ["-std=c++17"],
    data = ["//cfg:optimizations"],
)

py_binary(
    name = "tf_memory_benchmark",
    srcs = ["bm/tf_mem_benchmark.py"],
    main = "bm/tf_mem_benchmark.py",
)

py_binary(
    name = "tc_memory_benchmark",
    srcs = ["bm/tc_mem_benchmark.py"],
    main = "bm/tc_mem_benchmark.py",
    deps = [":tenncor_py"],
)

py_binary(
    name = "comparator",
    srcs = [
        "bm/compare.py",
        "bm/compare_matmul.py",
        "bm/compare_mlp.py",
        "bm/compare_mlp_grad.py",
    ],
    main = "bm/compare.py",
    deps = [":tenncor_py"],
    data = ["//cfg:optimizations"],
)

py_binary(
    name = "profile_mlp_grad",
    srcs = [
        "bm/profile_mlp_grad.py",
    ],
    deps = [
        ":tenncor_py",
        "//dbg:tenncor_profile_py",
    ],
    data = ["//cfg:optimizations"],
)

######### TEST #########

cc_test(
    name = "ctest",
    srcs = [":ctest_srcs"],
    copts = ["-std=c++17"],
    deps = [
        "//internal/utils/coord:coord",
        "//internal/global:mock",
        "//tenncor/distr:mock",
        ":tenncor",
        "//testutil:tutil",
        "//dbg/print/printsvc:printsvc",
        "@com_github_mingkaic_cppkg//diff:diff",
        "@com_github_mingkaic_cppkg//exam:exam",
    ],
    linkstatic = True,
    data = [
        "//:test_models",
        "//cfg:optimizations",
    ],
    size = "enormous",
)

py_test(
    name = "ptest",
    srcs = [":ptest_srcs"],
    main = "test/main.py",
    deps = [
        "//dbg:print_py",
        ":tenncor_py",
        "//testutil:pyunit_util",
    ],
    data = [
        "//:test_models",
        "//testutil:ead_testcase_template",
    ],
    size = "enormous",
)
