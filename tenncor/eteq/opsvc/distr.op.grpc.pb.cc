// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tenncor/eteq/opsvc/distr.op.proto

#include "tenncor/eteq/opsvc/distr.op.pb.h"
#include "tenncor/eteq/opsvc/distr.op.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace distr {
namespace op {

static const char* DistrOperation_method_names[] = {
  "/distr.op.DistrOperation/GetData",
  "/distr.op.DistrOperation/ListReachable",
  "/distr.op.DistrOperation/CreateDerive",
};

std::unique_ptr< DistrOperation::Stub> DistrOperation::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DistrOperation::Stub> stub(new DistrOperation::Stub(channel));
  return stub;
}

DistrOperation::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetData_(DistrOperation_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListReachable_(DistrOperation_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateDerive_(DistrOperation_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::distr::op::NodeData>* DistrOperation::Stub::GetDataRaw(::grpc::ClientContext* context, const ::distr::op::GetDataRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::distr::op::NodeData>::Create(channel_.get(), rpcmethod_GetData_, context, request);
}

void DistrOperation::Stub::experimental_async::GetData(::grpc::ClientContext* context, ::distr::op::GetDataRequest* request, ::grpc::experimental::ClientReadReactor< ::distr::op::NodeData>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::distr::op::NodeData>::Create(stub_->channel_.get(), stub_->rpcmethod_GetData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::distr::op::NodeData>* DistrOperation::Stub::AsyncGetDataRaw(::grpc::ClientContext* context, const ::distr::op::GetDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::distr::op::NodeData>::Create(channel_.get(), cq, rpcmethod_GetData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::distr::op::NodeData>* DistrOperation::Stub::PrepareAsyncGetDataRaw(::grpc::ClientContext* context, const ::distr::op::GetDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::distr::op::NodeData>::Create(channel_.get(), cq, rpcmethod_GetData_, context, request, false, nullptr);
}

::grpc::Status DistrOperation::Stub::ListReachable(::grpc::ClientContext* context, const ::distr::op::ListReachableRequest& request, ::distr::op::ListReachableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListReachable_, context, request, response);
}

void DistrOperation::Stub::experimental_async::ListReachable(::grpc::ClientContext* context, const ::distr::op::ListReachableRequest* request, ::distr::op::ListReachableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListReachable_, context, request, response, std::move(f));
}

void DistrOperation::Stub::experimental_async::ListReachable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::distr::op::ListReachableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListReachable_, context, request, response, std::move(f));
}

void DistrOperation::Stub::experimental_async::ListReachable(::grpc::ClientContext* context, const ::distr::op::ListReachableRequest* request, ::distr::op::ListReachableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListReachable_, context, request, response, reactor);
}

void DistrOperation::Stub::experimental_async::ListReachable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::distr::op::ListReachableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListReachable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::distr::op::ListReachableResponse>* DistrOperation::Stub::AsyncListReachableRaw(::grpc::ClientContext* context, const ::distr::op::ListReachableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::distr::op::ListReachableResponse>::Create(channel_.get(), cq, rpcmethod_ListReachable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::distr::op::ListReachableResponse>* DistrOperation::Stub::PrepareAsyncListReachableRaw(::grpc::ClientContext* context, const ::distr::op::ListReachableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::distr::op::ListReachableResponse>::Create(channel_.get(), cq, rpcmethod_ListReachable_, context, request, false);
}

::grpc::Status DistrOperation::Stub::CreateDerive(::grpc::ClientContext* context, const ::distr::op::CreateDeriveRequest& request, ::distr::op::CreateDeriveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateDerive_, context, request, response);
}

void DistrOperation::Stub::experimental_async::CreateDerive(::grpc::ClientContext* context, const ::distr::op::CreateDeriveRequest* request, ::distr::op::CreateDeriveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateDerive_, context, request, response, std::move(f));
}

void DistrOperation::Stub::experimental_async::CreateDerive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::distr::op::CreateDeriveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateDerive_, context, request, response, std::move(f));
}

void DistrOperation::Stub::experimental_async::CreateDerive(::grpc::ClientContext* context, const ::distr::op::CreateDeriveRequest* request, ::distr::op::CreateDeriveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateDerive_, context, request, response, reactor);
}

void DistrOperation::Stub::experimental_async::CreateDerive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::distr::op::CreateDeriveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateDerive_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::distr::op::CreateDeriveResponse>* DistrOperation::Stub::AsyncCreateDeriveRaw(::grpc::ClientContext* context, const ::distr::op::CreateDeriveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::distr::op::CreateDeriveResponse>::Create(channel_.get(), cq, rpcmethod_CreateDerive_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::distr::op::CreateDeriveResponse>* DistrOperation::Stub::PrepareAsyncCreateDeriveRaw(::grpc::ClientContext* context, const ::distr::op::CreateDeriveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::distr::op::CreateDeriveResponse>::Create(channel_.get(), cq, rpcmethod_CreateDerive_, context, request, false);
}

DistrOperation::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DistrOperation_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DistrOperation::Service, ::distr::op::GetDataRequest, ::distr::op::NodeData>(
          std::mem_fn(&DistrOperation::Service::GetData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DistrOperation_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DistrOperation::Service, ::distr::op::ListReachableRequest, ::distr::op::ListReachableResponse>(
          std::mem_fn(&DistrOperation::Service::ListReachable), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DistrOperation_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DistrOperation::Service, ::distr::op::CreateDeriveRequest, ::distr::op::CreateDeriveResponse>(
          std::mem_fn(&DistrOperation::Service::CreateDerive), this)));
}

DistrOperation::Service::~Service() {
}

::grpc::Status DistrOperation::Service::GetData(::grpc::ServerContext* context, const ::distr::op::GetDataRequest* request, ::grpc::ServerWriter< ::distr::op::NodeData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DistrOperation::Service::ListReachable(::grpc::ServerContext* context, const ::distr::op::ListReachableRequest* request, ::distr::op::ListReachableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DistrOperation::Service::CreateDerive(::grpc::ServerContext* context, const ::distr::op::CreateDeriveRequest* request, ::distr::op::CreateDeriveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace distr
}  // namespace op

