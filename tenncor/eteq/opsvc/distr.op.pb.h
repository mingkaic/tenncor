// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tenncor/eteq/opsvc/distr.op.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "tenncor/distr/iosvc/distr.io.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto;
namespace distr {
namespace op {
class CreateDeriveRequest;
class CreateDeriveRequestDefaultTypeInternal;
extern CreateDeriveRequestDefaultTypeInternal _CreateDeriveRequest_default_instance_;
class CreateDeriveRequest_RootGradsEntry_DoNotUse;
class CreateDeriveRequest_RootGradsEntry_DoNotUseDefaultTypeInternal;
extern CreateDeriveRequest_RootGradsEntry_DoNotUseDefaultTypeInternal _CreateDeriveRequest_RootGradsEntry_DoNotUse_default_instance_;
class CreateDeriveResponse;
class CreateDeriveResponseDefaultTypeInternal;
extern CreateDeriveResponseDefaultTypeInternal _CreateDeriveResponse_default_instance_;
class CreateDeriveResponse_GradsEntry_DoNotUse;
class CreateDeriveResponse_GradsEntry_DoNotUseDefaultTypeInternal;
extern CreateDeriveResponse_GradsEntry_DoNotUseDefaultTypeInternal _CreateDeriveResponse_GradsEntry_DoNotUse_default_instance_;
class GetDataRequest;
class GetDataRequestDefaultTypeInternal;
extern GetDataRequestDefaultTypeInternal _GetDataRequest_default_instance_;
class ListReachableRequest;
class ListReachableRequestDefaultTypeInternal;
extern ListReachableRequestDefaultTypeInternal _ListReachableRequest_default_instance_;
class ListReachableResponse;
class ListReachableResponseDefaultTypeInternal;
extern ListReachableResponseDefaultTypeInternal _ListReachableResponse_default_instance_;
class ListReachableResponse_SrcsEntry_DoNotUse;
class ListReachableResponse_SrcsEntry_DoNotUseDefaultTypeInternal;
extern ListReachableResponse_SrcsEntry_DoNotUseDefaultTypeInternal _ListReachableResponse_SrcsEntry_DoNotUse_default_instance_;
class NodeData;
class NodeDataDefaultTypeInternal;
extern NodeDataDefaultTypeInternal _NodeData_default_instance_;
class Reachables;
class ReachablesDefaultTypeInternal;
extern ReachablesDefaultTypeInternal _Reachables_default_instance_;
}  // namespace op
}  // namespace distr
PROTOBUF_NAMESPACE_OPEN
template<> ::distr::op::CreateDeriveRequest* Arena::CreateMaybeMessage<::distr::op::CreateDeriveRequest>(Arena*);
template<> ::distr::op::CreateDeriveRequest_RootGradsEntry_DoNotUse* Arena::CreateMaybeMessage<::distr::op::CreateDeriveRequest_RootGradsEntry_DoNotUse>(Arena*);
template<> ::distr::op::CreateDeriveResponse* Arena::CreateMaybeMessage<::distr::op::CreateDeriveResponse>(Arena*);
template<> ::distr::op::CreateDeriveResponse_GradsEntry_DoNotUse* Arena::CreateMaybeMessage<::distr::op::CreateDeriveResponse_GradsEntry_DoNotUse>(Arena*);
template<> ::distr::op::GetDataRequest* Arena::CreateMaybeMessage<::distr::op::GetDataRequest>(Arena*);
template<> ::distr::op::ListReachableRequest* Arena::CreateMaybeMessage<::distr::op::ListReachableRequest>(Arena*);
template<> ::distr::op::ListReachableResponse* Arena::CreateMaybeMessage<::distr::op::ListReachableResponse>(Arena*);
template<> ::distr::op::ListReachableResponse_SrcsEntry_DoNotUse* Arena::CreateMaybeMessage<::distr::op::ListReachableResponse_SrcsEntry_DoNotUse>(Arena*);
template<> ::distr::op::NodeData* Arena::CreateMaybeMessage<::distr::op::NodeData>(Arena*);
template<> ::distr::op::Reachables* Arena::CreateMaybeMessage<::distr::op::Reachables>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace distr {
namespace op {

// ===================================================================

class NodeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distr.op.NodeData) */ {
 public:
  NodeData();
  virtual ~NodeData();

  NodeData(const NodeData& from);
  NodeData(NodeData&& from) noexcept
    : NodeData() {
    *this = ::std::move(from);
  }

  inline NodeData& operator=(const NodeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeData& operator=(NodeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeData* internal_default_instance() {
    return reinterpret_cast<const NodeData*>(
               &_NodeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NodeData& a, NodeData& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeData* New() const final {
    return CreateMaybeMessage<NodeData>(nullptr);
  }

  NodeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeData& from);
  void MergeFrom(const NodeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distr.op.NodeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto);
    return ::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kUuidFieldNumber = 1,
    kVersionFieldNumber = 3,
  };
  // repeated double data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  double _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_data() const;
  void _internal_add_data(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_data();
  public:
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_data();

  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // int64 version = 3;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:distr.op.NodeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto;
};
// -------------------------------------------------------------------

class Reachables :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distr.op.Reachables) */ {
 public:
  Reachables();
  virtual ~Reachables();

  Reachables(const Reachables& from);
  Reachables(Reachables&& from) noexcept
    : Reachables() {
    *this = ::std::move(from);
  }

  inline Reachables& operator=(const Reachables& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reachables& operator=(Reachables&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reachables& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reachables* internal_default_instance() {
    return reinterpret_cast<const Reachables*>(
               &_Reachables_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Reachables& a, Reachables& b) {
    a.Swap(&b);
  }
  inline void Swap(Reachables* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reachables* New() const final {
    return CreateMaybeMessage<Reachables>(nullptr);
  }

  Reachables* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reachables>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reachables& from);
  void MergeFrom(const Reachables& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reachables* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distr.op.Reachables";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto);
    return ::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReachablesFieldNumber = 1,
  };
  // repeated string reachables = 1;
  int reachables_size() const;
  private:
  int _internal_reachables_size() const;
  public:
  void clear_reachables();
  const std::string& reachables(int index) const;
  std::string* mutable_reachables(int index);
  void set_reachables(int index, const std::string& value);
  void set_reachables(int index, std::string&& value);
  void set_reachables(int index, const char* value);
  void set_reachables(int index, const char* value, size_t size);
  std::string* add_reachables();
  void add_reachables(const std::string& value);
  void add_reachables(std::string&& value);
  void add_reachables(const char* value);
  void add_reachables(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& reachables() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_reachables();
  private:
  const std::string& _internal_reachables(int index) const;
  std::string* _internal_add_reachables();
  public:

  // @@protoc_insertion_point(class_scope:distr.op.Reachables)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> reachables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto;
};
// -------------------------------------------------------------------

class GetDataRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distr.op.GetDataRequest) */ {
 public:
  GetDataRequest();
  virtual ~GetDataRequest();

  GetDataRequest(const GetDataRequest& from);
  GetDataRequest(GetDataRequest&& from) noexcept
    : GetDataRequest() {
    *this = ::std::move(from);
  }

  inline GetDataRequest& operator=(const GetDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataRequest& operator=(GetDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDataRequest* internal_default_instance() {
    return reinterpret_cast<const GetDataRequest*>(
               &_GetDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetDataRequest& a, GetDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDataRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDataRequest* New() const final {
    return CreateMaybeMessage<GetDataRequest>(nullptr);
  }

  GetDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDataRequest& from);
  void MergeFrom(const GetDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distr.op.GetDataRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto);
    return ::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidsFieldNumber = 1,
    kIgnoredFieldNumber = 2,
  };
  // repeated string uuids = 1;
  int uuids_size() const;
  private:
  int _internal_uuids_size() const;
  public:
  void clear_uuids();
  const std::string& uuids(int index) const;
  std::string* mutable_uuids(int index);
  void set_uuids(int index, const std::string& value);
  void set_uuids(int index, std::string&& value);
  void set_uuids(int index, const char* value);
  void set_uuids(int index, const char* value, size_t size);
  std::string* add_uuids();
  void add_uuids(const std::string& value);
  void add_uuids(std::string&& value);
  void add_uuids(const char* value);
  void add_uuids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_uuids();
  private:
  const std::string& _internal_uuids(int index) const;
  std::string* _internal_add_uuids();
  public:

  // repeated string ignored = 2;
  int ignored_size() const;
  private:
  int _internal_ignored_size() const;
  public:
  void clear_ignored();
  const std::string& ignored(int index) const;
  std::string* mutable_ignored(int index);
  void set_ignored(int index, const std::string& value);
  void set_ignored(int index, std::string&& value);
  void set_ignored(int index, const char* value);
  void set_ignored(int index, const char* value, size_t size);
  std::string* add_ignored();
  void add_ignored(const std::string& value);
  void add_ignored(std::string&& value);
  void add_ignored(const char* value);
  void add_ignored(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ignored() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ignored();
  private:
  const std::string& _internal_ignored(int index) const;
  std::string* _internal_add_ignored();
  public:

  // @@protoc_insertion_point(class_scope:distr.op.GetDataRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> uuids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ignored_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto;
};
// -------------------------------------------------------------------

class ListReachableRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distr.op.ListReachableRequest) */ {
 public:
  ListReachableRequest();
  virtual ~ListReachableRequest();

  ListReachableRequest(const ListReachableRequest& from);
  ListReachableRequest(ListReachableRequest&& from) noexcept
    : ListReachableRequest() {
    *this = ::std::move(from);
  }

  inline ListReachableRequest& operator=(const ListReachableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListReachableRequest& operator=(ListReachableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListReachableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListReachableRequest* internal_default_instance() {
    return reinterpret_cast<const ListReachableRequest*>(
               &_ListReachableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListReachableRequest& a, ListReachableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListReachableRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListReachableRequest* New() const final {
    return CreateMaybeMessage<ListReachableRequest>(nullptr);
  }

  ListReachableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListReachableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListReachableRequest& from);
  void MergeFrom(const ListReachableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListReachableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distr.op.ListReachableRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto);
    return ::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcsFieldNumber = 1,
    kDestsFieldNumber = 2,
  };
  // repeated string srcs = 1;
  int srcs_size() const;
  private:
  int _internal_srcs_size() const;
  public:
  void clear_srcs();
  const std::string& srcs(int index) const;
  std::string* mutable_srcs(int index);
  void set_srcs(int index, const std::string& value);
  void set_srcs(int index, std::string&& value);
  void set_srcs(int index, const char* value);
  void set_srcs(int index, const char* value, size_t size);
  std::string* add_srcs();
  void add_srcs(const std::string& value);
  void add_srcs(std::string&& value);
  void add_srcs(const char* value);
  void add_srcs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& srcs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_srcs();
  private:
  const std::string& _internal_srcs(int index) const;
  std::string* _internal_add_srcs();
  public:

  // repeated string dests = 2;
  int dests_size() const;
  private:
  int _internal_dests_size() const;
  public:
  void clear_dests();
  const std::string& dests(int index) const;
  std::string* mutable_dests(int index);
  void set_dests(int index, const std::string& value);
  void set_dests(int index, std::string&& value);
  void set_dests(int index, const char* value);
  void set_dests(int index, const char* value, size_t size);
  std::string* add_dests();
  void add_dests(const std::string& value);
  void add_dests(std::string&& value);
  void add_dests(const char* value);
  void add_dests(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dests() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dests();
  private:
  const std::string& _internal_dests(int index) const;
  std::string* _internal_add_dests();
  public:

  // @@protoc_insertion_point(class_scope:distr.op.ListReachableRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> srcs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dests_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto;
};
// -------------------------------------------------------------------

class ListReachableResponse_SrcsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ListReachableResponse_SrcsEntry_DoNotUse, 
    std::string, ::distr::op::Reachables,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ListReachableResponse_SrcsEntry_DoNotUse, 
    std::string, ::distr::op::Reachables,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ListReachableResponse_SrcsEntry_DoNotUse();
  ListReachableResponse_SrcsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ListReachableResponse_SrcsEntry_DoNotUse& other);
  static const ListReachableResponse_SrcsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ListReachableResponse_SrcsEntry_DoNotUse*>(&_ListReachableResponse_SrcsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "distr.op.ListReachableResponse.SrcsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto);
    return ::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class ListReachableResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distr.op.ListReachableResponse) */ {
 public:
  ListReachableResponse();
  virtual ~ListReachableResponse();

  ListReachableResponse(const ListReachableResponse& from);
  ListReachableResponse(ListReachableResponse&& from) noexcept
    : ListReachableResponse() {
    *this = ::std::move(from);
  }

  inline ListReachableResponse& operator=(const ListReachableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListReachableResponse& operator=(ListReachableResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListReachableResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListReachableResponse* internal_default_instance() {
    return reinterpret_cast<const ListReachableResponse*>(
               &_ListReachableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListReachableResponse& a, ListReachableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListReachableResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListReachableResponse* New() const final {
    return CreateMaybeMessage<ListReachableResponse>(nullptr);
  }

  ListReachableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListReachableResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListReachableResponse& from);
  void MergeFrom(const ListReachableResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListReachableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distr.op.ListReachableResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto);
    return ::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSrcsFieldNumber = 1,
  };
  // map<string, .distr.op.Reachables> srcs = 1;
  int srcs_size() const;
  private:
  int _internal_srcs_size() const;
  public:
  void clear_srcs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::op::Reachables >&
      _internal_srcs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::op::Reachables >*
      _internal_mutable_srcs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::op::Reachables >&
      srcs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::op::Reachables >*
      mutable_srcs();

  // @@protoc_insertion_point(class_scope:distr.op.ListReachableResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ListReachableResponse_SrcsEntry_DoNotUse,
      std::string, ::distr::op::Reachables,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > srcs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto;
};
// -------------------------------------------------------------------

class CreateDeriveRequest_RootGradsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateDeriveRequest_RootGradsEntry_DoNotUse, 
    std::string, ::distr::io::NodeMeta,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateDeriveRequest_RootGradsEntry_DoNotUse, 
    std::string, ::distr::io::NodeMeta,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  CreateDeriveRequest_RootGradsEntry_DoNotUse();
  CreateDeriveRequest_RootGradsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CreateDeriveRequest_RootGradsEntry_DoNotUse& other);
  static const CreateDeriveRequest_RootGradsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateDeriveRequest_RootGradsEntry_DoNotUse*>(&_CreateDeriveRequest_RootGradsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "distr.op.CreateDeriveRequest.RootGradsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto);
    return ::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class CreateDeriveRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distr.op.CreateDeriveRequest) */ {
 public:
  CreateDeriveRequest();
  virtual ~CreateDeriveRequest();

  CreateDeriveRequest(const CreateDeriveRequest& from);
  CreateDeriveRequest(CreateDeriveRequest&& from) noexcept
    : CreateDeriveRequest() {
    *this = ::std::move(from);
  }

  inline CreateDeriveRequest& operator=(const CreateDeriveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDeriveRequest& operator=(CreateDeriveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDeriveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDeriveRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDeriveRequest*>(
               &_CreateDeriveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateDeriveRequest& a, CreateDeriveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDeriveRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDeriveRequest* New() const final {
    return CreateMaybeMessage<CreateDeriveRequest>(nullptr);
  }

  CreateDeriveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDeriveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDeriveRequest& from);
  void MergeFrom(const CreateDeriveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDeriveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distr.op.CreateDeriveRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto);
    return ::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRootGradsFieldNumber = 1,
    kTargetsFieldNumber = 2,
    kRootFieldNumber = 3,
  };
  // map<string, .distr.io.NodeMeta> root_grads = 1;
  int root_grads_size() const;
  private:
  int _internal_root_grads_size() const;
  public:
  void clear_root_grads();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >&
      _internal_root_grads() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >*
      _internal_mutable_root_grads();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >&
      root_grads() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >*
      mutable_root_grads();

  // repeated string targets = 2;
  int targets_size() const;
  private:
  int _internal_targets_size() const;
  public:
  void clear_targets();
  const std::string& targets(int index) const;
  std::string* mutable_targets(int index);
  void set_targets(int index, const std::string& value);
  void set_targets(int index, std::string&& value);
  void set_targets(int index, const char* value);
  void set_targets(int index, const char* value, size_t size);
  std::string* add_targets();
  void add_targets(const std::string& value);
  void add_targets(std::string&& value);
  void add_targets(const char* value);
  void add_targets(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& targets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_targets();
  private:
  const std::string& _internal_targets(int index) const;
  std::string* _internal_add_targets();
  public:

  // string root = 3;
  void clear_root();
  const std::string& root() const;
  void set_root(const std::string& value);
  void set_root(std::string&& value);
  void set_root(const char* value);
  void set_root(const char* value, size_t size);
  std::string* mutable_root();
  std::string* release_root();
  void set_allocated_root(std::string* root);
  private:
  const std::string& _internal_root() const;
  void _internal_set_root(const std::string& value);
  std::string* _internal_mutable_root();
  public:

  // @@protoc_insertion_point(class_scope:distr.op.CreateDeriveRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CreateDeriveRequest_RootGradsEntry_DoNotUse,
      std::string, ::distr::io::NodeMeta,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > root_grads_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> targets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto;
};
// -------------------------------------------------------------------

class CreateDeriveResponse_GradsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateDeriveResponse_GradsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateDeriveResponse_GradsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  CreateDeriveResponse_GradsEntry_DoNotUse();
  CreateDeriveResponse_GradsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CreateDeriveResponse_GradsEntry_DoNotUse& other);
  static const CreateDeriveResponse_GradsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateDeriveResponse_GradsEntry_DoNotUse*>(&_CreateDeriveResponse_GradsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "distr.op.CreateDeriveResponse.GradsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "distr.op.CreateDeriveResponse.GradsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto);
    return ::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class CreateDeriveResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distr.op.CreateDeriveResponse) */ {
 public:
  CreateDeriveResponse();
  virtual ~CreateDeriveResponse();

  CreateDeriveResponse(const CreateDeriveResponse& from);
  CreateDeriveResponse(CreateDeriveResponse&& from) noexcept
    : CreateDeriveResponse() {
    *this = ::std::move(from);
  }

  inline CreateDeriveResponse& operator=(const CreateDeriveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDeriveResponse& operator=(CreateDeriveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDeriveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDeriveResponse* internal_default_instance() {
    return reinterpret_cast<const CreateDeriveResponse*>(
               &_CreateDeriveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreateDeriveResponse& a, CreateDeriveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDeriveResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDeriveResponse* New() const final {
    return CreateMaybeMessage<CreateDeriveResponse>(nullptr);
  }

  CreateDeriveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDeriveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDeriveResponse& from);
  void MergeFrom(const CreateDeriveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDeriveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distr.op.CreateDeriveResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto);
    return ::descriptor_table_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kGradsFieldNumber = 1,
  };
  // map<string, string> grads = 1;
  int grads_size() const;
  private:
  int _internal_grads_size() const;
  public:
  void clear_grads();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_grads() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_grads();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      grads() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_grads();

  // @@protoc_insertion_point(class_scope:distr.op.CreateDeriveResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CreateDeriveResponse_GradsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > grads_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeData

// string uuid = 1;
inline void NodeData::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeData::uuid() const {
  // @@protoc_insertion_point(field_get:distr.op.NodeData.uuid)
  return _internal_uuid();
}
inline void NodeData::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:distr.op.NodeData.uuid)
}
inline std::string* NodeData::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:distr.op.NodeData.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& NodeData::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void NodeData::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeData::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:distr.op.NodeData.uuid)
}
inline void NodeData::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:distr.op.NodeData.uuid)
}
inline void NodeData::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:distr.op.NodeData.uuid)
}
inline std::string* NodeData::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeData::release_uuid() {
  // @@protoc_insertion_point(field_release:distr.op.NodeData.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeData::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:distr.op.NodeData.uuid)
}

// repeated double data = 2;
inline int NodeData::_internal_data_size() const {
  return data_.size();
}
inline int NodeData::data_size() const {
  return _internal_data_size();
}
inline void NodeData::clear_data() {
  data_.Clear();
}
inline double NodeData::_internal_data(int index) const {
  return data_.Get(index);
}
inline double NodeData::data(int index) const {
  // @@protoc_insertion_point(field_get:distr.op.NodeData.data)
  return _internal_data(index);
}
inline void NodeData::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:distr.op.NodeData.data)
}
inline void NodeData::_internal_add_data(double value) {
  data_.Add(value);
}
inline void NodeData::add_data(double value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:distr.op.NodeData.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NodeData::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NodeData::data() const {
  // @@protoc_insertion_point(field_list:distr.op.NodeData.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NodeData::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NodeData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:distr.op.NodeData.data)
  return _internal_mutable_data();
}

// int64 version = 3;
inline void NodeData::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeData::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeData::version() const {
  // @@protoc_insertion_point(field_get:distr.op.NodeData.version)
  return _internal_version();
}
inline void NodeData::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  version_ = value;
}
inline void NodeData::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:distr.op.NodeData.version)
}

// -------------------------------------------------------------------

// Reachables

// repeated string reachables = 1;
inline int Reachables::_internal_reachables_size() const {
  return reachables_.size();
}
inline int Reachables::reachables_size() const {
  return _internal_reachables_size();
}
inline void Reachables::clear_reachables() {
  reachables_.Clear();
}
inline std::string* Reachables::add_reachables() {
  // @@protoc_insertion_point(field_add_mutable:distr.op.Reachables.reachables)
  return _internal_add_reachables();
}
inline const std::string& Reachables::_internal_reachables(int index) const {
  return reachables_.Get(index);
}
inline const std::string& Reachables::reachables(int index) const {
  // @@protoc_insertion_point(field_get:distr.op.Reachables.reachables)
  return _internal_reachables(index);
}
inline std::string* Reachables::mutable_reachables(int index) {
  // @@protoc_insertion_point(field_mutable:distr.op.Reachables.reachables)
  return reachables_.Mutable(index);
}
inline void Reachables::set_reachables(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:distr.op.Reachables.reachables)
  reachables_.Mutable(index)->assign(value);
}
inline void Reachables::set_reachables(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:distr.op.Reachables.reachables)
  reachables_.Mutable(index)->assign(std::move(value));
}
inline void Reachables::set_reachables(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reachables_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:distr.op.Reachables.reachables)
}
inline void Reachables::set_reachables(int index, const char* value, size_t size) {
  reachables_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:distr.op.Reachables.reachables)
}
inline std::string* Reachables::_internal_add_reachables() {
  return reachables_.Add();
}
inline void Reachables::add_reachables(const std::string& value) {
  reachables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:distr.op.Reachables.reachables)
}
inline void Reachables::add_reachables(std::string&& value) {
  reachables_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:distr.op.Reachables.reachables)
}
inline void Reachables::add_reachables(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reachables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:distr.op.Reachables.reachables)
}
inline void Reachables::add_reachables(const char* value, size_t size) {
  reachables_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:distr.op.Reachables.reachables)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Reachables::reachables() const {
  // @@protoc_insertion_point(field_list:distr.op.Reachables.reachables)
  return reachables_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Reachables::mutable_reachables() {
  // @@protoc_insertion_point(field_mutable_list:distr.op.Reachables.reachables)
  return &reachables_;
}

// -------------------------------------------------------------------

// GetDataRequest

// repeated string uuids = 1;
inline int GetDataRequest::_internal_uuids_size() const {
  return uuids_.size();
}
inline int GetDataRequest::uuids_size() const {
  return _internal_uuids_size();
}
inline void GetDataRequest::clear_uuids() {
  uuids_.Clear();
}
inline std::string* GetDataRequest::add_uuids() {
  // @@protoc_insertion_point(field_add_mutable:distr.op.GetDataRequest.uuids)
  return _internal_add_uuids();
}
inline const std::string& GetDataRequest::_internal_uuids(int index) const {
  return uuids_.Get(index);
}
inline const std::string& GetDataRequest::uuids(int index) const {
  // @@protoc_insertion_point(field_get:distr.op.GetDataRequest.uuids)
  return _internal_uuids(index);
}
inline std::string* GetDataRequest::mutable_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:distr.op.GetDataRequest.uuids)
  return uuids_.Mutable(index);
}
inline void GetDataRequest::set_uuids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:distr.op.GetDataRequest.uuids)
  uuids_.Mutable(index)->assign(value);
}
inline void GetDataRequest::set_uuids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:distr.op.GetDataRequest.uuids)
  uuids_.Mutable(index)->assign(std::move(value));
}
inline void GetDataRequest::set_uuids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:distr.op.GetDataRequest.uuids)
}
inline void GetDataRequest::set_uuids(int index, const char* value, size_t size) {
  uuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:distr.op.GetDataRequest.uuids)
}
inline std::string* GetDataRequest::_internal_add_uuids() {
  return uuids_.Add();
}
inline void GetDataRequest::add_uuids(const std::string& value) {
  uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:distr.op.GetDataRequest.uuids)
}
inline void GetDataRequest::add_uuids(std::string&& value) {
  uuids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:distr.op.GetDataRequest.uuids)
}
inline void GetDataRequest::add_uuids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:distr.op.GetDataRequest.uuids)
}
inline void GetDataRequest::add_uuids(const char* value, size_t size) {
  uuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:distr.op.GetDataRequest.uuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetDataRequest::uuids() const {
  // @@protoc_insertion_point(field_list:distr.op.GetDataRequest.uuids)
  return uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetDataRequest::mutable_uuids() {
  // @@protoc_insertion_point(field_mutable_list:distr.op.GetDataRequest.uuids)
  return &uuids_;
}

// repeated string ignored = 2;
inline int GetDataRequest::_internal_ignored_size() const {
  return ignored_.size();
}
inline int GetDataRequest::ignored_size() const {
  return _internal_ignored_size();
}
inline void GetDataRequest::clear_ignored() {
  ignored_.Clear();
}
inline std::string* GetDataRequest::add_ignored() {
  // @@protoc_insertion_point(field_add_mutable:distr.op.GetDataRequest.ignored)
  return _internal_add_ignored();
}
inline const std::string& GetDataRequest::_internal_ignored(int index) const {
  return ignored_.Get(index);
}
inline const std::string& GetDataRequest::ignored(int index) const {
  // @@protoc_insertion_point(field_get:distr.op.GetDataRequest.ignored)
  return _internal_ignored(index);
}
inline std::string* GetDataRequest::mutable_ignored(int index) {
  // @@protoc_insertion_point(field_mutable:distr.op.GetDataRequest.ignored)
  return ignored_.Mutable(index);
}
inline void GetDataRequest::set_ignored(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:distr.op.GetDataRequest.ignored)
  ignored_.Mutable(index)->assign(value);
}
inline void GetDataRequest::set_ignored(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:distr.op.GetDataRequest.ignored)
  ignored_.Mutable(index)->assign(std::move(value));
}
inline void GetDataRequest::set_ignored(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ignored_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:distr.op.GetDataRequest.ignored)
}
inline void GetDataRequest::set_ignored(int index, const char* value, size_t size) {
  ignored_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:distr.op.GetDataRequest.ignored)
}
inline std::string* GetDataRequest::_internal_add_ignored() {
  return ignored_.Add();
}
inline void GetDataRequest::add_ignored(const std::string& value) {
  ignored_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:distr.op.GetDataRequest.ignored)
}
inline void GetDataRequest::add_ignored(std::string&& value) {
  ignored_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:distr.op.GetDataRequest.ignored)
}
inline void GetDataRequest::add_ignored(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ignored_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:distr.op.GetDataRequest.ignored)
}
inline void GetDataRequest::add_ignored(const char* value, size_t size) {
  ignored_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:distr.op.GetDataRequest.ignored)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetDataRequest::ignored() const {
  // @@protoc_insertion_point(field_list:distr.op.GetDataRequest.ignored)
  return ignored_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetDataRequest::mutable_ignored() {
  // @@protoc_insertion_point(field_mutable_list:distr.op.GetDataRequest.ignored)
  return &ignored_;
}

// -------------------------------------------------------------------

// ListReachableRequest

// repeated string srcs = 1;
inline int ListReachableRequest::_internal_srcs_size() const {
  return srcs_.size();
}
inline int ListReachableRequest::srcs_size() const {
  return _internal_srcs_size();
}
inline void ListReachableRequest::clear_srcs() {
  srcs_.Clear();
}
inline std::string* ListReachableRequest::add_srcs() {
  // @@protoc_insertion_point(field_add_mutable:distr.op.ListReachableRequest.srcs)
  return _internal_add_srcs();
}
inline const std::string& ListReachableRequest::_internal_srcs(int index) const {
  return srcs_.Get(index);
}
inline const std::string& ListReachableRequest::srcs(int index) const {
  // @@protoc_insertion_point(field_get:distr.op.ListReachableRequest.srcs)
  return _internal_srcs(index);
}
inline std::string* ListReachableRequest::mutable_srcs(int index) {
  // @@protoc_insertion_point(field_mutable:distr.op.ListReachableRequest.srcs)
  return srcs_.Mutable(index);
}
inline void ListReachableRequest::set_srcs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:distr.op.ListReachableRequest.srcs)
  srcs_.Mutable(index)->assign(value);
}
inline void ListReachableRequest::set_srcs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:distr.op.ListReachableRequest.srcs)
  srcs_.Mutable(index)->assign(std::move(value));
}
inline void ListReachableRequest::set_srcs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  srcs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:distr.op.ListReachableRequest.srcs)
}
inline void ListReachableRequest::set_srcs(int index, const char* value, size_t size) {
  srcs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:distr.op.ListReachableRequest.srcs)
}
inline std::string* ListReachableRequest::_internal_add_srcs() {
  return srcs_.Add();
}
inline void ListReachableRequest::add_srcs(const std::string& value) {
  srcs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:distr.op.ListReachableRequest.srcs)
}
inline void ListReachableRequest::add_srcs(std::string&& value) {
  srcs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:distr.op.ListReachableRequest.srcs)
}
inline void ListReachableRequest::add_srcs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  srcs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:distr.op.ListReachableRequest.srcs)
}
inline void ListReachableRequest::add_srcs(const char* value, size_t size) {
  srcs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:distr.op.ListReachableRequest.srcs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListReachableRequest::srcs() const {
  // @@protoc_insertion_point(field_list:distr.op.ListReachableRequest.srcs)
  return srcs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListReachableRequest::mutable_srcs() {
  // @@protoc_insertion_point(field_mutable_list:distr.op.ListReachableRequest.srcs)
  return &srcs_;
}

// repeated string dests = 2;
inline int ListReachableRequest::_internal_dests_size() const {
  return dests_.size();
}
inline int ListReachableRequest::dests_size() const {
  return _internal_dests_size();
}
inline void ListReachableRequest::clear_dests() {
  dests_.Clear();
}
inline std::string* ListReachableRequest::add_dests() {
  // @@protoc_insertion_point(field_add_mutable:distr.op.ListReachableRequest.dests)
  return _internal_add_dests();
}
inline const std::string& ListReachableRequest::_internal_dests(int index) const {
  return dests_.Get(index);
}
inline const std::string& ListReachableRequest::dests(int index) const {
  // @@protoc_insertion_point(field_get:distr.op.ListReachableRequest.dests)
  return _internal_dests(index);
}
inline std::string* ListReachableRequest::mutable_dests(int index) {
  // @@protoc_insertion_point(field_mutable:distr.op.ListReachableRequest.dests)
  return dests_.Mutable(index);
}
inline void ListReachableRequest::set_dests(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:distr.op.ListReachableRequest.dests)
  dests_.Mutable(index)->assign(value);
}
inline void ListReachableRequest::set_dests(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:distr.op.ListReachableRequest.dests)
  dests_.Mutable(index)->assign(std::move(value));
}
inline void ListReachableRequest::set_dests(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dests_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:distr.op.ListReachableRequest.dests)
}
inline void ListReachableRequest::set_dests(int index, const char* value, size_t size) {
  dests_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:distr.op.ListReachableRequest.dests)
}
inline std::string* ListReachableRequest::_internal_add_dests() {
  return dests_.Add();
}
inline void ListReachableRequest::add_dests(const std::string& value) {
  dests_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:distr.op.ListReachableRequest.dests)
}
inline void ListReachableRequest::add_dests(std::string&& value) {
  dests_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:distr.op.ListReachableRequest.dests)
}
inline void ListReachableRequest::add_dests(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dests_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:distr.op.ListReachableRequest.dests)
}
inline void ListReachableRequest::add_dests(const char* value, size_t size) {
  dests_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:distr.op.ListReachableRequest.dests)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListReachableRequest::dests() const {
  // @@protoc_insertion_point(field_list:distr.op.ListReachableRequest.dests)
  return dests_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListReachableRequest::mutable_dests() {
  // @@protoc_insertion_point(field_mutable_list:distr.op.ListReachableRequest.dests)
  return &dests_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ListReachableResponse

// map<string, .distr.op.Reachables> srcs = 1;
inline int ListReachableResponse::_internal_srcs_size() const {
  return srcs_.size();
}
inline int ListReachableResponse::srcs_size() const {
  return _internal_srcs_size();
}
inline void ListReachableResponse::clear_srcs() {
  srcs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::op::Reachables >&
ListReachableResponse::_internal_srcs() const {
  return srcs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::op::Reachables >&
ListReachableResponse::srcs() const {
  // @@protoc_insertion_point(field_map:distr.op.ListReachableResponse.srcs)
  return _internal_srcs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::op::Reachables >*
ListReachableResponse::_internal_mutable_srcs() {
  return srcs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::op::Reachables >*
ListReachableResponse::mutable_srcs() {
  // @@protoc_insertion_point(field_mutable_map:distr.op.ListReachableResponse.srcs)
  return _internal_mutable_srcs();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CreateDeriveRequest

// map<string, .distr.io.NodeMeta> root_grads = 1;
inline int CreateDeriveRequest::_internal_root_grads_size() const {
  return root_grads_.size();
}
inline int CreateDeriveRequest::root_grads_size() const {
  return _internal_root_grads_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >&
CreateDeriveRequest::_internal_root_grads() const {
  return root_grads_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >&
CreateDeriveRequest::root_grads() const {
  // @@protoc_insertion_point(field_map:distr.op.CreateDeriveRequest.root_grads)
  return _internal_root_grads();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >*
CreateDeriveRequest::_internal_mutable_root_grads() {
  return root_grads_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >*
CreateDeriveRequest::mutable_root_grads() {
  // @@protoc_insertion_point(field_mutable_map:distr.op.CreateDeriveRequest.root_grads)
  return _internal_mutable_root_grads();
}

// repeated string targets = 2;
inline int CreateDeriveRequest::_internal_targets_size() const {
  return targets_.size();
}
inline int CreateDeriveRequest::targets_size() const {
  return _internal_targets_size();
}
inline void CreateDeriveRequest::clear_targets() {
  targets_.Clear();
}
inline std::string* CreateDeriveRequest::add_targets() {
  // @@protoc_insertion_point(field_add_mutable:distr.op.CreateDeriveRequest.targets)
  return _internal_add_targets();
}
inline const std::string& CreateDeriveRequest::_internal_targets(int index) const {
  return targets_.Get(index);
}
inline const std::string& CreateDeriveRequest::targets(int index) const {
  // @@protoc_insertion_point(field_get:distr.op.CreateDeriveRequest.targets)
  return _internal_targets(index);
}
inline std::string* CreateDeriveRequest::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:distr.op.CreateDeriveRequest.targets)
  return targets_.Mutable(index);
}
inline void CreateDeriveRequest::set_targets(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:distr.op.CreateDeriveRequest.targets)
  targets_.Mutable(index)->assign(value);
}
inline void CreateDeriveRequest::set_targets(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:distr.op.CreateDeriveRequest.targets)
  targets_.Mutable(index)->assign(std::move(value));
}
inline void CreateDeriveRequest::set_targets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  targets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:distr.op.CreateDeriveRequest.targets)
}
inline void CreateDeriveRequest::set_targets(int index, const char* value, size_t size) {
  targets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:distr.op.CreateDeriveRequest.targets)
}
inline std::string* CreateDeriveRequest::_internal_add_targets() {
  return targets_.Add();
}
inline void CreateDeriveRequest::add_targets(const std::string& value) {
  targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:distr.op.CreateDeriveRequest.targets)
}
inline void CreateDeriveRequest::add_targets(std::string&& value) {
  targets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:distr.op.CreateDeriveRequest.targets)
}
inline void CreateDeriveRequest::add_targets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:distr.op.CreateDeriveRequest.targets)
}
inline void CreateDeriveRequest::add_targets(const char* value, size_t size) {
  targets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:distr.op.CreateDeriveRequest.targets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateDeriveRequest::targets() const {
  // @@protoc_insertion_point(field_list:distr.op.CreateDeriveRequest.targets)
  return targets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateDeriveRequest::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:distr.op.CreateDeriveRequest.targets)
  return &targets_;
}

// string root = 3;
inline void CreateDeriveRequest::clear_root() {
  root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDeriveRequest::root() const {
  // @@protoc_insertion_point(field_get:distr.op.CreateDeriveRequest.root)
  return _internal_root();
}
inline void CreateDeriveRequest::set_root(const std::string& value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:distr.op.CreateDeriveRequest.root)
}
inline std::string* CreateDeriveRequest::mutable_root() {
  // @@protoc_insertion_point(field_mutable:distr.op.CreateDeriveRequest.root)
  return _internal_mutable_root();
}
inline const std::string& CreateDeriveRequest::_internal_root() const {
  return root_.GetNoArena();
}
inline void CreateDeriveRequest::_internal_set_root(const std::string& value) {
  
  root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDeriveRequest::set_root(std::string&& value) {
  
  root_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:distr.op.CreateDeriveRequest.root)
}
inline void CreateDeriveRequest::set_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:distr.op.CreateDeriveRequest.root)
}
inline void CreateDeriveRequest::set_root(const char* value, size_t size) {
  
  root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:distr.op.CreateDeriveRequest.root)
}
inline std::string* CreateDeriveRequest::_internal_mutable_root() {
  
  return root_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDeriveRequest::release_root() {
  // @@protoc_insertion_point(field_release:distr.op.CreateDeriveRequest.root)
  
  return root_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeriveRequest::set_allocated_root(std::string* root) {
  if (root != nullptr) {
    
  } else {
    
  }
  root_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root);
  // @@protoc_insertion_point(field_set_allocated:distr.op.CreateDeriveRequest.root)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CreateDeriveResponse

// map<string, string> grads = 1;
inline int CreateDeriveResponse::_internal_grads_size() const {
  return grads_.size();
}
inline int CreateDeriveResponse::grads_size() const {
  return _internal_grads_size();
}
inline void CreateDeriveResponse::clear_grads() {
  grads_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CreateDeriveResponse::_internal_grads() const {
  return grads_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CreateDeriveResponse::grads() const {
  // @@protoc_insertion_point(field_map:distr.op.CreateDeriveResponse.grads)
  return _internal_grads();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CreateDeriveResponse::_internal_mutable_grads() {
  return grads_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CreateDeriveResponse::mutable_grads() {
  // @@protoc_insertion_point(field_mutable_map:distr.op.CreateDeriveResponse.grads)
  return _internal_mutable_grads();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace op
}  // namespace distr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto
