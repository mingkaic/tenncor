// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tenncor/eteq/opsvc/distr.op.proto
#ifndef GRPC_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto__INCLUDED
#define GRPC_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto__INCLUDED

#include "tenncor/eteq/opsvc/distr.op.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace distr {
namespace op {

class DistrOperation final {
 public:
  static constexpr char const* service_full_name() {
    return "distr.op.DistrOperation";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Stream data for matched nodes if the data node is updated
    // Return stream ignores nodes that remain the same
    std::unique_ptr< ::grpc::ClientReaderInterface< ::distr::op::NodeData>> GetData(::grpc::ClientContext* context, const ::distr::op::GetDataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::distr::op::NodeData>>(GetDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::distr::op::NodeData>> AsyncGetData(::grpc::ClientContext* context, const ::distr::op::GetDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::distr::op::NodeData>>(AsyncGetDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::distr::op::NodeData>> PrepareAsyncGetData(::grpc::ClientContext* context, const ::distr::op::GetDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::distr::op::NodeData>>(PrepareAsyncGetDataRaw(context, request, cq));
    }
    // Find all src nodes that can reach dests
    virtual ::grpc::Status ListReachable(::grpc::ClientContext* context, const ::distr::op::ListReachableRequest& request, ::distr::op::ListReachableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::distr::op::ListReachableResponse>> AsyncListReachable(::grpc::ClientContext* context, const ::distr::op::ListReachableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::distr::op::ListReachableResponse>>(AsyncListReachableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::distr::op::ListReachableResponse>> PrepareAsyncListReachable(::grpc::ClientContext* context, const ::distr::op::ListReachableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::distr::op::ListReachableResponse>>(PrepareAsyncListReachableRaw(context, request, cq));
    }
    // Calculate the derivative of some root with respect to targets
    virtual ::grpc::Status CreateDerive(::grpc::ClientContext* context, const ::distr::op::CreateDeriveRequest& request, ::distr::op::CreateDeriveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::distr::op::CreateDeriveResponse>> AsyncCreateDerive(::grpc::ClientContext* context, const ::distr::op::CreateDeriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::distr::op::CreateDeriveResponse>>(AsyncCreateDeriveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::distr::op::CreateDeriveResponse>> PrepareAsyncCreateDerive(::grpc::ClientContext* context, const ::distr::op::CreateDeriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::distr::op::CreateDeriveResponse>>(PrepareAsyncCreateDeriveRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Stream data for matched nodes if the data node is updated
      // Return stream ignores nodes that remain the same
      virtual void GetData(::grpc::ClientContext* context, ::distr::op::GetDataRequest* request, ::grpc::experimental::ClientReadReactor< ::distr::op::NodeData>* reactor) = 0;
      // Find all src nodes that can reach dests
      virtual void ListReachable(::grpc::ClientContext* context, const ::distr::op::ListReachableRequest* request, ::distr::op::ListReachableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListReachable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::distr::op::ListReachableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListReachable(::grpc::ClientContext* context, const ::distr::op::ListReachableRequest* request, ::distr::op::ListReachableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListReachable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::distr::op::ListReachableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Calculate the derivative of some root with respect to targets
      virtual void CreateDerive(::grpc::ClientContext* context, const ::distr::op::CreateDeriveRequest* request, ::distr::op::CreateDeriveResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDerive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::distr::op::CreateDeriveResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDerive(::grpc::ClientContext* context, const ::distr::op::CreateDeriveRequest* request, ::distr::op::CreateDeriveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateDerive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::distr::op::CreateDeriveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::distr::op::NodeData>* GetDataRaw(::grpc::ClientContext* context, const ::distr::op::GetDataRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::distr::op::NodeData>* AsyncGetDataRaw(::grpc::ClientContext* context, const ::distr::op::GetDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::distr::op::NodeData>* PrepareAsyncGetDataRaw(::grpc::ClientContext* context, const ::distr::op::GetDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::distr::op::ListReachableResponse>* AsyncListReachableRaw(::grpc::ClientContext* context, const ::distr::op::ListReachableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::distr::op::ListReachableResponse>* PrepareAsyncListReachableRaw(::grpc::ClientContext* context, const ::distr::op::ListReachableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::distr::op::CreateDeriveResponse>* AsyncCreateDeriveRaw(::grpc::ClientContext* context, const ::distr::op::CreateDeriveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::distr::op::CreateDeriveResponse>* PrepareAsyncCreateDeriveRaw(::grpc::ClientContext* context, const ::distr::op::CreateDeriveRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::distr::op::NodeData>> GetData(::grpc::ClientContext* context, const ::distr::op::GetDataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::distr::op::NodeData>>(GetDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::distr::op::NodeData>> AsyncGetData(::grpc::ClientContext* context, const ::distr::op::GetDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::distr::op::NodeData>>(AsyncGetDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::distr::op::NodeData>> PrepareAsyncGetData(::grpc::ClientContext* context, const ::distr::op::GetDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::distr::op::NodeData>>(PrepareAsyncGetDataRaw(context, request, cq));
    }
    ::grpc::Status ListReachable(::grpc::ClientContext* context, const ::distr::op::ListReachableRequest& request, ::distr::op::ListReachableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::distr::op::ListReachableResponse>> AsyncListReachable(::grpc::ClientContext* context, const ::distr::op::ListReachableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::distr::op::ListReachableResponse>>(AsyncListReachableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::distr::op::ListReachableResponse>> PrepareAsyncListReachable(::grpc::ClientContext* context, const ::distr::op::ListReachableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::distr::op::ListReachableResponse>>(PrepareAsyncListReachableRaw(context, request, cq));
    }
    ::grpc::Status CreateDerive(::grpc::ClientContext* context, const ::distr::op::CreateDeriveRequest& request, ::distr::op::CreateDeriveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::distr::op::CreateDeriveResponse>> AsyncCreateDerive(::grpc::ClientContext* context, const ::distr::op::CreateDeriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::distr::op::CreateDeriveResponse>>(AsyncCreateDeriveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::distr::op::CreateDeriveResponse>> PrepareAsyncCreateDerive(::grpc::ClientContext* context, const ::distr::op::CreateDeriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::distr::op::CreateDeriveResponse>>(PrepareAsyncCreateDeriveRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetData(::grpc::ClientContext* context, ::distr::op::GetDataRequest* request, ::grpc::experimental::ClientReadReactor< ::distr::op::NodeData>* reactor) override;
      void ListReachable(::grpc::ClientContext* context, const ::distr::op::ListReachableRequest* request, ::distr::op::ListReachableResponse* response, std::function<void(::grpc::Status)>) override;
      void ListReachable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::distr::op::ListReachableResponse* response, std::function<void(::grpc::Status)>) override;
      void ListReachable(::grpc::ClientContext* context, const ::distr::op::ListReachableRequest* request, ::distr::op::ListReachableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListReachable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::distr::op::ListReachableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateDerive(::grpc::ClientContext* context, const ::distr::op::CreateDeriveRequest* request, ::distr::op::CreateDeriveResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateDerive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::distr::op::CreateDeriveResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateDerive(::grpc::ClientContext* context, const ::distr::op::CreateDeriveRequest* request, ::distr::op::CreateDeriveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateDerive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::distr::op::CreateDeriveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::distr::op::NodeData>* GetDataRaw(::grpc::ClientContext* context, const ::distr::op::GetDataRequest& request) override;
    ::grpc::ClientAsyncReader< ::distr::op::NodeData>* AsyncGetDataRaw(::grpc::ClientContext* context, const ::distr::op::GetDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::distr::op::NodeData>* PrepareAsyncGetDataRaw(::grpc::ClientContext* context, const ::distr::op::GetDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::distr::op::ListReachableResponse>* AsyncListReachableRaw(::grpc::ClientContext* context, const ::distr::op::ListReachableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::distr::op::ListReachableResponse>* PrepareAsyncListReachableRaw(::grpc::ClientContext* context, const ::distr::op::ListReachableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::distr::op::CreateDeriveResponse>* AsyncCreateDeriveRaw(::grpc::ClientContext* context, const ::distr::op::CreateDeriveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::distr::op::CreateDeriveResponse>* PrepareAsyncCreateDeriveRaw(::grpc::ClientContext* context, const ::distr::op::CreateDeriveRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetData_;
    const ::grpc::internal::RpcMethod rpcmethod_ListReachable_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateDerive_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Stream data for matched nodes if the data node is updated
    // Return stream ignores nodes that remain the same
    virtual ::grpc::Status GetData(::grpc::ServerContext* context, const ::distr::op::GetDataRequest* request, ::grpc::ServerWriter< ::distr::op::NodeData>* writer);
    // Find all src nodes that can reach dests
    virtual ::grpc::Status ListReachable(::grpc::ServerContext* context, const ::distr::op::ListReachableRequest* request, ::distr::op::ListReachableResponse* response);
    // Calculate the derivative of some root with respect to targets
    virtual ::grpc::Status CreateDerive(::grpc::ServerContext* context, const ::distr::op::CreateDeriveRequest* request, ::distr::op::CreateDeriveResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::distr::op::GetDataRequest* /*request*/, ::grpc::ServerWriter< ::distr::op::NodeData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetData(::grpc::ServerContext* context, ::distr::op::GetDataRequest* request, ::grpc::ServerAsyncWriter< ::distr::op::NodeData>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListReachable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListReachable() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListReachable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListReachable(::grpc::ServerContext* /*context*/, const ::distr::op::ListReachableRequest* /*request*/, ::distr::op::ListReachableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListReachable(::grpc::ServerContext* context, ::distr::op::ListReachableRequest* request, ::grpc::ServerAsyncResponseWriter< ::distr::op::ListReachableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDerive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateDerive() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateDerive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDerive(::grpc::ServerContext* /*context*/, const ::distr::op::CreateDeriveRequest* /*request*/, ::distr::op::CreateDeriveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDerive(::grpc::ServerContext* context, ::distr::op::CreateDeriveRequest* request, ::grpc::ServerAsyncResponseWriter< ::distr::op::CreateDeriveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetData<WithAsyncMethod_ListReachable<WithAsyncMethod_CreateDerive<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetData() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::distr::op::GetDataRequest, ::distr::op::NodeData>(
          [this] { return this->GetData(); }));
    }
    ~ExperimentalWithCallbackMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::distr::op::GetDataRequest* /*request*/, ::grpc::ServerWriter< ::distr::op::NodeData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::distr::op::GetDataRequest, ::distr::op::NodeData>* GetData() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::distr::op::GetDataRequest, ::distr::op::NodeData>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListReachable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListReachable() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::distr::op::ListReachableRequest, ::distr::op::ListReachableResponse>(
          [this](::grpc::ServerContext* context,
                 const ::distr::op::ListReachableRequest* request,
                 ::distr::op::ListReachableResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListReachable(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ListReachable(
        ::grpc::experimental::MessageAllocator< ::distr::op::ListReachableRequest, ::distr::op::ListReachableResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::distr::op::ListReachableRequest, ::distr::op::ListReachableResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListReachable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListReachable(::grpc::ServerContext* /*context*/, const ::distr::op::ListReachableRequest* /*request*/, ::distr::op::ListReachableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListReachable(::grpc::ServerContext* /*context*/, const ::distr::op::ListReachableRequest* /*request*/, ::distr::op::ListReachableResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateDerive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateDerive() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::distr::op::CreateDeriveRequest, ::distr::op::CreateDeriveResponse>(
          [this](::grpc::ServerContext* context,
                 const ::distr::op::CreateDeriveRequest* request,
                 ::distr::op::CreateDeriveResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateDerive(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateDerive(
        ::grpc::experimental::MessageAllocator< ::distr::op::CreateDeriveRequest, ::distr::op::CreateDeriveResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::distr::op::CreateDeriveRequest, ::distr::op::CreateDeriveResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateDerive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDerive(::grpc::ServerContext* /*context*/, const ::distr::op::CreateDeriveRequest* /*request*/, ::distr::op::CreateDeriveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateDerive(::grpc::ServerContext* /*context*/, const ::distr::op::CreateDeriveRequest* /*request*/, ::distr::op::CreateDeriveResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GetData<ExperimentalWithCallbackMethod_ListReachable<ExperimentalWithCallbackMethod_CreateDerive<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::distr::op::GetDataRequest* /*request*/, ::grpc::ServerWriter< ::distr::op::NodeData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListReachable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListReachable() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListReachable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListReachable(::grpc::ServerContext* /*context*/, const ::distr::op::ListReachableRequest* /*request*/, ::distr::op::ListReachableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateDerive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateDerive() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateDerive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDerive(::grpc::ServerContext* /*context*/, const ::distr::op::CreateDeriveRequest* /*request*/, ::distr::op::CreateDeriveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::distr::op::GetDataRequest* /*request*/, ::grpc::ServerWriter< ::distr::op::NodeData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListReachable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListReachable() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListReachable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListReachable(::grpc::ServerContext* /*context*/, const ::distr::op::ListReachableRequest* /*request*/, ::distr::op::ListReachableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListReachable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateDerive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateDerive() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateDerive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDerive(::grpc::ServerContext* /*context*/, const ::distr::op::CreateDeriveRequest* /*request*/, ::distr::op::CreateDeriveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDerive(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetData() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->GetData(); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::distr::op::GetDataRequest* /*request*/, ::grpc::ServerWriter< ::distr::op::NodeData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetData() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListReachable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListReachable() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListReachable(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListReachable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListReachable(::grpc::ServerContext* /*context*/, const ::distr::op::ListReachableRequest* /*request*/, ::distr::op::ListReachableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListReachable(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateDerive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateDerive() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateDerive(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateDerive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDerive(::grpc::ServerContext* /*context*/, const ::distr::op::CreateDeriveRequest* /*request*/, ::distr::op::CreateDeriveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateDerive(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListReachable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListReachable() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::distr::op::ListReachableRequest, ::distr::op::ListReachableResponse>(std::bind(&WithStreamedUnaryMethod_ListReachable<BaseClass>::StreamedListReachable, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListReachable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListReachable(::grpc::ServerContext* /*context*/, const ::distr::op::ListReachableRequest* /*request*/, ::distr::op::ListReachableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListReachable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::distr::op::ListReachableRequest,::distr::op::ListReachableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDerive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateDerive() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::distr::op::CreateDeriveRequest, ::distr::op::CreateDeriveResponse>(std::bind(&WithStreamedUnaryMethod_CreateDerive<BaseClass>::StreamedCreateDerive, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateDerive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDerive(::grpc::ServerContext* /*context*/, const ::distr::op::CreateDeriveRequest* /*request*/, ::distr::op::CreateDeriveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDerive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::distr::op::CreateDeriveRequest,::distr::op::CreateDeriveResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListReachable<WithStreamedUnaryMethod_CreateDerive<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::distr::op::GetDataRequest, ::distr::op::NodeData>(std::bind(&WithSplitStreamingMethod_GetData<BaseClass>::StreamedGetData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::distr::op::GetDataRequest* /*request*/, ::grpc::ServerWriter< ::distr::op::NodeData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetData(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::distr::op::GetDataRequest,::distr::op::NodeData>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetData<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetData<WithStreamedUnaryMethod_ListReachable<WithStreamedUnaryMethod_CreateDerive<Service > > > StreamedService;
};

}  // namespace op
}  // namespace distr


#endif  // GRPC_tenncor_2feteq_2fopsvc_2fdistr_2eop_2eproto__INCLUDED
