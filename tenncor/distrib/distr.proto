syntax = "proto3";

package distr;

// ======== GENERAL MESSAGE OBJECTS ========

message NodeMeta {
    string instance = 1;

    string uuid = 2;

    string dtype = 3;

    repeated int64 shape = 4;
}

message NodeData {
    string uuid = 1;

    repeated double data = 2;

    int64 version = 3;
}

// ======== REQUEST + RESPONSE MESSAGES ========

message FindNodesRequest {
    repeated string uuids = 1;
}

message FindNodesResponse {
    repeated NodeMeta values = 1;
}

message GetDataRequest {
    repeated string uuids = 1;
}

message FindReachableRequest {
    repeated string srcs = 1;

    repeated string dests = 2;
}

message FindReachableResponse {
    repeated string srcs = 1;
}

// Request for partial derivation of some
// absolute root with respect to target nodes
message DeriveRequest {
    // maps reference id of local roots to
    // derivative of absolute root wrt to local roots
    map<string,string> root_grads = 1;

    // reference id of targets
    repeated string targets = 2;

    // reference id of the root deriving wrt
    string root = 3;
}

message DeriveResponse {
    map<string,string> grads = 1;
}

service DistrManager {
    // List all nodes matching request parameters
    rpc FindNodes (FindNodesRequest) returns (FindNodesResponse);

    // Stream data for matched nodes if the data node is updated
    // Return stream ignores nodes that remain the same
    rpc GetData (GetDataRequest) returns (stream NodeData);

    // === Graph Operations ===

    // Find all src nodes that can reach dests
    rpc FindReachable (FindReachableRequest) returns (FindReachableResponse);

    // Calculate the derivative of some root with respect to targets
    rpc Derive (DeriveRequest) returns (DeriveResponse);
}
