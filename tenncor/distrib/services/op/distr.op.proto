syntax = "proto3";

import "tenncor/distrib/services/io/distr.io.proto";

package distr.op;

// ======== GENERAL MESSAGE OBJECTS ========

message NodeData {
    string uuid = 1;

    repeated double data = 2;

    int64 version = 3;
}

message Reachables {
    repeated string reachables = 1;
}

// ======== REQUEST + RESPONSE MESSAGES ========

message GetDataRequest {
    repeated string uuids = 1;

    repeated string ignored = 2;
}

message ListReachableRequest {
    repeated string srcs = 1;

    repeated string dests = 2;
}

message ListReachableResponse {
    map<string,Reachables> srcs = 1;
}

// Request for partial derivation of some
// absolute root with respect to target nodes
message CreateDeriveRequest {
    // maps reference id of local roots to
    // derivative of absolute root wrt to local roots
    map<string,distr.io.NodeMeta> root_grads = 1;

    // reference id of targets
    repeated string targets = 2;

    // reference id of the root deriving wrt
    string root = 3;
}

message CreateDeriveResponse {
    map<string,string> grads = 1;
}

service DistrOperation {
    // Stream data for matched nodes if the data node is updated
    // Return stream ignores nodes that remain the same
    rpc GetData (GetDataRequest) returns (stream NodeData);

    // Find all src nodes that can reach dests
    rpc ListReachable (ListReachableRequest) returns (ListReachableResponse);

    // Calculate the derivative of some root with respect to targets
    rpc CreateDerive (CreateDeriveRequest) returns (CreateDeriveResponse);
}
