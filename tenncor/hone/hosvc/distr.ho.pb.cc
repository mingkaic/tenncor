// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tenncor/hone/hosvc/distr.ho.proto

#include "tenncor/hone/hosvc/distr.ho.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PutOptimizeResponse_RootOptsEntry_DoNotUse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PutReplaceRequest_ReplacesEntry_DoNotUse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeMeta_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_internal_2fopt_2foptimize_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Optimization_internal_2fopt_2foptimize_2eproto;
namespace distr {
namespace ho {
class PutOptimizeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutOptimizeRequest> _instance;
} _PutOptimizeRequest_default_instance_;
class PutOptimizeResponse_RootOptsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutOptimizeResponse_RootOptsEntry_DoNotUse> _instance;
} _PutOptimizeResponse_RootOptsEntry_DoNotUse_default_instance_;
class PutOptimizeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutOptimizeResponse> _instance;
} _PutOptimizeResponse_default_instance_;
class PutReplaceRequest_ReplacesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutReplaceRequest_ReplacesEntry_DoNotUse> _instance;
} _PutReplaceRequest_ReplacesEntry_DoNotUse_default_instance_;
class PutReplaceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutReplaceRequest> _instance;
} _PutReplaceRequest_default_instance_;
class PutReplaceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutReplaceResponse> _instance;
} _PutReplaceResponse_default_instance_;
}  // namespace ho
}  // namespace distr
static void InitDefaultsscc_info_PutOptimizeRequest_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::distr::ho::_PutOptimizeRequest_default_instance_;
    new (ptr) ::distr::ho::PutOptimizeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::distr::ho::PutOptimizeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PutOptimizeRequest_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PutOptimizeRequest_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto}, {
      &scc_info_Optimization_internal_2fopt_2foptimize_2eproto.base,}};

static void InitDefaultsscc_info_PutOptimizeResponse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::distr::ho::_PutOptimizeResponse_default_instance_;
    new (ptr) ::distr::ho::PutOptimizeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::distr::ho::PutOptimizeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PutOptimizeResponse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PutOptimizeResponse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto}, {
      &scc_info_PutOptimizeResponse_RootOptsEntry_DoNotUse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.base,}};

static void InitDefaultsscc_info_PutOptimizeResponse_RootOptsEntry_DoNotUse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::distr::ho::_PutOptimizeResponse_RootOptsEntry_DoNotUse_default_instance_;
    new (ptr) ::distr::ho::PutOptimizeResponse_RootOptsEntry_DoNotUse();
  }
  ::distr::ho::PutOptimizeResponse_RootOptsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PutOptimizeResponse_RootOptsEntry_DoNotUse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PutOptimizeResponse_RootOptsEntry_DoNotUse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto}, {
      &scc_info_NodeMeta_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto.base,}};

static void InitDefaultsscc_info_PutReplaceRequest_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::distr::ho::_PutReplaceRequest_default_instance_;
    new (ptr) ::distr::ho::PutReplaceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::distr::ho::PutReplaceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PutReplaceRequest_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PutReplaceRequest_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto}, {
      &scc_info_PutReplaceRequest_ReplacesEntry_DoNotUse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.base,}};

static void InitDefaultsscc_info_PutReplaceRequest_ReplacesEntry_DoNotUse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::distr::ho::_PutReplaceRequest_ReplacesEntry_DoNotUse_default_instance_;
    new (ptr) ::distr::ho::PutReplaceRequest_ReplacesEntry_DoNotUse();
  }
  ::distr::ho::PutReplaceRequest_ReplacesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PutReplaceRequest_ReplacesEntry_DoNotUse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PutReplaceRequest_ReplacesEntry_DoNotUse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto}, {
      &scc_info_NodeMeta_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto.base,}};

static void InitDefaultsscc_info_PutReplaceResponse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::distr::ho::_PutReplaceResponse_default_instance_;
    new (ptr) ::distr::ho::PutReplaceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::distr::ho::PutReplaceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PutReplaceResponse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PutReplaceResponse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::distr::ho::PutOptimizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::distr::ho::PutOptimizeRequest, opts_),
  PROTOBUF_FIELD_OFFSET(::distr::ho::PutOptimizeRequest, uuids_),
  PROTOBUF_FIELD_OFFSET(::distr::ho::PutOptimizeResponse_RootOptsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::distr::ho::PutOptimizeResponse_RootOptsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::distr::ho::PutOptimizeResponse_RootOptsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::distr::ho::PutOptimizeResponse_RootOptsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::distr::ho::PutOptimizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::distr::ho::PutOptimizeResponse, root_opts_),
  PROTOBUF_FIELD_OFFSET(::distr::ho::PutReplaceRequest_ReplacesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::distr::ho::PutReplaceRequest_ReplacesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::distr::ho::PutReplaceRequest_ReplacesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::distr::ho::PutReplaceRequest_ReplacesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::distr::ho::PutReplaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::distr::ho::PutReplaceRequest, replaces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::distr::ho::PutReplaceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::distr::ho::PutOptimizeRequest)},
  { 7, 14, sizeof(::distr::ho::PutOptimizeResponse_RootOptsEntry_DoNotUse)},
  { 16, -1, sizeof(::distr::ho::PutOptimizeResponse)},
  { 22, 29, sizeof(::distr::ho::PutReplaceRequest_ReplacesEntry_DoNotUse)},
  { 31, -1, sizeof(::distr::ho::PutReplaceRequest)},
  { 37, -1, sizeof(::distr::ho::PutReplaceResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::distr::ho::_PutOptimizeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::distr::ho::_PutOptimizeResponse_RootOptsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::distr::ho::_PutOptimizeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::distr::ho::_PutReplaceRequest_ReplacesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::distr::ho::_PutReplaceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::distr::ho::_PutReplaceResponse_default_instance_),
};

const char descriptor_table_protodef_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!tenncor/hone/hosvc/distr.ho.proto\022\010dis"
  "tr.ho\032\033internal/opt/optimize.proto\032\"tenn"
  "cor/distr/iosvc/distr.io.proto\"D\n\022PutOpt"
  "imizeRequest\022\037\n\004opts\030\001 \001(\0132\021.opt.Optimiz"
  "ation\022\r\n\005uuids\030\002 \003(\t\"\232\001\n\023PutOptimizeResp"
  "onse\022>\n\troot_opts\030\001 \003(\0132+.distr.ho.PutOp"
  "timizeResponse.RootOptsEntry\032C\n\rRootOpts"
  "Entry\022\013\n\003key\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022.dist"
  "r.io.NodeMeta:\0028\001\"\225\001\n\021PutReplaceRequest\022"
  ";\n\010replaces\030\001 \003(\0132).distr.ho.PutReplaceR"
  "equest.ReplacesEntry\032C\n\rReplacesEntry\022\013\n"
  "\003key\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022.distr.io.Nod"
  "eMeta:\0028\001\"\024\n\022PutReplaceResponse2_\n\021Distr"
  "Optimization\022J\n\013PutOptimize\022\034.distr.ho.P"
  "utOptimizeRequest\032\035.distr.ho.PutOptimize"
  "Responseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto_deps[2] = {
  &::descriptor_table_internal_2fopt_2foptimize_2eproto,
  &::descriptor_table_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto_sccs[6] = {
  &scc_info_PutOptimizeRequest_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.base,
  &scc_info_PutOptimizeResponse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.base,
  &scc_info_PutOptimizeResponse_RootOptsEntry_DoNotUse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.base,
  &scc_info_PutReplaceRequest_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.base,
  &scc_info_PutReplaceRequest_ReplacesEntry_DoNotUse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.base,
  &scc_info_PutReplaceResponse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto_once;
static bool descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto = {
  &descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto_initialized, descriptor_table_protodef_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto, "tenncor/hone/hosvc/distr.ho.proto", 616,
  &descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto_once, descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto_sccs, descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto_deps, 6, 2,
  schemas, file_default_instances, TableStruct_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto::offsets,
  file_level_metadata_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto, 6, file_level_enum_descriptors_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto, file_level_service_descriptors_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto), true);
namespace distr {
namespace ho {

// ===================================================================

void PutOptimizeRequest::InitAsDefaultInstance() {
  ::distr::ho::_PutOptimizeRequest_default_instance_._instance.get_mutable()->opts_ = const_cast< ::opt::Optimization*>(
      ::opt::Optimization::internal_default_instance());
}
class PutOptimizeRequest::_Internal {
 public:
  static const ::opt::Optimization& opts(const PutOptimizeRequest* msg);
};

const ::opt::Optimization&
PutOptimizeRequest::_Internal::opts(const PutOptimizeRequest* msg) {
  return *msg->opts_;
}
void PutOptimizeRequest::clear_opts() {
  if (GetArenaNoVirtual() == nullptr && opts_ != nullptr) {
    delete opts_;
  }
  opts_ = nullptr;
}
PutOptimizeRequest::PutOptimizeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:distr.ho.PutOptimizeRequest)
}
PutOptimizeRequest::PutOptimizeRequest(const PutOptimizeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      uuids_(from.uuids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_opts()) {
    opts_ = new ::opt::Optimization(*from.opts_);
  } else {
    opts_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:distr.ho.PutOptimizeRequest)
}

void PutOptimizeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutOptimizeRequest_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.base);
  opts_ = nullptr;
}

PutOptimizeRequest::~PutOptimizeRequest() {
  // @@protoc_insertion_point(destructor:distr.ho.PutOptimizeRequest)
  SharedDtor();
}

void PutOptimizeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete opts_;
}

void PutOptimizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutOptimizeRequest& PutOptimizeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutOptimizeRequest_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.base);
  return *internal_default_instance();
}


void PutOptimizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:distr.ho.PutOptimizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuids_.Clear();
  if (GetArenaNoVirtual() == nullptr && opts_ != nullptr) {
    delete opts_;
  }
  opts_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PutOptimizeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .opt.Optimization opts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_opts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string uuids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_uuids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "distr.ho.PutOptimizeRequest.uuids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutOptimizeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distr.ho.PutOptimizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opt.Optimization opts = 1;
  if (this->has_opts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::opts(this), target, stream);
  }

  // repeated string uuids = 2;
  for (int i = 0, n = this->_internal_uuids_size(); i < n; i++) {
    const auto& s = this->_internal_uuids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "distr.ho.PutOptimizeRequest.uuids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distr.ho.PutOptimizeRequest)
  return target;
}

size_t PutOptimizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distr.ho.PutOptimizeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string uuids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(uuids_.size());
  for (int i = 0, n = uuids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      uuids_.Get(i));
  }

  // .opt.Optimization opts = 1;
  if (this->has_opts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opts_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutOptimizeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:distr.ho.PutOptimizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PutOptimizeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutOptimizeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:distr.ho.PutOptimizeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:distr.ho.PutOptimizeRequest)
    MergeFrom(*source);
  }
}

void PutOptimizeRequest::MergeFrom(const PutOptimizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distr.ho.PutOptimizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uuids_.MergeFrom(from.uuids_);
  if (from.has_opts()) {
    _internal_mutable_opts()->::opt::Optimization::MergeFrom(from._internal_opts());
  }
}

void PutOptimizeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:distr.ho.PutOptimizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutOptimizeRequest::CopyFrom(const PutOptimizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distr.ho.PutOptimizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutOptimizeRequest::IsInitialized() const {
  return true;
}

void PutOptimizeRequest::InternalSwap(PutOptimizeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uuids_.InternalSwap(&other->uuids_);
  swap(opts_, other->opts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutOptimizeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PutOptimizeResponse_RootOptsEntry_DoNotUse::PutOptimizeResponse_RootOptsEntry_DoNotUse() {}
PutOptimizeResponse_RootOptsEntry_DoNotUse::PutOptimizeResponse_RootOptsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PutOptimizeResponse_RootOptsEntry_DoNotUse::MergeFrom(const PutOptimizeResponse_RootOptsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PutOptimizeResponse_RootOptsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PutOptimizeResponse_RootOptsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PutOptimizeResponse::InitAsDefaultInstance() {
}
class PutOptimizeResponse::_Internal {
 public:
};

void PutOptimizeResponse::clear_root_opts() {
  root_opts_.Clear();
}
PutOptimizeResponse::PutOptimizeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:distr.ho.PutOptimizeResponse)
}
PutOptimizeResponse::PutOptimizeResponse(const PutOptimizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  root_opts_.MergeFrom(from.root_opts_);
  // @@protoc_insertion_point(copy_constructor:distr.ho.PutOptimizeResponse)
}

void PutOptimizeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutOptimizeResponse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.base);
}

PutOptimizeResponse::~PutOptimizeResponse() {
  // @@protoc_insertion_point(destructor:distr.ho.PutOptimizeResponse)
  SharedDtor();
}

void PutOptimizeResponse::SharedDtor() {
}

void PutOptimizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutOptimizeResponse& PutOptimizeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutOptimizeResponse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.base);
  return *internal_default_instance();
}


void PutOptimizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:distr.ho.PutOptimizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  root_opts_.Clear();
  _internal_metadata_.Clear();
}

const char* PutOptimizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .distr.io.NodeMeta> root_opts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&root_opts_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutOptimizeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distr.ho.PutOptimizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .distr.io.NodeMeta> root_opts = 1;
  if (!this->_internal_root_opts().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "distr.ho.PutOptimizeResponse.RootOptsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_root_opts().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_root_opts().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >::const_iterator
          it = this->_internal_root_opts().begin();
          it != this->_internal_root_opts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PutOptimizeResponse_RootOptsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >::const_iterator
          it = this->_internal_root_opts().begin();
          it != this->_internal_root_opts().end(); ++it) {
        target = PutOptimizeResponse_RootOptsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distr.ho.PutOptimizeResponse)
  return target;
}

size_t PutOptimizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distr.ho.PutOptimizeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .distr.io.NodeMeta> root_opts = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_root_opts_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >::const_iterator
      it = this->_internal_root_opts().begin();
      it != this->_internal_root_opts().end(); ++it) {
    total_size += PutOptimizeResponse_RootOptsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutOptimizeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:distr.ho.PutOptimizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PutOptimizeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutOptimizeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:distr.ho.PutOptimizeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:distr.ho.PutOptimizeResponse)
    MergeFrom(*source);
  }
}

void PutOptimizeResponse::MergeFrom(const PutOptimizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distr.ho.PutOptimizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  root_opts_.MergeFrom(from.root_opts_);
}

void PutOptimizeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:distr.ho.PutOptimizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutOptimizeResponse::CopyFrom(const PutOptimizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distr.ho.PutOptimizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutOptimizeResponse::IsInitialized() const {
  return true;
}

void PutOptimizeResponse::InternalSwap(PutOptimizeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  root_opts_.Swap(&other->root_opts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutOptimizeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PutReplaceRequest_ReplacesEntry_DoNotUse::PutReplaceRequest_ReplacesEntry_DoNotUse() {}
PutReplaceRequest_ReplacesEntry_DoNotUse::PutReplaceRequest_ReplacesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PutReplaceRequest_ReplacesEntry_DoNotUse::MergeFrom(const PutReplaceRequest_ReplacesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PutReplaceRequest_ReplacesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PutReplaceRequest_ReplacesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PutReplaceRequest::InitAsDefaultInstance() {
}
class PutReplaceRequest::_Internal {
 public:
};

void PutReplaceRequest::clear_replaces() {
  replaces_.Clear();
}
PutReplaceRequest::PutReplaceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:distr.ho.PutReplaceRequest)
}
PutReplaceRequest::PutReplaceRequest(const PutReplaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  replaces_.MergeFrom(from.replaces_);
  // @@protoc_insertion_point(copy_constructor:distr.ho.PutReplaceRequest)
}

void PutReplaceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutReplaceRequest_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.base);
}

PutReplaceRequest::~PutReplaceRequest() {
  // @@protoc_insertion_point(destructor:distr.ho.PutReplaceRequest)
  SharedDtor();
}

void PutReplaceRequest::SharedDtor() {
}

void PutReplaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutReplaceRequest& PutReplaceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutReplaceRequest_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.base);
  return *internal_default_instance();
}


void PutReplaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:distr.ho.PutReplaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replaces_.Clear();
  _internal_metadata_.Clear();
}

const char* PutReplaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .distr.io.NodeMeta> replaces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&replaces_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutReplaceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distr.ho.PutReplaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .distr.io.NodeMeta> replaces = 1;
  if (!this->_internal_replaces().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "distr.ho.PutReplaceRequest.ReplacesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_replaces().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_replaces().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >::const_iterator
          it = this->_internal_replaces().begin();
          it != this->_internal_replaces().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PutReplaceRequest_ReplacesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >::const_iterator
          it = this->_internal_replaces().begin();
          it != this->_internal_replaces().end(); ++it) {
        target = PutReplaceRequest_ReplacesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distr.ho.PutReplaceRequest)
  return target;
}

size_t PutReplaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distr.ho.PutReplaceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .distr.io.NodeMeta> replaces = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_replaces_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >::const_iterator
      it = this->_internal_replaces().begin();
      it != this->_internal_replaces().end(); ++it) {
    total_size += PutReplaceRequest_ReplacesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutReplaceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:distr.ho.PutReplaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PutReplaceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutReplaceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:distr.ho.PutReplaceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:distr.ho.PutReplaceRequest)
    MergeFrom(*source);
  }
}

void PutReplaceRequest::MergeFrom(const PutReplaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distr.ho.PutReplaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replaces_.MergeFrom(from.replaces_);
}

void PutReplaceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:distr.ho.PutReplaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutReplaceRequest::CopyFrom(const PutReplaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distr.ho.PutReplaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutReplaceRequest::IsInitialized() const {
  return true;
}

void PutReplaceRequest::InternalSwap(PutReplaceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  replaces_.Swap(&other->replaces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutReplaceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutReplaceResponse::InitAsDefaultInstance() {
}
class PutReplaceResponse::_Internal {
 public:
};

PutReplaceResponse::PutReplaceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:distr.ho.PutReplaceResponse)
}
PutReplaceResponse::PutReplaceResponse(const PutReplaceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:distr.ho.PutReplaceResponse)
}

void PutReplaceResponse::SharedCtor() {
}

PutReplaceResponse::~PutReplaceResponse() {
  // @@protoc_insertion_point(destructor:distr.ho.PutReplaceResponse)
  SharedDtor();
}

void PutReplaceResponse::SharedDtor() {
}

void PutReplaceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutReplaceResponse& PutReplaceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutReplaceResponse_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.base);
  return *internal_default_instance();
}


void PutReplaceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:distr.ho.PutReplaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* PutReplaceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutReplaceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distr.ho.PutReplaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distr.ho.PutReplaceResponse)
  return target;
}

size_t PutReplaceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distr.ho.PutReplaceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutReplaceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:distr.ho.PutReplaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PutReplaceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutReplaceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:distr.ho.PutReplaceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:distr.ho.PutReplaceResponse)
    MergeFrom(*source);
  }
}

void PutReplaceResponse::MergeFrom(const PutReplaceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distr.ho.PutReplaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PutReplaceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:distr.ho.PutReplaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutReplaceResponse::CopyFrom(const PutReplaceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distr.ho.PutReplaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutReplaceResponse::IsInitialized() const {
  return true;
}

void PutReplaceResponse::InternalSwap(PutReplaceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutReplaceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ho
}  // namespace distr
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::distr::ho::PutOptimizeRequest* Arena::CreateMaybeMessage< ::distr::ho::PutOptimizeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::distr::ho::PutOptimizeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::distr::ho::PutOptimizeResponse_RootOptsEntry_DoNotUse* Arena::CreateMaybeMessage< ::distr::ho::PutOptimizeResponse_RootOptsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::distr::ho::PutOptimizeResponse_RootOptsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::distr::ho::PutOptimizeResponse* Arena::CreateMaybeMessage< ::distr::ho::PutOptimizeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::distr::ho::PutOptimizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::distr::ho::PutReplaceRequest_ReplacesEntry_DoNotUse* Arena::CreateMaybeMessage< ::distr::ho::PutReplaceRequest_ReplacesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::distr::ho::PutReplaceRequest_ReplacesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::distr::ho::PutReplaceRequest* Arena::CreateMaybeMessage< ::distr::ho::PutReplaceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::distr::ho::PutReplaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::distr::ho::PutReplaceResponse* Arena::CreateMaybeMessage< ::distr::ho::PutReplaceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::distr::ho::PutReplaceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
