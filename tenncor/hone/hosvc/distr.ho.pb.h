// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tenncor/hone/hosvc/distr.ho.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "internal/opt/optimize.pb.h"
#include "tenncor/distr/iosvc/distr.io.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto;
namespace distr {
namespace ho {
class PutOptimizeRequest;
class PutOptimizeRequestDefaultTypeInternal;
extern PutOptimizeRequestDefaultTypeInternal _PutOptimizeRequest_default_instance_;
class PutOptimizeResponse;
class PutOptimizeResponseDefaultTypeInternal;
extern PutOptimizeResponseDefaultTypeInternal _PutOptimizeResponse_default_instance_;
class PutOptimizeResponse_RootOptsEntry_DoNotUse;
class PutOptimizeResponse_RootOptsEntry_DoNotUseDefaultTypeInternal;
extern PutOptimizeResponse_RootOptsEntry_DoNotUseDefaultTypeInternal _PutOptimizeResponse_RootOptsEntry_DoNotUse_default_instance_;
class PutReplaceRequest;
class PutReplaceRequestDefaultTypeInternal;
extern PutReplaceRequestDefaultTypeInternal _PutReplaceRequest_default_instance_;
class PutReplaceRequest_ReplacesEntry_DoNotUse;
class PutReplaceRequest_ReplacesEntry_DoNotUseDefaultTypeInternal;
extern PutReplaceRequest_ReplacesEntry_DoNotUseDefaultTypeInternal _PutReplaceRequest_ReplacesEntry_DoNotUse_default_instance_;
class PutReplaceResponse;
class PutReplaceResponseDefaultTypeInternal;
extern PutReplaceResponseDefaultTypeInternal _PutReplaceResponse_default_instance_;
}  // namespace ho
}  // namespace distr
PROTOBUF_NAMESPACE_OPEN
template<> ::distr::ho::PutOptimizeRequest* Arena::CreateMaybeMessage<::distr::ho::PutOptimizeRequest>(Arena*);
template<> ::distr::ho::PutOptimizeResponse* Arena::CreateMaybeMessage<::distr::ho::PutOptimizeResponse>(Arena*);
template<> ::distr::ho::PutOptimizeResponse_RootOptsEntry_DoNotUse* Arena::CreateMaybeMessage<::distr::ho::PutOptimizeResponse_RootOptsEntry_DoNotUse>(Arena*);
template<> ::distr::ho::PutReplaceRequest* Arena::CreateMaybeMessage<::distr::ho::PutReplaceRequest>(Arena*);
template<> ::distr::ho::PutReplaceRequest_ReplacesEntry_DoNotUse* Arena::CreateMaybeMessage<::distr::ho::PutReplaceRequest_ReplacesEntry_DoNotUse>(Arena*);
template<> ::distr::ho::PutReplaceResponse* Arena::CreateMaybeMessage<::distr::ho::PutReplaceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace distr {
namespace ho {

// ===================================================================

class PutOptimizeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distr.ho.PutOptimizeRequest) */ {
 public:
  PutOptimizeRequest();
  virtual ~PutOptimizeRequest();

  PutOptimizeRequest(const PutOptimizeRequest& from);
  PutOptimizeRequest(PutOptimizeRequest&& from) noexcept
    : PutOptimizeRequest() {
    *this = ::std::move(from);
  }

  inline PutOptimizeRequest& operator=(const PutOptimizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutOptimizeRequest& operator=(PutOptimizeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutOptimizeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutOptimizeRequest* internal_default_instance() {
    return reinterpret_cast<const PutOptimizeRequest*>(
               &_PutOptimizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PutOptimizeRequest& a, PutOptimizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutOptimizeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutOptimizeRequest* New() const final {
    return CreateMaybeMessage<PutOptimizeRequest>(nullptr);
  }

  PutOptimizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutOptimizeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutOptimizeRequest& from);
  void MergeFrom(const PutOptimizeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutOptimizeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distr.ho.PutOptimizeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto);
    return ::descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidsFieldNumber = 2,
    kOptsFieldNumber = 1,
  };
  // repeated string uuids = 2;
  int uuids_size() const;
  private:
  int _internal_uuids_size() const;
  public:
  void clear_uuids();
  const std::string& uuids(int index) const;
  std::string* mutable_uuids(int index);
  void set_uuids(int index, const std::string& value);
  void set_uuids(int index, std::string&& value);
  void set_uuids(int index, const char* value);
  void set_uuids(int index, const char* value, size_t size);
  std::string* add_uuids();
  void add_uuids(const std::string& value);
  void add_uuids(std::string&& value);
  void add_uuids(const char* value);
  void add_uuids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_uuids();
  private:
  const std::string& _internal_uuids(int index) const;
  std::string* _internal_add_uuids();
  public:

  // .opt.Optimization opts = 1;
  bool has_opts() const;
  private:
  bool _internal_has_opts() const;
  public:
  void clear_opts();
  const ::opt::Optimization& opts() const;
  ::opt::Optimization* release_opts();
  ::opt::Optimization* mutable_opts();
  void set_allocated_opts(::opt::Optimization* opts);
  private:
  const ::opt::Optimization& _internal_opts() const;
  ::opt::Optimization* _internal_mutable_opts();
  public:

  // @@protoc_insertion_point(class_scope:distr.ho.PutOptimizeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> uuids_;
  ::opt::Optimization* opts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto;
};
// -------------------------------------------------------------------

class PutOptimizeResponse_RootOptsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PutOptimizeResponse_RootOptsEntry_DoNotUse, 
    std::string, ::distr::io::NodeMeta,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PutOptimizeResponse_RootOptsEntry_DoNotUse, 
    std::string, ::distr::io::NodeMeta,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  PutOptimizeResponse_RootOptsEntry_DoNotUse();
  PutOptimizeResponse_RootOptsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PutOptimizeResponse_RootOptsEntry_DoNotUse& other);
  static const PutOptimizeResponse_RootOptsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PutOptimizeResponse_RootOptsEntry_DoNotUse*>(&_PutOptimizeResponse_RootOptsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "distr.ho.PutOptimizeResponse.RootOptsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto);
    return ::descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class PutOptimizeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distr.ho.PutOptimizeResponse) */ {
 public:
  PutOptimizeResponse();
  virtual ~PutOptimizeResponse();

  PutOptimizeResponse(const PutOptimizeResponse& from);
  PutOptimizeResponse(PutOptimizeResponse&& from) noexcept
    : PutOptimizeResponse() {
    *this = ::std::move(from);
  }

  inline PutOptimizeResponse& operator=(const PutOptimizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutOptimizeResponse& operator=(PutOptimizeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutOptimizeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutOptimizeResponse* internal_default_instance() {
    return reinterpret_cast<const PutOptimizeResponse*>(
               &_PutOptimizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PutOptimizeResponse& a, PutOptimizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PutOptimizeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutOptimizeResponse* New() const final {
    return CreateMaybeMessage<PutOptimizeResponse>(nullptr);
  }

  PutOptimizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutOptimizeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutOptimizeResponse& from);
  void MergeFrom(const PutOptimizeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutOptimizeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distr.ho.PutOptimizeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto);
    return ::descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRootOptsFieldNumber = 1,
  };
  // map<string, .distr.io.NodeMeta> root_opts = 1;
  int root_opts_size() const;
  private:
  int _internal_root_opts_size() const;
  public:
  void clear_root_opts();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >&
      _internal_root_opts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >*
      _internal_mutable_root_opts();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >&
      root_opts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >*
      mutable_root_opts();

  // @@protoc_insertion_point(class_scope:distr.ho.PutOptimizeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PutOptimizeResponse_RootOptsEntry_DoNotUse,
      std::string, ::distr::io::NodeMeta,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > root_opts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto;
};
// -------------------------------------------------------------------

class PutReplaceRequest_ReplacesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PutReplaceRequest_ReplacesEntry_DoNotUse, 
    std::string, ::distr::io::NodeMeta,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PutReplaceRequest_ReplacesEntry_DoNotUse, 
    std::string, ::distr::io::NodeMeta,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  PutReplaceRequest_ReplacesEntry_DoNotUse();
  PutReplaceRequest_ReplacesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PutReplaceRequest_ReplacesEntry_DoNotUse& other);
  static const PutReplaceRequest_ReplacesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PutReplaceRequest_ReplacesEntry_DoNotUse*>(&_PutReplaceRequest_ReplacesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "distr.ho.PutReplaceRequest.ReplacesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto);
    return ::descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class PutReplaceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distr.ho.PutReplaceRequest) */ {
 public:
  PutReplaceRequest();
  virtual ~PutReplaceRequest();

  PutReplaceRequest(const PutReplaceRequest& from);
  PutReplaceRequest(PutReplaceRequest&& from) noexcept
    : PutReplaceRequest() {
    *this = ::std::move(from);
  }

  inline PutReplaceRequest& operator=(const PutReplaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutReplaceRequest& operator=(PutReplaceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutReplaceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutReplaceRequest* internal_default_instance() {
    return reinterpret_cast<const PutReplaceRequest*>(
               &_PutReplaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PutReplaceRequest& a, PutReplaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutReplaceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutReplaceRequest* New() const final {
    return CreateMaybeMessage<PutReplaceRequest>(nullptr);
  }

  PutReplaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutReplaceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutReplaceRequest& from);
  void MergeFrom(const PutReplaceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutReplaceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distr.ho.PutReplaceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto);
    return ::descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kReplacesFieldNumber = 1,
  };
  // map<string, .distr.io.NodeMeta> replaces = 1;
  int replaces_size() const;
  private:
  int _internal_replaces_size() const;
  public:
  void clear_replaces();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >&
      _internal_replaces() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >*
      _internal_mutable_replaces();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >&
      replaces() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >*
      mutable_replaces();

  // @@protoc_insertion_point(class_scope:distr.ho.PutReplaceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PutReplaceRequest_ReplacesEntry_DoNotUse,
      std::string, ::distr::io::NodeMeta,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > replaces_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto;
};
// -------------------------------------------------------------------

class PutReplaceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distr.ho.PutReplaceResponse) */ {
 public:
  PutReplaceResponse();
  virtual ~PutReplaceResponse();

  PutReplaceResponse(const PutReplaceResponse& from);
  PutReplaceResponse(PutReplaceResponse&& from) noexcept
    : PutReplaceResponse() {
    *this = ::std::move(from);
  }

  inline PutReplaceResponse& operator=(const PutReplaceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutReplaceResponse& operator=(PutReplaceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutReplaceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutReplaceResponse* internal_default_instance() {
    return reinterpret_cast<const PutReplaceResponse*>(
               &_PutReplaceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PutReplaceResponse& a, PutReplaceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PutReplaceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutReplaceResponse* New() const final {
    return CreateMaybeMessage<PutReplaceResponse>(nullptr);
  }

  PutReplaceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutReplaceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutReplaceResponse& from);
  void MergeFrom(const PutReplaceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutReplaceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distr.ho.PutReplaceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto);
    return ::descriptor_table_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:distr.ho.PutReplaceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PutOptimizeRequest

// .opt.Optimization opts = 1;
inline bool PutOptimizeRequest::_internal_has_opts() const {
  return this != internal_default_instance() && opts_ != nullptr;
}
inline bool PutOptimizeRequest::has_opts() const {
  return _internal_has_opts();
}
inline const ::opt::Optimization& PutOptimizeRequest::_internal_opts() const {
  const ::opt::Optimization* p = opts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::opt::Optimization*>(
      &::opt::_Optimization_default_instance_);
}
inline const ::opt::Optimization& PutOptimizeRequest::opts() const {
  // @@protoc_insertion_point(field_get:distr.ho.PutOptimizeRequest.opts)
  return _internal_opts();
}
inline ::opt::Optimization* PutOptimizeRequest::release_opts() {
  // @@protoc_insertion_point(field_release:distr.ho.PutOptimizeRequest.opts)
  
  ::opt::Optimization* temp = opts_;
  opts_ = nullptr;
  return temp;
}
inline ::opt::Optimization* PutOptimizeRequest::_internal_mutable_opts() {
  
  if (opts_ == nullptr) {
    auto* p = CreateMaybeMessage<::opt::Optimization>(GetArenaNoVirtual());
    opts_ = p;
  }
  return opts_;
}
inline ::opt::Optimization* PutOptimizeRequest::mutable_opts() {
  // @@protoc_insertion_point(field_mutable:distr.ho.PutOptimizeRequest.opts)
  return _internal_mutable_opts();
}
inline void PutOptimizeRequest::set_allocated_opts(::opt::Optimization* opts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(opts_);
  }
  if (opts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      opts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, opts, submessage_arena);
    }
    
  } else {
    
  }
  opts_ = opts;
  // @@protoc_insertion_point(field_set_allocated:distr.ho.PutOptimizeRequest.opts)
}

// repeated string uuids = 2;
inline int PutOptimizeRequest::_internal_uuids_size() const {
  return uuids_.size();
}
inline int PutOptimizeRequest::uuids_size() const {
  return _internal_uuids_size();
}
inline void PutOptimizeRequest::clear_uuids() {
  uuids_.Clear();
}
inline std::string* PutOptimizeRequest::add_uuids() {
  // @@protoc_insertion_point(field_add_mutable:distr.ho.PutOptimizeRequest.uuids)
  return _internal_add_uuids();
}
inline const std::string& PutOptimizeRequest::_internal_uuids(int index) const {
  return uuids_.Get(index);
}
inline const std::string& PutOptimizeRequest::uuids(int index) const {
  // @@protoc_insertion_point(field_get:distr.ho.PutOptimizeRequest.uuids)
  return _internal_uuids(index);
}
inline std::string* PutOptimizeRequest::mutable_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:distr.ho.PutOptimizeRequest.uuids)
  return uuids_.Mutable(index);
}
inline void PutOptimizeRequest::set_uuids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:distr.ho.PutOptimizeRequest.uuids)
  uuids_.Mutable(index)->assign(value);
}
inline void PutOptimizeRequest::set_uuids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:distr.ho.PutOptimizeRequest.uuids)
  uuids_.Mutable(index)->assign(std::move(value));
}
inline void PutOptimizeRequest::set_uuids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:distr.ho.PutOptimizeRequest.uuids)
}
inline void PutOptimizeRequest::set_uuids(int index, const char* value, size_t size) {
  uuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:distr.ho.PutOptimizeRequest.uuids)
}
inline std::string* PutOptimizeRequest::_internal_add_uuids() {
  return uuids_.Add();
}
inline void PutOptimizeRequest::add_uuids(const std::string& value) {
  uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:distr.ho.PutOptimizeRequest.uuids)
}
inline void PutOptimizeRequest::add_uuids(std::string&& value) {
  uuids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:distr.ho.PutOptimizeRequest.uuids)
}
inline void PutOptimizeRequest::add_uuids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:distr.ho.PutOptimizeRequest.uuids)
}
inline void PutOptimizeRequest::add_uuids(const char* value, size_t size) {
  uuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:distr.ho.PutOptimizeRequest.uuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PutOptimizeRequest::uuids() const {
  // @@protoc_insertion_point(field_list:distr.ho.PutOptimizeRequest.uuids)
  return uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PutOptimizeRequest::mutable_uuids() {
  // @@protoc_insertion_point(field_mutable_list:distr.ho.PutOptimizeRequest.uuids)
  return &uuids_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PutOptimizeResponse

// map<string, .distr.io.NodeMeta> root_opts = 1;
inline int PutOptimizeResponse::_internal_root_opts_size() const {
  return root_opts_.size();
}
inline int PutOptimizeResponse::root_opts_size() const {
  return _internal_root_opts_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >&
PutOptimizeResponse::_internal_root_opts() const {
  return root_opts_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >&
PutOptimizeResponse::root_opts() const {
  // @@protoc_insertion_point(field_map:distr.ho.PutOptimizeResponse.root_opts)
  return _internal_root_opts();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >*
PutOptimizeResponse::_internal_mutable_root_opts() {
  return root_opts_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >*
PutOptimizeResponse::mutable_root_opts() {
  // @@protoc_insertion_point(field_mutable_map:distr.ho.PutOptimizeResponse.root_opts)
  return _internal_mutable_root_opts();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PutReplaceRequest

// map<string, .distr.io.NodeMeta> replaces = 1;
inline int PutReplaceRequest::_internal_replaces_size() const {
  return replaces_.size();
}
inline int PutReplaceRequest::replaces_size() const {
  return _internal_replaces_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >&
PutReplaceRequest::_internal_replaces() const {
  return replaces_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >&
PutReplaceRequest::replaces() const {
  // @@protoc_insertion_point(field_map:distr.ho.PutReplaceRequest.replaces)
  return _internal_replaces();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >*
PutReplaceRequest::_internal_mutable_replaces() {
  return replaces_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >*
PutReplaceRequest::mutable_replaces() {
  // @@protoc_insertion_point(field_mutable_map:distr.ho.PutReplaceRequest.replaces)
  return _internal_mutable_replaces();
}

// -------------------------------------------------------------------

// PutReplaceResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ho
}  // namespace distr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tenncor_2fhone_2fhosvc_2fdistr_2eho_2eproto
