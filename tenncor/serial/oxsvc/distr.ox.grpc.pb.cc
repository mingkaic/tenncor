// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tenncor/serial/oxsvc/distr.ox.proto

#include "tenncor/serial/oxsvc/distr.ox.pb.h"
#include "tenncor/serial/oxsvc/distr.ox.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace distr {
namespace ox {

static const char* DistrSerialization_method_names[] = {
  "/distr.ox.DistrSerialization/GetSaveGraph",
  "/distr.ox.DistrSerialization/PostLoadGraph",
};

std::unique_ptr< DistrSerialization::Stub> DistrSerialization::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DistrSerialization::Stub> stub(new DistrSerialization::Stub(channel));
  return stub;
}

DistrSerialization::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetSaveGraph_(DistrSerialization_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostLoadGraph_(DistrSerialization_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DistrSerialization::Stub::GetSaveGraph(::grpc::ClientContext* context, const ::distr::ox::GetSaveGraphRequest& request, ::distr::ox::GetSaveGraphResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSaveGraph_, context, request, response);
}

void DistrSerialization::Stub::experimental_async::GetSaveGraph(::grpc::ClientContext* context, const ::distr::ox::GetSaveGraphRequest* request, ::distr::ox::GetSaveGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSaveGraph_, context, request, response, std::move(f));
}

void DistrSerialization::Stub::experimental_async::GetSaveGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::distr::ox::GetSaveGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSaveGraph_, context, request, response, std::move(f));
}

void DistrSerialization::Stub::experimental_async::GetSaveGraph(::grpc::ClientContext* context, const ::distr::ox::GetSaveGraphRequest* request, ::distr::ox::GetSaveGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSaveGraph_, context, request, response, reactor);
}

void DistrSerialization::Stub::experimental_async::GetSaveGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::distr::ox::GetSaveGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSaveGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::distr::ox::GetSaveGraphResponse>* DistrSerialization::Stub::AsyncGetSaveGraphRaw(::grpc::ClientContext* context, const ::distr::ox::GetSaveGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::distr::ox::GetSaveGraphResponse>::Create(channel_.get(), cq, rpcmethod_GetSaveGraph_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::distr::ox::GetSaveGraphResponse>* DistrSerialization::Stub::PrepareAsyncGetSaveGraphRaw(::grpc::ClientContext* context, const ::distr::ox::GetSaveGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::distr::ox::GetSaveGraphResponse>::Create(channel_.get(), cq, rpcmethod_GetSaveGraph_, context, request, false);
}

::grpc::Status DistrSerialization::Stub::PostLoadGraph(::grpc::ClientContext* context, const ::distr::ox::PostLoadGraphRequest& request, ::distr::ox::PostLoadGraphResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostLoadGraph_, context, request, response);
}

void DistrSerialization::Stub::experimental_async::PostLoadGraph(::grpc::ClientContext* context, const ::distr::ox::PostLoadGraphRequest* request, ::distr::ox::PostLoadGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostLoadGraph_, context, request, response, std::move(f));
}

void DistrSerialization::Stub::experimental_async::PostLoadGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::distr::ox::PostLoadGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostLoadGraph_, context, request, response, std::move(f));
}

void DistrSerialization::Stub::experimental_async::PostLoadGraph(::grpc::ClientContext* context, const ::distr::ox::PostLoadGraphRequest* request, ::distr::ox::PostLoadGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostLoadGraph_, context, request, response, reactor);
}

void DistrSerialization::Stub::experimental_async::PostLoadGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::distr::ox::PostLoadGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostLoadGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::distr::ox::PostLoadGraphResponse>* DistrSerialization::Stub::AsyncPostLoadGraphRaw(::grpc::ClientContext* context, const ::distr::ox::PostLoadGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::distr::ox::PostLoadGraphResponse>::Create(channel_.get(), cq, rpcmethod_PostLoadGraph_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::distr::ox::PostLoadGraphResponse>* DistrSerialization::Stub::PrepareAsyncPostLoadGraphRaw(::grpc::ClientContext* context, const ::distr::ox::PostLoadGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::distr::ox::PostLoadGraphResponse>::Create(channel_.get(), cq, rpcmethod_PostLoadGraph_, context, request, false);
}

DistrSerialization::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DistrSerialization_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DistrSerialization::Service, ::distr::ox::GetSaveGraphRequest, ::distr::ox::GetSaveGraphResponse>(
          [](DistrSerialization::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::distr::ox::GetSaveGraphRequest* req,
             ::distr::ox::GetSaveGraphResponse* resp) {
               return service->GetSaveGraph(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DistrSerialization_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DistrSerialization::Service, ::distr::ox::PostLoadGraphRequest, ::distr::ox::PostLoadGraphResponse>(
          [](DistrSerialization::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::distr::ox::PostLoadGraphRequest* req,
             ::distr::ox::PostLoadGraphResponse* resp) {
               return service->PostLoadGraph(ctx, req, resp);
             }, this)));
}

DistrSerialization::Service::~Service() {
}

::grpc::Status DistrSerialization::Service::GetSaveGraph(::grpc::ServerContext* context, const ::distr::ox::GetSaveGraphRequest* request, ::distr::ox::GetSaveGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DistrSerialization::Service::PostLoadGraph(::grpc::ServerContext* context, const ::distr::ox::PostLoadGraphRequest* request, ::distr::ox::PostLoadGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace distr
}  // namespace ox

