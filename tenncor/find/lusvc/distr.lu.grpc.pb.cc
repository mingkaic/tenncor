// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tenncor/find/lusvc/distr.lu.proto

#include "tenncor/find/lusvc/distr.lu.pb.h"
#include "tenncor/find/lusvc/distr.lu.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace distr {
namespace lu {

static const char* DistrLookup_method_names[] = {
  "/distr.lu.DistrLookup/ListNodes",
};

std::unique_ptr< DistrLookup::Stub> DistrLookup::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DistrLookup::Stub> stub(new DistrLookup::Stub(channel));
  return stub;
}

DistrLookup::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListNodes_(DistrLookup_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DistrLookup::Stub::ListNodes(::grpc::ClientContext* context, const ::distr::lu::ListNodesRequest& request, ::distr::lu::ListNodesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListNodes_, context, request, response);
}

void DistrLookup::Stub::experimental_async::ListNodes(::grpc::ClientContext* context, const ::distr::lu::ListNodesRequest* request, ::distr::lu::ListNodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListNodes_, context, request, response, std::move(f));
}

void DistrLookup::Stub::experimental_async::ListNodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::distr::lu::ListNodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListNodes_, context, request, response, std::move(f));
}

void DistrLookup::Stub::experimental_async::ListNodes(::grpc::ClientContext* context, const ::distr::lu::ListNodesRequest* request, ::distr::lu::ListNodesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListNodes_, context, request, response, reactor);
}

void DistrLookup::Stub::experimental_async::ListNodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::distr::lu::ListNodesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListNodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::distr::lu::ListNodesResponse>* DistrLookup::Stub::AsyncListNodesRaw(::grpc::ClientContext* context, const ::distr::lu::ListNodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::distr::lu::ListNodesResponse>::Create(channel_.get(), cq, rpcmethod_ListNodes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::distr::lu::ListNodesResponse>* DistrLookup::Stub::PrepareAsyncListNodesRaw(::grpc::ClientContext* context, const ::distr::lu::ListNodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::distr::lu::ListNodesResponse>::Create(channel_.get(), cq, rpcmethod_ListNodes_, context, request, false);
}

DistrLookup::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DistrLookup_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DistrLookup::Service, ::distr::lu::ListNodesRequest, ::distr::lu::ListNodesResponse>(
          std::mem_fn(&DistrLookup::Service::ListNodes), this)));
}

DistrLookup::Service::~Service() {
}

::grpc::Status DistrLookup::Service::ListNodes(::grpc::ServerContext* context, const ::distr::lu::ListNodesRequest* request, ::distr::lu::ListNodesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace distr
}  // namespace lu

