// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tenncor/find/lusvc/distr.lu.proto

#include "tenncor/find/lusvc/distr.lu.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeMeta_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QueryResult_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResult_SymbsEntry_DoNotUse_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_internal_2fquery_2fquery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Attribute_internal_2fquery_2fquery_2eproto;
namespace distr {
namespace lu {
class QueryResult_SymbsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResult_SymbsEntry_DoNotUse> _instance;
} _QueryResult_SymbsEntry_DoNotUse_default_instance_;
class QueryResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResult> _instance;
} _QueryResult_default_instance_;
class ListNodesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListNodesRequest> _instance;
} _ListNodesRequest_default_instance_;
class ListNodesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListNodesResponse> _instance;
} _ListNodesResponse_default_instance_;
}  // namespace lu
}  // namespace distr
static void InitDefaultsscc_info_ListNodesRequest_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::distr::lu::_ListNodesRequest_default_instance_;
    new (ptr) ::distr::lu::ListNodesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::distr::lu::ListNodesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListNodesRequest_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListNodesRequest_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto}, {
      &scc_info_Attribute_internal_2fquery_2fquery_2eproto.base,}};

static void InitDefaultsscc_info_ListNodesResponse_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::distr::lu::_ListNodesResponse_default_instance_;
    new (ptr) ::distr::lu::ListNodesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::distr::lu::ListNodesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListNodesResponse_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListNodesResponse_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto}, {
      &scc_info_QueryResult_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto.base,}};

static void InitDefaultsscc_info_QueryResult_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::distr::lu::_QueryResult_default_instance_;
    new (ptr) ::distr::lu::QueryResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::distr::lu::QueryResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QueryResult_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_QueryResult_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto}, {
      &scc_info_NodeMeta_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto.base,
      &scc_info_QueryResult_SymbsEntry_DoNotUse_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto.base,}};

static void InitDefaultsscc_info_QueryResult_SymbsEntry_DoNotUse_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::distr::lu::_QueryResult_SymbsEntry_DoNotUse_default_instance_;
    new (ptr) ::distr::lu::QueryResult_SymbsEntry_DoNotUse();
  }
  ::distr::lu::QueryResult_SymbsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResult_SymbsEntry_DoNotUse_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryResult_SymbsEntry_DoNotUse_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto}, {
      &scc_info_NodeMeta_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::distr::lu::QueryResult_SymbsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::distr::lu::QueryResult_SymbsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::distr::lu::QueryResult_SymbsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::distr::lu::QueryResult_SymbsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::distr::lu::QueryResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::distr::lu::QueryResult, root_),
  PROTOBUF_FIELD_OFFSET(::distr::lu::QueryResult, symbs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::distr::lu::ListNodesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::distr::lu::ListNodesRequest, uuids_),
  PROTOBUF_FIELD_OFFSET(::distr::lu::ListNodesRequest, pattern_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::distr::lu::ListNodesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::distr::lu::ListNodesResponse, matches_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::distr::lu::QueryResult_SymbsEntry_DoNotUse)},
  { 9, -1, sizeof(::distr::lu::QueryResult)},
  { 16, -1, sizeof(::distr::lu::ListNodesRequest)},
  { 23, -1, sizeof(::distr::lu::ListNodesResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::distr::lu::_QueryResult_SymbsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::distr::lu::_QueryResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::distr::lu::_ListNodesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::distr::lu::_ListNodesResponse_default_instance_),
};

const char descriptor_table_protodef_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!tenncor/find/lusvc/distr.lu.proto\022\010dis"
  "tr.lu\032\032internal/query/query.proto\032\"tennc"
  "or/distr/iosvc/distr.io.proto\"\242\001\n\013QueryR"
  "esult\022 \n\004root\030\001 \001(\0132\022.distr.io.NodeMeta\022"
  "/\n\005symbs\030\002 \003(\0132 .distr.lu.QueryResult.Sy"
  "mbsEntry\032@\n\nSymbsEntry\022\013\n\003key\030\001 \001(\t\022!\n\005v"
  "alue\030\002 \001(\0132\022.distr.io.NodeMeta:\0028\001\"\?\n\020Li"
  "stNodesRequest\022\r\n\005uuids\030\001 \003(\t\022\034\n\007pattern"
  "\030\002 \001(\0132\013.query.Node\";\n\021ListNodesResponse"
  "\022&\n\007matches\030\001 \003(\0132\025.distr.lu.QueryResult"
  "2S\n\013DistrLookup\022D\n\tListNodes\022\032.distr.lu."
  "ListNodesRequest\032\033.distr.lu.ListNodesRes"
  "ponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto_deps[2] = {
  &::descriptor_table_internal_2fquery_2fquery_2eproto,
  &::descriptor_table_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto_sccs[4] = {
  &scc_info_ListNodesRequest_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto.base,
  &scc_info_ListNodesResponse_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto.base,
  &scc_info_QueryResult_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto.base,
  &scc_info_QueryResult_SymbsEntry_DoNotUse_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto_once;
static bool descriptor_table_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto = {
  &descriptor_table_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto_initialized, descriptor_table_protodef_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto, "tenncor/find/lusvc/distr.lu.proto", 493,
  &descriptor_table_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto_once, descriptor_table_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto_sccs, descriptor_table_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto::offsets,
  file_level_metadata_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto, 4, file_level_enum_descriptors_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto, file_level_service_descriptors_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto), true);
namespace distr {
namespace lu {

// ===================================================================

QueryResult_SymbsEntry_DoNotUse::QueryResult_SymbsEntry_DoNotUse() {}
QueryResult_SymbsEntry_DoNotUse::QueryResult_SymbsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QueryResult_SymbsEntry_DoNotUse::MergeFrom(const QueryResult_SymbsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QueryResult_SymbsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void QueryResult_SymbsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void QueryResult::InitAsDefaultInstance() {
  ::distr::lu::_QueryResult_default_instance_._instance.get_mutable()->root_ = const_cast< ::distr::io::NodeMeta*>(
      ::distr::io::NodeMeta::internal_default_instance());
}
class QueryResult::_Internal {
 public:
  static const ::distr::io::NodeMeta& root(const QueryResult* msg);
};

const ::distr::io::NodeMeta&
QueryResult::_Internal::root(const QueryResult* msg) {
  return *msg->root_;
}
void QueryResult::clear_root() {
  if (GetArenaNoVirtual() == nullptr && root_ != nullptr) {
    delete root_;
  }
  root_ = nullptr;
}
void QueryResult::clear_symbs() {
  symbs_.Clear();
}
QueryResult::QueryResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:distr.lu.QueryResult)
}
QueryResult::QueryResult(const QueryResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbs_.MergeFrom(from.symbs_);
  if (from._internal_has_root()) {
    root_ = new ::distr::io::NodeMeta(*from.root_);
  } else {
    root_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:distr.lu.QueryResult)
}

void QueryResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryResult_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto.base);
  root_ = nullptr;
}

QueryResult::~QueryResult() {
  // @@protoc_insertion_point(destructor:distr.lu.QueryResult)
  SharedDtor();
}

void QueryResult::SharedDtor() {
  if (this != internal_default_instance()) delete root_;
}

void QueryResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResult& QueryResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResult_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto.base);
  return *internal_default_instance();
}


void QueryResult::Clear() {
// @@protoc_insertion_point(message_clear_start:distr.lu.QueryResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbs_.Clear();
  if (GetArenaNoVirtual() == nullptr && root_ != nullptr) {
    delete root_;
  }
  root_ = nullptr;
  _internal_metadata_.Clear();
}

const char* QueryResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .distr.io.NodeMeta root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .distr.io.NodeMeta> symbs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&symbs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distr.lu.QueryResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .distr.io.NodeMeta root = 1;
  if (this->has_root()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::root(this), target, stream);
  }

  // map<string, .distr.io.NodeMeta> symbs = 2;
  if (!this->_internal_symbs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "distr.lu.QueryResult.SymbsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_symbs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_symbs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >::const_iterator
          it = this->_internal_symbs().begin();
          it != this->_internal_symbs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QueryResult_SymbsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >::const_iterator
          it = this->_internal_symbs().begin();
          it != this->_internal_symbs().end(); ++it) {
        target = QueryResult_SymbsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distr.lu.QueryResult)
  return target;
}

size_t QueryResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distr.lu.QueryResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .distr.io.NodeMeta> symbs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_symbs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >::const_iterator
      it = this->_internal_symbs().begin();
      it != this->_internal_symbs().end(); ++it) {
    total_size += QueryResult_SymbsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .distr.io.NodeMeta root = 1;
  if (this->has_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *root_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:distr.lu.QueryResult)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:distr.lu.QueryResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:distr.lu.QueryResult)
    MergeFrom(*source);
  }
}

void QueryResult::MergeFrom(const QueryResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distr.lu.QueryResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  symbs_.MergeFrom(from.symbs_);
  if (from.has_root()) {
    _internal_mutable_root()->::distr::io::NodeMeta::MergeFrom(from._internal_root());
  }
}

void QueryResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:distr.lu.QueryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult::CopyFrom(const QueryResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distr.lu.QueryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult::IsInitialized() const {
  return true;
}

void QueryResult::InternalSwap(QueryResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  symbs_.Swap(&other->symbs_);
  swap(root_, other->root_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListNodesRequest::InitAsDefaultInstance() {
  ::distr::lu::_ListNodesRequest_default_instance_._instance.get_mutable()->pattern_ = const_cast< ::query::Node*>(
      ::query::Node::internal_default_instance());
}
class ListNodesRequest::_Internal {
 public:
  static const ::query::Node& pattern(const ListNodesRequest* msg);
};

const ::query::Node&
ListNodesRequest::_Internal::pattern(const ListNodesRequest* msg) {
  return *msg->pattern_;
}
void ListNodesRequest::clear_pattern() {
  if (GetArenaNoVirtual() == nullptr && pattern_ != nullptr) {
    delete pattern_;
  }
  pattern_ = nullptr;
}
ListNodesRequest::ListNodesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:distr.lu.ListNodesRequest)
}
ListNodesRequest::ListNodesRequest(const ListNodesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      uuids_(from.uuids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pattern()) {
    pattern_ = new ::query::Node(*from.pattern_);
  } else {
    pattern_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:distr.lu.ListNodesRequest)
}

void ListNodesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListNodesRequest_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto.base);
  pattern_ = nullptr;
}

ListNodesRequest::~ListNodesRequest() {
  // @@protoc_insertion_point(destructor:distr.lu.ListNodesRequest)
  SharedDtor();
}

void ListNodesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete pattern_;
}

void ListNodesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListNodesRequest& ListNodesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListNodesRequest_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto.base);
  return *internal_default_instance();
}


void ListNodesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:distr.lu.ListNodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuids_.Clear();
  if (GetArenaNoVirtual() == nullptr && pattern_ != nullptr) {
    delete pattern_;
  }
  pattern_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListNodesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string uuids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_uuids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "distr.lu.ListNodesRequest.uuids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .query.Node pattern = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pattern(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListNodesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distr.lu.ListNodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string uuids = 1;
  for (int i = 0, n = this->_internal_uuids_size(); i < n; i++) {
    const auto& s = this->_internal_uuids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "distr.lu.ListNodesRequest.uuids");
    target = stream->WriteString(1, s, target);
  }

  // .query.Node pattern = 2;
  if (this->has_pattern()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pattern(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distr.lu.ListNodesRequest)
  return target;
}

size_t ListNodesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distr.lu.ListNodesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string uuids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(uuids_.size());
  for (int i = 0, n = uuids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      uuids_.Get(i));
  }

  // .query.Node pattern = 2;
  if (this->has_pattern()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pattern_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListNodesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:distr.lu.ListNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListNodesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListNodesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:distr.lu.ListNodesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:distr.lu.ListNodesRequest)
    MergeFrom(*source);
  }
}

void ListNodesRequest::MergeFrom(const ListNodesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distr.lu.ListNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uuids_.MergeFrom(from.uuids_);
  if (from.has_pattern()) {
    _internal_mutable_pattern()->::query::Node::MergeFrom(from._internal_pattern());
  }
}

void ListNodesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:distr.lu.ListNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListNodesRequest::CopyFrom(const ListNodesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distr.lu.ListNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNodesRequest::IsInitialized() const {
  return true;
}

void ListNodesRequest::InternalSwap(ListNodesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uuids_.InternalSwap(&other->uuids_);
  swap(pattern_, other->pattern_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNodesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListNodesResponse::InitAsDefaultInstance() {
}
class ListNodesResponse::_Internal {
 public:
};

ListNodesResponse::ListNodesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:distr.lu.ListNodesResponse)
}
ListNodesResponse::ListNodesResponse(const ListNodesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:distr.lu.ListNodesResponse)
}

void ListNodesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListNodesResponse_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto.base);
}

ListNodesResponse::~ListNodesResponse() {
  // @@protoc_insertion_point(destructor:distr.lu.ListNodesResponse)
  SharedDtor();
}

void ListNodesResponse::SharedDtor() {
}

void ListNodesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListNodesResponse& ListNodesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListNodesResponse_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto.base);
  return *internal_default_instance();
}


void ListNodesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:distr.lu.ListNodesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.Clear();
  _internal_metadata_.Clear();
}

const char* ListNodesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .distr.lu.QueryResult matches = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListNodesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distr.lu.ListNodesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .distr.lu.QueryResult matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_matches(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distr.lu.ListNodesResponse)
  return target;
}

size_t ListNodesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distr.lu.ListNodesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .distr.lu.QueryResult matches = 1;
  total_size += 1UL * this->_internal_matches_size();
  for (const auto& msg : this->matches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListNodesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:distr.lu.ListNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListNodesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListNodesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:distr.lu.ListNodesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:distr.lu.ListNodesResponse)
    MergeFrom(*source);
  }
}

void ListNodesResponse::MergeFrom(const ListNodesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distr.lu.ListNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
}

void ListNodesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:distr.lu.ListNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListNodesResponse::CopyFrom(const ListNodesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distr.lu.ListNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNodesResponse::IsInitialized() const {
  return true;
}

void ListNodesResponse::InternalSwap(ListNodesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  matches_.InternalSwap(&other->matches_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNodesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lu
}  // namespace distr
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::distr::lu::QueryResult_SymbsEntry_DoNotUse* Arena::CreateMaybeMessage< ::distr::lu::QueryResult_SymbsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::distr::lu::QueryResult_SymbsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::distr::lu::QueryResult* Arena::CreateMaybeMessage< ::distr::lu::QueryResult >(Arena* arena) {
  return Arena::CreateInternal< ::distr::lu::QueryResult >(arena);
}
template<> PROTOBUF_NOINLINE ::distr::lu::ListNodesRequest* Arena::CreateMaybeMessage< ::distr::lu::ListNodesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::distr::lu::ListNodesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::distr::lu::ListNodesResponse* Arena::CreateMaybeMessage< ::distr::lu::ListNodesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::distr::lu::ListNodesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
