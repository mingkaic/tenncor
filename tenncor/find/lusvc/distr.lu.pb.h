// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tenncor/find/lusvc/distr.lu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "internal/query/query.pb.h"
#include "tenncor/distr/iosvc/distr.io.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto;
namespace distr {
namespace lu {
class ListNodesRequest;
class ListNodesRequestDefaultTypeInternal;
extern ListNodesRequestDefaultTypeInternal _ListNodesRequest_default_instance_;
class ListNodesResponse;
class ListNodesResponseDefaultTypeInternal;
extern ListNodesResponseDefaultTypeInternal _ListNodesResponse_default_instance_;
class QueryResult;
class QueryResultDefaultTypeInternal;
extern QueryResultDefaultTypeInternal _QueryResult_default_instance_;
class QueryResult_SymbsEntry_DoNotUse;
class QueryResult_SymbsEntry_DoNotUseDefaultTypeInternal;
extern QueryResult_SymbsEntry_DoNotUseDefaultTypeInternal _QueryResult_SymbsEntry_DoNotUse_default_instance_;
}  // namespace lu
}  // namespace distr
PROTOBUF_NAMESPACE_OPEN
template<> ::distr::lu::ListNodesRequest* Arena::CreateMaybeMessage<::distr::lu::ListNodesRequest>(Arena*);
template<> ::distr::lu::ListNodesResponse* Arena::CreateMaybeMessage<::distr::lu::ListNodesResponse>(Arena*);
template<> ::distr::lu::QueryResult* Arena::CreateMaybeMessage<::distr::lu::QueryResult>(Arena*);
template<> ::distr::lu::QueryResult_SymbsEntry_DoNotUse* Arena::CreateMaybeMessage<::distr::lu::QueryResult_SymbsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace distr {
namespace lu {

// ===================================================================

class QueryResult_SymbsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryResult_SymbsEntry_DoNotUse, 
    std::string, ::distr::io::NodeMeta,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryResult_SymbsEntry_DoNotUse, 
    std::string, ::distr::io::NodeMeta,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  QueryResult_SymbsEntry_DoNotUse();
  QueryResult_SymbsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QueryResult_SymbsEntry_DoNotUse& other);
  static const QueryResult_SymbsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QueryResult_SymbsEntry_DoNotUse*>(&_QueryResult_SymbsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "distr.lu.QueryResult.SymbsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto);
    return ::descriptor_table_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class QueryResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distr.lu.QueryResult) */ {
 public:
  QueryResult();
  virtual ~QueryResult();

  QueryResult(const QueryResult& from);
  QueryResult(QueryResult&& from) noexcept
    : QueryResult() {
    *this = ::std::move(from);
  }

  inline QueryResult& operator=(const QueryResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResult& operator=(QueryResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResult* internal_default_instance() {
    return reinterpret_cast<const QueryResult*>(
               &_QueryResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryResult& a, QueryResult& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResult* New() const final {
    return CreateMaybeMessage<QueryResult>(nullptr);
  }

  QueryResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResult& from);
  void MergeFrom(const QueryResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distr.lu.QueryResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto);
    return ::descriptor_table_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSymbsFieldNumber = 2,
    kRootFieldNumber = 1,
  };
  // map<string, .distr.io.NodeMeta> symbs = 2;
  int symbs_size() const;
  private:
  int _internal_symbs_size() const;
  public:
  void clear_symbs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >&
      _internal_symbs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >*
      _internal_mutable_symbs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >&
      symbs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >*
      mutable_symbs();

  // .distr.io.NodeMeta root = 1;
  bool has_root() const;
  private:
  bool _internal_has_root() const;
  public:
  void clear_root();
  const ::distr::io::NodeMeta& root() const;
  ::distr::io::NodeMeta* release_root();
  ::distr::io::NodeMeta* mutable_root();
  void set_allocated_root(::distr::io::NodeMeta* root);
  private:
  const ::distr::io::NodeMeta& _internal_root() const;
  ::distr::io::NodeMeta* _internal_mutable_root();
  public:

  // @@protoc_insertion_point(class_scope:distr.lu.QueryResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QueryResult_SymbsEntry_DoNotUse,
      std::string, ::distr::io::NodeMeta,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > symbs_;
  ::distr::io::NodeMeta* root_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto;
};
// -------------------------------------------------------------------

class ListNodesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distr.lu.ListNodesRequest) */ {
 public:
  ListNodesRequest();
  virtual ~ListNodesRequest();

  ListNodesRequest(const ListNodesRequest& from);
  ListNodesRequest(ListNodesRequest&& from) noexcept
    : ListNodesRequest() {
    *this = ::std::move(from);
  }

  inline ListNodesRequest& operator=(const ListNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNodesRequest& operator=(ListNodesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListNodesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNodesRequest* internal_default_instance() {
    return reinterpret_cast<const ListNodesRequest*>(
               &_ListNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListNodesRequest& a, ListNodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNodesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListNodesRequest* New() const final {
    return CreateMaybeMessage<ListNodesRequest>(nullptr);
  }

  ListNodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListNodesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListNodesRequest& from);
  void MergeFrom(const ListNodesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNodesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distr.lu.ListNodesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto);
    return ::descriptor_table_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidsFieldNumber = 1,
    kPatternFieldNumber = 2,
  };
  // repeated string uuids = 1;
  int uuids_size() const;
  private:
  int _internal_uuids_size() const;
  public:
  void clear_uuids();
  const std::string& uuids(int index) const;
  std::string* mutable_uuids(int index);
  void set_uuids(int index, const std::string& value);
  void set_uuids(int index, std::string&& value);
  void set_uuids(int index, const char* value);
  void set_uuids(int index, const char* value, size_t size);
  std::string* add_uuids();
  void add_uuids(const std::string& value);
  void add_uuids(std::string&& value);
  void add_uuids(const char* value);
  void add_uuids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_uuids();
  private:
  const std::string& _internal_uuids(int index) const;
  std::string* _internal_add_uuids();
  public:

  // .query.Node pattern = 2;
  bool has_pattern() const;
  private:
  bool _internal_has_pattern() const;
  public:
  void clear_pattern();
  const ::query::Node& pattern() const;
  ::query::Node* release_pattern();
  ::query::Node* mutable_pattern();
  void set_allocated_pattern(::query::Node* pattern);
  private:
  const ::query::Node& _internal_pattern() const;
  ::query::Node* _internal_mutable_pattern();
  public:

  // @@protoc_insertion_point(class_scope:distr.lu.ListNodesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> uuids_;
  ::query::Node* pattern_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto;
};
// -------------------------------------------------------------------

class ListNodesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distr.lu.ListNodesResponse) */ {
 public:
  ListNodesResponse();
  virtual ~ListNodesResponse();

  ListNodesResponse(const ListNodesResponse& from);
  ListNodesResponse(ListNodesResponse&& from) noexcept
    : ListNodesResponse() {
    *this = ::std::move(from);
  }

  inline ListNodesResponse& operator=(const ListNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNodesResponse& operator=(ListNodesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListNodesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNodesResponse* internal_default_instance() {
    return reinterpret_cast<const ListNodesResponse*>(
               &_ListNodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListNodesResponse& a, ListNodesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNodesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListNodesResponse* New() const final {
    return CreateMaybeMessage<ListNodesResponse>(nullptr);
  }

  ListNodesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListNodesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListNodesResponse& from);
  void MergeFrom(const ListNodesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNodesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distr.lu.ListNodesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto);
    return ::descriptor_table_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 1,
  };
  // repeated .distr.lu.QueryResult matches = 1;
  int matches_size() const;
  private:
  int _internal_matches_size() const;
  public:
  void clear_matches();
  ::distr::lu::QueryResult* mutable_matches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distr::lu::QueryResult >*
      mutable_matches();
  private:
  const ::distr::lu::QueryResult& _internal_matches(int index) const;
  ::distr::lu::QueryResult* _internal_add_matches();
  public:
  const ::distr::lu::QueryResult& matches(int index) const;
  ::distr::lu::QueryResult* add_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distr::lu::QueryResult >&
      matches() const;

  // @@protoc_insertion_point(class_scope:distr.lu.ListNodesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distr::lu::QueryResult > matches_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryResult

// .distr.io.NodeMeta root = 1;
inline bool QueryResult::_internal_has_root() const {
  return this != internal_default_instance() && root_ != nullptr;
}
inline bool QueryResult::has_root() const {
  return _internal_has_root();
}
inline const ::distr::io::NodeMeta& QueryResult::_internal_root() const {
  const ::distr::io::NodeMeta* p = root_;
  return p != nullptr ? *p : *reinterpret_cast<const ::distr::io::NodeMeta*>(
      &::distr::io::_NodeMeta_default_instance_);
}
inline const ::distr::io::NodeMeta& QueryResult::root() const {
  // @@protoc_insertion_point(field_get:distr.lu.QueryResult.root)
  return _internal_root();
}
inline ::distr::io::NodeMeta* QueryResult::release_root() {
  // @@protoc_insertion_point(field_release:distr.lu.QueryResult.root)
  
  ::distr::io::NodeMeta* temp = root_;
  root_ = nullptr;
  return temp;
}
inline ::distr::io::NodeMeta* QueryResult::_internal_mutable_root() {
  
  if (root_ == nullptr) {
    auto* p = CreateMaybeMessage<::distr::io::NodeMeta>(GetArenaNoVirtual());
    root_ = p;
  }
  return root_;
}
inline ::distr::io::NodeMeta* QueryResult::mutable_root() {
  // @@protoc_insertion_point(field_mutable:distr.lu.QueryResult.root)
  return _internal_mutable_root();
}
inline void QueryResult::set_allocated_root(::distr::io::NodeMeta* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_);
  }
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    
  } else {
    
  }
  root_ = root;
  // @@protoc_insertion_point(field_set_allocated:distr.lu.QueryResult.root)
}

// map<string, .distr.io.NodeMeta> symbs = 2;
inline int QueryResult::_internal_symbs_size() const {
  return symbs_.size();
}
inline int QueryResult::symbs_size() const {
  return _internal_symbs_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >&
QueryResult::_internal_symbs() const {
  return symbs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >&
QueryResult::symbs() const {
  // @@protoc_insertion_point(field_map:distr.lu.QueryResult.symbs)
  return _internal_symbs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >*
QueryResult::_internal_mutable_symbs() {
  return symbs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::distr::io::NodeMeta >*
QueryResult::mutable_symbs() {
  // @@protoc_insertion_point(field_mutable_map:distr.lu.QueryResult.symbs)
  return _internal_mutable_symbs();
}

// -------------------------------------------------------------------

// ListNodesRequest

// repeated string uuids = 1;
inline int ListNodesRequest::_internal_uuids_size() const {
  return uuids_.size();
}
inline int ListNodesRequest::uuids_size() const {
  return _internal_uuids_size();
}
inline void ListNodesRequest::clear_uuids() {
  uuids_.Clear();
}
inline std::string* ListNodesRequest::add_uuids() {
  // @@protoc_insertion_point(field_add_mutable:distr.lu.ListNodesRequest.uuids)
  return _internal_add_uuids();
}
inline const std::string& ListNodesRequest::_internal_uuids(int index) const {
  return uuids_.Get(index);
}
inline const std::string& ListNodesRequest::uuids(int index) const {
  // @@protoc_insertion_point(field_get:distr.lu.ListNodesRequest.uuids)
  return _internal_uuids(index);
}
inline std::string* ListNodesRequest::mutable_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:distr.lu.ListNodesRequest.uuids)
  return uuids_.Mutable(index);
}
inline void ListNodesRequest::set_uuids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:distr.lu.ListNodesRequest.uuids)
  uuids_.Mutable(index)->assign(value);
}
inline void ListNodesRequest::set_uuids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:distr.lu.ListNodesRequest.uuids)
  uuids_.Mutable(index)->assign(std::move(value));
}
inline void ListNodesRequest::set_uuids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:distr.lu.ListNodesRequest.uuids)
}
inline void ListNodesRequest::set_uuids(int index, const char* value, size_t size) {
  uuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:distr.lu.ListNodesRequest.uuids)
}
inline std::string* ListNodesRequest::_internal_add_uuids() {
  return uuids_.Add();
}
inline void ListNodesRequest::add_uuids(const std::string& value) {
  uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:distr.lu.ListNodesRequest.uuids)
}
inline void ListNodesRequest::add_uuids(std::string&& value) {
  uuids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:distr.lu.ListNodesRequest.uuids)
}
inline void ListNodesRequest::add_uuids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:distr.lu.ListNodesRequest.uuids)
}
inline void ListNodesRequest::add_uuids(const char* value, size_t size) {
  uuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:distr.lu.ListNodesRequest.uuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListNodesRequest::uuids() const {
  // @@protoc_insertion_point(field_list:distr.lu.ListNodesRequest.uuids)
  return uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListNodesRequest::mutable_uuids() {
  // @@protoc_insertion_point(field_mutable_list:distr.lu.ListNodesRequest.uuids)
  return &uuids_;
}

// .query.Node pattern = 2;
inline bool ListNodesRequest::_internal_has_pattern() const {
  return this != internal_default_instance() && pattern_ != nullptr;
}
inline bool ListNodesRequest::has_pattern() const {
  return _internal_has_pattern();
}
inline const ::query::Node& ListNodesRequest::_internal_pattern() const {
  const ::query::Node* p = pattern_;
  return p != nullptr ? *p : *reinterpret_cast<const ::query::Node*>(
      &::query::_Node_default_instance_);
}
inline const ::query::Node& ListNodesRequest::pattern() const {
  // @@protoc_insertion_point(field_get:distr.lu.ListNodesRequest.pattern)
  return _internal_pattern();
}
inline ::query::Node* ListNodesRequest::release_pattern() {
  // @@protoc_insertion_point(field_release:distr.lu.ListNodesRequest.pattern)
  
  ::query::Node* temp = pattern_;
  pattern_ = nullptr;
  return temp;
}
inline ::query::Node* ListNodesRequest::_internal_mutable_pattern() {
  
  if (pattern_ == nullptr) {
    auto* p = CreateMaybeMessage<::query::Node>(GetArenaNoVirtual());
    pattern_ = p;
  }
  return pattern_;
}
inline ::query::Node* ListNodesRequest::mutable_pattern() {
  // @@protoc_insertion_point(field_mutable:distr.lu.ListNodesRequest.pattern)
  return _internal_mutable_pattern();
}
inline void ListNodesRequest::set_allocated_pattern(::query::Node* pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pattern_);
  }
  if (pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pattern, submessage_arena);
    }
    
  } else {
    
  }
  pattern_ = pattern;
  // @@protoc_insertion_point(field_set_allocated:distr.lu.ListNodesRequest.pattern)
}

// -------------------------------------------------------------------

// ListNodesResponse

// repeated .distr.lu.QueryResult matches = 1;
inline int ListNodesResponse::_internal_matches_size() const {
  return matches_.size();
}
inline int ListNodesResponse::matches_size() const {
  return _internal_matches_size();
}
inline void ListNodesResponse::clear_matches() {
  matches_.Clear();
}
inline ::distr::lu::QueryResult* ListNodesResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:distr.lu.ListNodesResponse.matches)
  return matches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distr::lu::QueryResult >*
ListNodesResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:distr.lu.ListNodesResponse.matches)
  return &matches_;
}
inline const ::distr::lu::QueryResult& ListNodesResponse::_internal_matches(int index) const {
  return matches_.Get(index);
}
inline const ::distr::lu::QueryResult& ListNodesResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:distr.lu.ListNodesResponse.matches)
  return _internal_matches(index);
}
inline ::distr::lu::QueryResult* ListNodesResponse::_internal_add_matches() {
  return matches_.Add();
}
inline ::distr::lu::QueryResult* ListNodesResponse::add_matches() {
  // @@protoc_insertion_point(field_add:distr.lu.ListNodesResponse.matches)
  return _internal_add_matches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distr::lu::QueryResult >&
ListNodesResponse::matches() const {
  // @@protoc_insertion_point(field_list:distr.lu.ListNodesResponse.matches)
  return matches_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lu
}  // namespace distr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tenncor_2ffind_2flusvc_2fdistr_2elu_2eproto
