// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tenncor/distr/iosvc/distr.io.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto;
namespace distr {
namespace io {
class ListNodesRequest;
class ListNodesRequestDefaultTypeInternal;
extern ListNodesRequestDefaultTypeInternal _ListNodesRequest_default_instance_;
class ListNodesResponse;
class ListNodesResponseDefaultTypeInternal;
extern ListNodesResponseDefaultTypeInternal _ListNodesResponse_default_instance_;
class NodeMeta;
class NodeMetaDefaultTypeInternal;
extern NodeMetaDefaultTypeInternal _NodeMeta_default_instance_;
}  // namespace io
}  // namespace distr
PROTOBUF_NAMESPACE_OPEN
template<> ::distr::io::ListNodesRequest* Arena::CreateMaybeMessage<::distr::io::ListNodesRequest>(Arena*);
template<> ::distr::io::ListNodesResponse* Arena::CreateMaybeMessage<::distr::io::ListNodesResponse>(Arena*);
template<> ::distr::io::NodeMeta* Arena::CreateMaybeMessage<::distr::io::NodeMeta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace distr {
namespace io {

// ===================================================================

class NodeMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distr.io.NodeMeta) */ {
 public:
  NodeMeta();
  virtual ~NodeMeta();

  NodeMeta(const NodeMeta& from);
  NodeMeta(NodeMeta&& from) noexcept
    : NodeMeta() {
    *this = ::std::move(from);
  }

  inline NodeMeta& operator=(const NodeMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeMeta& operator=(NodeMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeMeta* internal_default_instance() {
    return reinterpret_cast<const NodeMeta*>(
               &_NodeMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NodeMeta& a, NodeMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeMeta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeMeta* New() const final {
    return CreateMaybeMessage<NodeMeta>(nullptr);
  }

  NodeMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeMeta& from);
  void MergeFrom(const NodeMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distr.io.NodeMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto);
    return ::descriptor_table_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 4,
    kInstanceFieldNumber = 1,
    kUuidFieldNumber = 2,
    kDtypeFieldNumber = 3,
    kRemoteStrFieldNumber = 5,
  };
  // repeated int64 shape = 4;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_shape();

  // string instance = 1;
  void clear_instance();
  const std::string& instance() const;
  void set_instance(const std::string& value);
  void set_instance(std::string&& value);
  void set_instance(const char* value);
  void set_instance(const char* value, size_t size);
  std::string* mutable_instance();
  std::string* release_instance();
  void set_allocated_instance(std::string* instance);
  private:
  const std::string& _internal_instance() const;
  void _internal_set_instance(const std::string& value);
  std::string* _internal_mutable_instance();
  public:

  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string dtype = 3;
  void clear_dtype();
  const std::string& dtype() const;
  void set_dtype(const std::string& value);
  void set_dtype(std::string&& value);
  void set_dtype(const char* value);
  void set_dtype(const char* value, size_t size);
  std::string* mutable_dtype();
  std::string* release_dtype();
  void set_allocated_dtype(std::string* dtype);
  private:
  const std::string& _internal_dtype() const;
  void _internal_set_dtype(const std::string& value);
  std::string* _internal_mutable_dtype();
  public:

  // string remote_str = 5;
  void clear_remote_str();
  const std::string& remote_str() const;
  void set_remote_str(const std::string& value);
  void set_remote_str(std::string&& value);
  void set_remote_str(const char* value);
  void set_remote_str(const char* value, size_t size);
  std::string* mutable_remote_str();
  std::string* release_remote_str();
  void set_allocated_remote_str(std::string* remote_str);
  private:
  const std::string& _internal_remote_str() const;
  void _internal_set_remote_str(const std::string& value);
  std::string* _internal_mutable_remote_str();
  public:

  // @@protoc_insertion_point(class_scope:distr.io.NodeMeta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > shape_;
  mutable std::atomic<int> _shape_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_str_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto;
};
// -------------------------------------------------------------------

class ListNodesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distr.io.ListNodesRequest) */ {
 public:
  ListNodesRequest();
  virtual ~ListNodesRequest();

  ListNodesRequest(const ListNodesRequest& from);
  ListNodesRequest(ListNodesRequest&& from) noexcept
    : ListNodesRequest() {
    *this = ::std::move(from);
  }

  inline ListNodesRequest& operator=(const ListNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNodesRequest& operator=(ListNodesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListNodesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNodesRequest* internal_default_instance() {
    return reinterpret_cast<const ListNodesRequest*>(
               &_ListNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListNodesRequest& a, ListNodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNodesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListNodesRequest* New() const final {
    return CreateMaybeMessage<ListNodesRequest>(nullptr);
  }

  ListNodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListNodesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListNodesRequest& from);
  void MergeFrom(const ListNodesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNodesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distr.io.ListNodesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto);
    return ::descriptor_table_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidsFieldNumber = 1,
  };
  // repeated string uuids = 1;
  int uuids_size() const;
  private:
  int _internal_uuids_size() const;
  public:
  void clear_uuids();
  const std::string& uuids(int index) const;
  std::string* mutable_uuids(int index);
  void set_uuids(int index, const std::string& value);
  void set_uuids(int index, std::string&& value);
  void set_uuids(int index, const char* value);
  void set_uuids(int index, const char* value, size_t size);
  std::string* add_uuids();
  void add_uuids(const std::string& value);
  void add_uuids(std::string&& value);
  void add_uuids(const char* value);
  void add_uuids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_uuids();
  private:
  const std::string& _internal_uuids(int index) const;
  std::string* _internal_add_uuids();
  public:

  // @@protoc_insertion_point(class_scope:distr.io.ListNodesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> uuids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto;
};
// -------------------------------------------------------------------

class ListNodesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distr.io.ListNodesResponse) */ {
 public:
  ListNodesResponse();
  virtual ~ListNodesResponse();

  ListNodesResponse(const ListNodesResponse& from);
  ListNodesResponse(ListNodesResponse&& from) noexcept
    : ListNodesResponse() {
    *this = ::std::move(from);
  }

  inline ListNodesResponse& operator=(const ListNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNodesResponse& operator=(ListNodesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListNodesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNodesResponse* internal_default_instance() {
    return reinterpret_cast<const ListNodesResponse*>(
               &_ListNodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListNodesResponse& a, ListNodesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNodesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListNodesResponse* New() const final {
    return CreateMaybeMessage<ListNodesResponse>(nullptr);
  }

  ListNodesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListNodesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListNodesResponse& from);
  void MergeFrom(const ListNodesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNodesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distr.io.ListNodesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto);
    return ::descriptor_table_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .distr.io.NodeMeta values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::distr::io::NodeMeta* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distr::io::NodeMeta >*
      mutable_values();
  private:
  const ::distr::io::NodeMeta& _internal_values(int index) const;
  ::distr::io::NodeMeta* _internal_add_values();
  public:
  const ::distr::io::NodeMeta& values(int index) const;
  ::distr::io::NodeMeta* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distr::io::NodeMeta >&
      values() const;

  // @@protoc_insertion_point(class_scope:distr.io.ListNodesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distr::io::NodeMeta > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeMeta

// string instance = 1;
inline void NodeMeta::clear_instance() {
  instance_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeMeta::instance() const {
  // @@protoc_insertion_point(field_get:distr.io.NodeMeta.instance)
  return _internal_instance();
}
inline void NodeMeta::set_instance(const std::string& value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:distr.io.NodeMeta.instance)
}
inline std::string* NodeMeta::mutable_instance() {
  // @@protoc_insertion_point(field_mutable:distr.io.NodeMeta.instance)
  return _internal_mutable_instance();
}
inline const std::string& NodeMeta::_internal_instance() const {
  return instance_.GetNoArena();
}
inline void NodeMeta::_internal_set_instance(const std::string& value) {
  
  instance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeMeta::set_instance(std::string&& value) {
  
  instance_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:distr.io.NodeMeta.instance)
}
inline void NodeMeta::set_instance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:distr.io.NodeMeta.instance)
}
inline void NodeMeta::set_instance(const char* value, size_t size) {
  
  instance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:distr.io.NodeMeta.instance)
}
inline std::string* NodeMeta::_internal_mutable_instance() {
  
  return instance_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeMeta::release_instance() {
  // @@protoc_insertion_point(field_release:distr.io.NodeMeta.instance)
  
  return instance_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMeta::set_allocated_instance(std::string* instance) {
  if (instance != nullptr) {
    
  } else {
    
  }
  instance_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance);
  // @@protoc_insertion_point(field_set_allocated:distr.io.NodeMeta.instance)
}

// string uuid = 2;
inline void NodeMeta::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeMeta::uuid() const {
  // @@protoc_insertion_point(field_get:distr.io.NodeMeta.uuid)
  return _internal_uuid();
}
inline void NodeMeta::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:distr.io.NodeMeta.uuid)
}
inline std::string* NodeMeta::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:distr.io.NodeMeta.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& NodeMeta::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void NodeMeta::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeMeta::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:distr.io.NodeMeta.uuid)
}
inline void NodeMeta::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:distr.io.NodeMeta.uuid)
}
inline void NodeMeta::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:distr.io.NodeMeta.uuid)
}
inline std::string* NodeMeta::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeMeta::release_uuid() {
  // @@protoc_insertion_point(field_release:distr.io.NodeMeta.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMeta::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:distr.io.NodeMeta.uuid)
}

// string dtype = 3;
inline void NodeMeta::clear_dtype() {
  dtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeMeta::dtype() const {
  // @@protoc_insertion_point(field_get:distr.io.NodeMeta.dtype)
  return _internal_dtype();
}
inline void NodeMeta::set_dtype(const std::string& value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:distr.io.NodeMeta.dtype)
}
inline std::string* NodeMeta::mutable_dtype() {
  // @@protoc_insertion_point(field_mutable:distr.io.NodeMeta.dtype)
  return _internal_mutable_dtype();
}
inline const std::string& NodeMeta::_internal_dtype() const {
  return dtype_.GetNoArena();
}
inline void NodeMeta::_internal_set_dtype(const std::string& value) {
  
  dtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeMeta::set_dtype(std::string&& value) {
  
  dtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:distr.io.NodeMeta.dtype)
}
inline void NodeMeta::set_dtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:distr.io.NodeMeta.dtype)
}
inline void NodeMeta::set_dtype(const char* value, size_t size) {
  
  dtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:distr.io.NodeMeta.dtype)
}
inline std::string* NodeMeta::_internal_mutable_dtype() {
  
  return dtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeMeta::release_dtype() {
  // @@protoc_insertion_point(field_release:distr.io.NodeMeta.dtype)
  
  return dtype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMeta::set_allocated_dtype(std::string* dtype) {
  if (dtype != nullptr) {
    
  } else {
    
  }
  dtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dtype);
  // @@protoc_insertion_point(field_set_allocated:distr.io.NodeMeta.dtype)
}

// repeated int64 shape = 4;
inline int NodeMeta::_internal_shape_size() const {
  return shape_.size();
}
inline int NodeMeta::shape_size() const {
  return _internal_shape_size();
}
inline void NodeMeta::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeMeta::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeMeta::shape(int index) const {
  // @@protoc_insertion_point(field_get:distr.io.NodeMeta.shape)
  return _internal_shape(index);
}
inline void NodeMeta::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:distr.io.NodeMeta.shape)
}
inline void NodeMeta::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::int64 value) {
  shape_.Add(value);
}
inline void NodeMeta::add_shape(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:distr.io.NodeMeta.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
NodeMeta::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
NodeMeta::shape() const {
  // @@protoc_insertion_point(field_list:distr.io.NodeMeta.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
NodeMeta::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
NodeMeta::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:distr.io.NodeMeta.shape)
  return _internal_mutable_shape();
}

// string remote_str = 5;
inline void NodeMeta::clear_remote_str() {
  remote_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeMeta::remote_str() const {
  // @@protoc_insertion_point(field_get:distr.io.NodeMeta.remote_str)
  return _internal_remote_str();
}
inline void NodeMeta::set_remote_str(const std::string& value) {
  _internal_set_remote_str(value);
  // @@protoc_insertion_point(field_set:distr.io.NodeMeta.remote_str)
}
inline std::string* NodeMeta::mutable_remote_str() {
  // @@protoc_insertion_point(field_mutable:distr.io.NodeMeta.remote_str)
  return _internal_mutable_remote_str();
}
inline const std::string& NodeMeta::_internal_remote_str() const {
  return remote_str_.GetNoArena();
}
inline void NodeMeta::_internal_set_remote_str(const std::string& value) {
  
  remote_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeMeta::set_remote_str(std::string&& value) {
  
  remote_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:distr.io.NodeMeta.remote_str)
}
inline void NodeMeta::set_remote_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:distr.io.NodeMeta.remote_str)
}
inline void NodeMeta::set_remote_str(const char* value, size_t size) {
  
  remote_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:distr.io.NodeMeta.remote_str)
}
inline std::string* NodeMeta::_internal_mutable_remote_str() {
  
  return remote_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeMeta::release_remote_str() {
  // @@protoc_insertion_point(field_release:distr.io.NodeMeta.remote_str)
  
  return remote_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMeta::set_allocated_remote_str(std::string* remote_str) {
  if (remote_str != nullptr) {
    
  } else {
    
  }
  remote_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_str);
  // @@protoc_insertion_point(field_set_allocated:distr.io.NodeMeta.remote_str)
}

// -------------------------------------------------------------------

// ListNodesRequest

// repeated string uuids = 1;
inline int ListNodesRequest::_internal_uuids_size() const {
  return uuids_.size();
}
inline int ListNodesRequest::uuids_size() const {
  return _internal_uuids_size();
}
inline void ListNodesRequest::clear_uuids() {
  uuids_.Clear();
}
inline std::string* ListNodesRequest::add_uuids() {
  // @@protoc_insertion_point(field_add_mutable:distr.io.ListNodesRequest.uuids)
  return _internal_add_uuids();
}
inline const std::string& ListNodesRequest::_internal_uuids(int index) const {
  return uuids_.Get(index);
}
inline const std::string& ListNodesRequest::uuids(int index) const {
  // @@protoc_insertion_point(field_get:distr.io.ListNodesRequest.uuids)
  return _internal_uuids(index);
}
inline std::string* ListNodesRequest::mutable_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:distr.io.ListNodesRequest.uuids)
  return uuids_.Mutable(index);
}
inline void ListNodesRequest::set_uuids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:distr.io.ListNodesRequest.uuids)
  uuids_.Mutable(index)->assign(value);
}
inline void ListNodesRequest::set_uuids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:distr.io.ListNodesRequest.uuids)
  uuids_.Mutable(index)->assign(std::move(value));
}
inline void ListNodesRequest::set_uuids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:distr.io.ListNodesRequest.uuids)
}
inline void ListNodesRequest::set_uuids(int index, const char* value, size_t size) {
  uuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:distr.io.ListNodesRequest.uuids)
}
inline std::string* ListNodesRequest::_internal_add_uuids() {
  return uuids_.Add();
}
inline void ListNodesRequest::add_uuids(const std::string& value) {
  uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:distr.io.ListNodesRequest.uuids)
}
inline void ListNodesRequest::add_uuids(std::string&& value) {
  uuids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:distr.io.ListNodesRequest.uuids)
}
inline void ListNodesRequest::add_uuids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:distr.io.ListNodesRequest.uuids)
}
inline void ListNodesRequest::add_uuids(const char* value, size_t size) {
  uuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:distr.io.ListNodesRequest.uuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListNodesRequest::uuids() const {
  // @@protoc_insertion_point(field_list:distr.io.ListNodesRequest.uuids)
  return uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListNodesRequest::mutable_uuids() {
  // @@protoc_insertion_point(field_mutable_list:distr.io.ListNodesRequest.uuids)
  return &uuids_;
}

// -------------------------------------------------------------------

// ListNodesResponse

// repeated .distr.io.NodeMeta values = 1;
inline int ListNodesResponse::_internal_values_size() const {
  return values_.size();
}
inline int ListNodesResponse::values_size() const {
  return _internal_values_size();
}
inline void ListNodesResponse::clear_values() {
  values_.Clear();
}
inline ::distr::io::NodeMeta* ListNodesResponse::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:distr.io.ListNodesResponse.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distr::io::NodeMeta >*
ListNodesResponse::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:distr.io.ListNodesResponse.values)
  return &values_;
}
inline const ::distr::io::NodeMeta& ListNodesResponse::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::distr::io::NodeMeta& ListNodesResponse::values(int index) const {
  // @@protoc_insertion_point(field_get:distr.io.ListNodesResponse.values)
  return _internal_values(index);
}
inline ::distr::io::NodeMeta* ListNodesResponse::_internal_add_values() {
  return values_.Add();
}
inline ::distr::io::NodeMeta* ListNodesResponse::add_values() {
  // @@protoc_insertion_point(field_add:distr.io.ListNodesResponse.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distr::io::NodeMeta >&
ListNodesResponse::values() const {
  // @@protoc_insertion_point(field_list:distr.io.ListNodesResponse.values)
  return values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace io
}  // namespace distr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tenncor_2fdistr_2fiosvc_2fdistr_2eio_2eproto
