// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query/query.proto

#include "query/query.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_query_2fquery_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DoubleArray_query_2fquery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_query_2fquery_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IntArray_query_2fquery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_query_2fquery_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Leaf_query_2fquery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_query_2fquery_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Attribute_query_2fquery_2eproto;
namespace query {
class NodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Node> _instance;
  double cst_;
  const ::query::Leaf* leaf_;
  const ::query::Operator* op_;
  ::google::protobuf::internal::ArenaStringPtr symb_;
} _Node_default_instance_;
class LeafDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Leaf> _instance;
  bool label_nil_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  bool dtype_nil_;
  ::google::protobuf::internal::ArenaStringPtr dtype_;
  bool usage_nil_;
  ::google::protobuf::internal::ArenaStringPtr usage_;
} _Leaf_default_instance_;
class Operator_AttrsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Operator_AttrsEntry_DoNotUse> _instance;
} _Operator_AttrsEntry_DoNotUse_default_instance_;
class OperatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Operator> _instance;
  bool capture_nil_;
  ::google::protobuf::internal::ArenaStringPtr capture_;
} _Operator_default_instance_;
class AttributeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Attribute> _instance;
  ::google::protobuf::int64 inum_;
  double dnum_;
  const ::query::IntArray* iarr_;
  const ::query::DoubleArray* darr_;
  ::google::protobuf::internal::ArenaStringPtr str_;
  const ::query::Node* node_;
  const ::query::Layer* layer_;
} _Attribute_default_instance_;
class IntArrayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IntArray> _instance;
} _IntArray_default_instance_;
class DoubleArrayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DoubleArray> _instance;
} _DoubleArray_default_instance_;
class LayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Layer> _instance;
  bool name_nil_;
  ::google::protobuf::internal::ArenaStringPtr name_;
} _Layer_default_instance_;
}  // namespace query
static void InitDefaultsLeaf_query_2fquery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::query::_Leaf_default_instance_;
    new (ptr) ::query::Leaf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::query::Leaf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Leaf_query_2fquery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLeaf_query_2fquery_2eproto}, {}};

static void InitDefaultsAttribute_query_2fquery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::query::_Node_default_instance_;
    new (ptr) ::query::Node();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::query::_Operator_AttrsEntry_DoNotUse_default_instance_;
    new (ptr) ::query::Operator_AttrsEntry_DoNotUse();
  }
  {
    void* ptr = &::query::_Operator_default_instance_;
    new (ptr) ::query::Operator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::query::_Attribute_default_instance_;
    new (ptr) ::query::Attribute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::query::_Layer_default_instance_;
    new (ptr) ::query::Layer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::query::Node::InitAsDefaultInstance();
  ::query::Operator_AttrsEntry_DoNotUse::InitAsDefaultInstance();
  ::query::Operator::InitAsDefaultInstance();
  ::query::Attribute::InitAsDefaultInstance();
  ::query::Layer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Attribute_query_2fquery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsAttribute_query_2fquery_2eproto}, {
      &scc_info_IntArray_query_2fquery_2eproto.base,
      &scc_info_DoubleArray_query_2fquery_2eproto.base,
      &scc_info_Leaf_query_2fquery_2eproto.base,}};

static void InitDefaultsIntArray_query_2fquery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::query::_IntArray_default_instance_;
    new (ptr) ::query::IntArray();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::query::IntArray::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IntArray_query_2fquery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIntArray_query_2fquery_2eproto}, {}};

static void InitDefaultsDoubleArray_query_2fquery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::query::_DoubleArray_default_instance_;
    new (ptr) ::query::DoubleArray();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::query::DoubleArray::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DoubleArray_query_2fquery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoubleArray_query_2fquery_2eproto}, {}};

void InitDefaults_query_2fquery_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Leaf_query_2fquery_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Attribute_query_2fquery_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IntArray_query_2fquery_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DoubleArray_query_2fquery_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_query_2fquery_2eproto[8];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_query_2fquery_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_query_2fquery_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_query_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::query::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::query::Node, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::query::NodeDefaultTypeInternal, cst_),
  offsetof(::query::NodeDefaultTypeInternal, leaf_),
  offsetof(::query::NodeDefaultTypeInternal, op_),
  offsetof(::query::NodeDefaultTypeInternal, symb_),
  PROTOBUF_FIELD_OFFSET(::query::Node, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::query::Leaf, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::query::Leaf, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::query::LeafDefaultTypeInternal, label_nil_),
  offsetof(::query::LeafDefaultTypeInternal, label_),
  offsetof(::query::LeafDefaultTypeInternal, dtype_nil_),
  offsetof(::query::LeafDefaultTypeInternal, dtype_),
  PROTOBUF_FIELD_OFFSET(::query::Leaf, shape_),
  offsetof(::query::LeafDefaultTypeInternal, usage_nil_),
  offsetof(::query::LeafDefaultTypeInternal, usage_),
  PROTOBUF_FIELD_OFFSET(::query::Leaf, nullable_label_),
  PROTOBUF_FIELD_OFFSET(::query::Leaf, nullable_dtype_),
  PROTOBUF_FIELD_OFFSET(::query::Leaf, nullable_usage_),
  PROTOBUF_FIELD_OFFSET(::query::Operator_AttrsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::query::Operator_AttrsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::query::Operator_AttrsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::query::Operator_AttrsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::query::Operator, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::query::Operator, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::query::Operator, opname_),
  PROTOBUF_FIELD_OFFSET(::query::Operator, attrs_),
  PROTOBUF_FIELD_OFFSET(::query::Operator, args_),
  offsetof(::query::OperatorDefaultTypeInternal, capture_nil_),
  offsetof(::query::OperatorDefaultTypeInternal, capture_),
  PROTOBUF_FIELD_OFFSET(::query::Operator, nullable_capture_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::query::Attribute, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::query::Attribute, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::query::AttributeDefaultTypeInternal, inum_),
  offsetof(::query::AttributeDefaultTypeInternal, dnum_),
  offsetof(::query::AttributeDefaultTypeInternal, iarr_),
  offsetof(::query::AttributeDefaultTypeInternal, darr_),
  offsetof(::query::AttributeDefaultTypeInternal, str_),
  offsetof(::query::AttributeDefaultTypeInternal, node_),
  offsetof(::query::AttributeDefaultTypeInternal, layer_),
  PROTOBUF_FIELD_OFFSET(::query::Attribute, attr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::query::IntArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::query::IntArray, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::query::DoubleArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::query::DoubleArray, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::query::Layer, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::query::Layer, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::query::LayerDefaultTypeInternal, name_nil_),
  offsetof(::query::LayerDefaultTypeInternal, name_),
  PROTOBUF_FIELD_OFFSET(::query::Layer, input_),
  PROTOBUF_FIELD_OFFSET(::query::Layer, nullable_name_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::query::Node)},
  { 10, -1, sizeof(::query::Leaf)},
  { 25, 32, sizeof(::query::Operator_AttrsEntry_DoNotUse)},
  { 34, -1, sizeof(::query::Operator)},
  { 45, -1, sizeof(::query::Attribute)},
  { 58, -1, sizeof(::query::IntArray)},
  { 64, -1, sizeof(::query::DoubleArray)},
  { 70, -1, sizeof(::query::Layer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::query::_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::query::_Leaf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::query::_Operator_AttrsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::query::_Operator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::query::_Attribute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::query::_IntArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::query::_DoubleArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::query::_Layer_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_query_2fquery_2eproto = {
  {}, AddDescriptors_query_2fquery_2eproto, "query/query.proto", schemas,
  file_default_instances, TableStruct_query_2fquery_2eproto::offsets,
  file_level_metadata_query_2fquery_2eproto, 8, file_level_enum_descriptors_query_2fquery_2eproto, file_level_service_descriptors_query_2fquery_2eproto,
};

const char descriptor_table_protodef_query_2fquery_2eproto[] =
  "\n\021query/query.proto\022\005query\"h\n\004Node\022\r\n\003cs"
  "t\030\001 \001(\001H\000\022\033\n\004leaf\030\002 \001(\0132\013.query.LeafH\000\022\035"
  "\n\002op\030\003 \001(\0132\017.query.OperatorH\000\022\016\n\004symb\030\004 "
  "\001(\tH\000B\005\n\003val\"\275\001\n\004Leaf\022\023\n\tlabel_nil\030\001 \001(\010"
  "H\000\022\017\n\005label\030\002 \001(\tH\000\022\023\n\tdtype_nil\030\003 \001(\010H\001"
  "\022\017\n\005dtype\030\004 \001(\tH\001\022\r\n\005shape\030\005 \003(\r\022\023\n\tusag"
  "e_nil\030\006 \001(\010H\002\022\017\n\005usage\030\007 \001(\tH\002B\020\n\016nullab"
  "le_labelB\020\n\016nullable_dtypeB\020\n\016nullable_u"
  "sage\"\336\001\n\010Operator\022\016\n\006opname\030\001 \001(\t\022)\n\005att"
  "rs\030\002 \003(\0132\032.query.Operator.AttrsEntry\022\031\n\004"
  "args\030\003 \003(\0132\013.query.Node\022\025\n\013capture_nil\030\004"
  " \001(\010H\000\022\021\n\007capture\030\005 \001(\tH\000\032>\n\nAttrsEntry\022"
  "\013\n\003key\030\001 \001(\t\022\037\n\005value\030\002 \001(\0132\020.query.Attr"
  "ibute:\0028\001B\022\n\020nullable_capture\"\303\001\n\tAttrib"
  "ute\022\016\n\004inum\030\001 \001(\003H\000\022\016\n\004dnum\030\002 \001(\001H\000\022\037\n\004i"
  "arr\030\003 \001(\0132\017.query.IntArrayH\000\022\"\n\004darr\030\004 \001"
  "(\0132\022.query.DoubleArrayH\000\022\r\n\003str\030\005 \001(\tH\000\022"
  "\033\n\004node\030\006 \001(\0132\013.query.NodeH\000\022\035\n\005layer\030\007 "
  "\001(\0132\014.query.LayerH\000B\006\n\004attr\"\032\n\010IntArray\022"
  "\016\n\006values\030\001 \003(\003\"\035\n\013DoubleArray\022\016\n\006values"
  "\030\001 \003(\001\"X\n\005Layer\022\022\n\010name_nil\030\001 \001(\010H\000\022\016\n\004n"
  "ame\030\002 \001(\tH\000\022\032\n\005input\030\003 \001(\0132\013.query.NodeB"
  "\017\n\rnullable_nameb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_query_2fquery_2eproto = {
  false, InitDefaults_query_2fquery_2eproto, 
  descriptor_table_protodef_query_2fquery_2eproto,
  "query/query.proto", &assign_descriptors_table_query_2fquery_2eproto, 904,
};

void AddDescriptors_query_2fquery_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_query_2fquery_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_query_2fquery_2eproto = []() { AddDescriptors_query_2fquery_2eproto(); return true; }();
namespace query {

// ===================================================================

void Node::InitAsDefaultInstance() {
  ::query::_Node_default_instance_.cst_ = 0;
  ::query::_Node_default_instance_.leaf_ = const_cast< ::query::Leaf*>(
      ::query::Leaf::internal_default_instance());
  ::query::_Node_default_instance_.op_ = const_cast< ::query::Operator*>(
      ::query::Operator::internal_default_instance());
  ::query::_Node_default_instance_.symb_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class Node::HasBitSetters {
 public:
  static const ::query::Leaf& leaf(const Node* msg);
  static const ::query::Operator& op(const Node* msg);
};

const ::query::Leaf&
Node::HasBitSetters::leaf(const Node* msg) {
  return *msg->val_.leaf_;
}
const ::query::Operator&
Node::HasBitSetters::op(const Node* msg) {
  return *msg->val_.op_;
}
void Node::set_allocated_leaf(::query::Leaf* leaf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_val();
  if (leaf) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leaf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leaf, submessage_arena);
    }
    set_has_leaf();
    val_.leaf_ = leaf;
  }
  // @@protoc_insertion_point(field_set_allocated:query.Node.leaf)
}
void Node::set_allocated_op(::query::Operator* op) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_val();
  if (op) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      op = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, op, submessage_arena);
    }
    set_has_op();
    val_.op_ = op;
  }
  // @@protoc_insertion_point(field_set_allocated:query.Node.op)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kCstFieldNumber;
const int Node::kLeafFieldNumber;
const int Node::kOpFieldNumber;
const int Node::kSymbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:query.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_val();
  switch (from.val_case()) {
    case kCst: {
      set_cst(from.cst());
      break;
    }
    case kLeaf: {
      mutable_leaf()->::query::Leaf::MergeFrom(from.leaf());
      break;
    }
    case kOp: {
      mutable_op()->::query::Operator::MergeFrom(from.op());
      break;
    }
    case kSymb: {
      set_symb(from.symb());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:query.Node)
}

void Node::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Attribute_query_2fquery_2eproto.base);
  clear_has_val();
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:query.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  if (has_val()) {
    clear_val();
  }
}

void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Attribute_query_2fquery_2eproto.base);
  return *internal_default_instance();
}


void Node::clear_val() {
// @@protoc_insertion_point(one_of_clear_start:query.Node)
  switch (val_case()) {
    case kCst: {
      // No need to clear
      break;
    }
    case kLeaf: {
      delete val_.leaf_;
      break;
    }
    case kOp: {
      delete val_.op_;
      break;
    }
    case kSymb: {
      val_.symb_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VAL_NOT_SET;
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:query.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_val();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Node::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Node*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double cst = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_cst(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // .query.Leaf leaf = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::query::Leaf::_InternalParse;
        object = msg->mutable_leaf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .query.Operator op = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::query::Operator::_InternalParse;
        object = msg->mutable_op();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string symb = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("query.Node.symb");
        object = msg->mutable_symb();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:query.Node)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double cst = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          clear_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &val_.cst_)));
          set_has_cst();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .query.Leaf leaf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leaf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .query.Operator op = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_op()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symb = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symb()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symb().data(), static_cast<int>(this->symb().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "query.Node.symb"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:query.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:query.Node)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:query.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double cst = 1;
  if (has_cst()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->cst(), output);
  }

  // .query.Leaf leaf = 2;
  if (has_leaf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::leaf(this), output);
  }

  // .query.Operator op = 3;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::op(this), output);
  }

  // string symb = 4;
  if (has_symb()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symb().data(), static_cast<int>(this->symb().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "query.Node.symb");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->symb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:query.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:query.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double cst = 1;
  if (has_cst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->cst(), target);
  }

  // .query.Leaf leaf = 2;
  if (has_leaf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::leaf(this), target);
  }

  // .query.Operator op = 3;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::op(this), target);
  }

  // string symb = 4;
  if (has_symb()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symb().data(), static_cast<int>(this->symb().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "query.Node.symb");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->symb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:query.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:query.Node)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (val_case()) {
    // double cst = 1;
    case kCst: {
      total_size += 1 + 8;
      break;
    }
    // .query.Leaf leaf = 2;
    case kLeaf: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *val_.leaf_);
      break;
    }
    // .query.Operator op = 3;
    case kOp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *val_.op_);
      break;
    }
    // string symb = 4;
    case kSymb: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symb());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:query.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:query.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:query.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:query.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.val_case()) {
    case kCst: {
      set_cst(from.cst());
      break;
    }
    case kLeaf: {
      mutable_leaf()->::query::Leaf::MergeFrom(from.leaf());
      break;
    }
    case kOp: {
      mutable_op()->::query::Operator::MergeFrom(from.op());
      break;
    }
    case kSymb: {
      set_symb(from.symb());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:query.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:query.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(val_, other->val_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_query_2fquery_2eproto);
  return ::file_level_metadata_query_2fquery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Leaf::InitAsDefaultInstance() {
  ::query::_Leaf_default_instance_.label_nil_ = false;
  ::query::_Leaf_default_instance_.label_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::query::_Leaf_default_instance_.dtype_nil_ = false;
  ::query::_Leaf_default_instance_.dtype_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::query::_Leaf_default_instance_.usage_nil_ = false;
  ::query::_Leaf_default_instance_.usage_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class Leaf::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Leaf::kLabelNilFieldNumber;
const int Leaf::kLabelFieldNumber;
const int Leaf::kDtypeNilFieldNumber;
const int Leaf::kDtypeFieldNumber;
const int Leaf::kShapeFieldNumber;
const int Leaf::kUsageNilFieldNumber;
const int Leaf::kUsageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Leaf::Leaf()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:query.Leaf)
}
Leaf::Leaf(const Leaf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_nullable_label();
  switch (from.nullable_label_case()) {
    case kLabelNil: {
      set_label_nil(from.label_nil());
      break;
    }
    case kLabel: {
      set_label(from.label());
      break;
    }
    case NULLABLE_LABEL_NOT_SET: {
      break;
    }
  }
  clear_has_nullable_dtype();
  switch (from.nullable_dtype_case()) {
    case kDtypeNil: {
      set_dtype_nil(from.dtype_nil());
      break;
    }
    case kDtype: {
      set_dtype(from.dtype());
      break;
    }
    case NULLABLE_DTYPE_NOT_SET: {
      break;
    }
  }
  clear_has_nullable_usage();
  switch (from.nullable_usage_case()) {
    case kUsageNil: {
      set_usage_nil(from.usage_nil());
      break;
    }
    case kUsage: {
      set_usage(from.usage());
      break;
    }
    case NULLABLE_USAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:query.Leaf)
}

void Leaf::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Leaf_query_2fquery_2eproto.base);
  clear_has_nullable_label();
  clear_has_nullable_dtype();
  clear_has_nullable_usage();
}

Leaf::~Leaf() {
  // @@protoc_insertion_point(destructor:query.Leaf)
  SharedDtor();
}

void Leaf::SharedDtor() {
  if (has_nullable_label()) {
    clear_nullable_label();
  }
  if (has_nullable_dtype()) {
    clear_nullable_dtype();
  }
  if (has_nullable_usage()) {
    clear_nullable_usage();
  }
}

void Leaf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Leaf& Leaf::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Leaf_query_2fquery_2eproto.base);
  return *internal_default_instance();
}


void Leaf::clear_nullable_label() {
// @@protoc_insertion_point(one_of_clear_start:query.Leaf)
  switch (nullable_label_case()) {
    case kLabelNil: {
      // No need to clear
      break;
    }
    case kLabel: {
      nullable_label_.label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case NULLABLE_LABEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NULLABLE_LABEL_NOT_SET;
}

void Leaf::clear_nullable_dtype() {
// @@protoc_insertion_point(one_of_clear_start:query.Leaf)
  switch (nullable_dtype_case()) {
    case kDtypeNil: {
      // No need to clear
      break;
    }
    case kDtype: {
      nullable_dtype_.dtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case NULLABLE_DTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = NULLABLE_DTYPE_NOT_SET;
}

void Leaf::clear_nullable_usage() {
// @@protoc_insertion_point(one_of_clear_start:query.Leaf)
  switch (nullable_usage_case()) {
    case kUsageNil: {
      // No need to clear
      break;
    }
    case kUsage: {
      nullable_usage_.usage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case NULLABLE_USAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = NULLABLE_USAGE_NOT_SET;
}


void Leaf::Clear() {
// @@protoc_insertion_point(message_clear_start:query.Leaf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  clear_nullable_label();
  clear_nullable_dtype();
  clear_nullable_usage();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Leaf::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Leaf*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool label_nil = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_label_nil(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string label = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("query.Leaf.label");
        object = msg->mutable_label();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool dtype_nil = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_dtype_nil(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string dtype = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("query.Leaf.dtype");
        object = msg->mutable_dtype();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated uint32 shape = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 42) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_shape();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        do {
          msg->add_shape(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
        break;
      }
      // bool usage_nil = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_usage_nil(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string usage = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("query.Leaf.usage");
        object = msg->mutable_usage();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Leaf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:query.Leaf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool label_nil = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          clear_nullable_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nullable_label_.label_nil_)));
          set_has_label_nil();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string label = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->label().data(), static_cast<int>(this->label().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "query.Leaf.label"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dtype_nil = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          clear_nullable_dtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nullable_dtype_.dtype_nil_)));
          set_has_dtype_nil();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dtype = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dtype().data(), static_cast<int>(this->dtype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "query.Leaf.dtype"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 shape = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shape())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool usage_nil = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          clear_nullable_usage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nullable_usage_.usage_nil_)));
          set_has_usage_nil();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string usage = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->usage().data(), static_cast<int>(this->usage().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "query.Leaf.usage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:query.Leaf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:query.Leaf)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Leaf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:query.Leaf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool label_nil = 1;
  if (has_label_nil()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->label_nil(), output);
  }

  // string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "query.Leaf.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->label(), output);
  }

  // bool dtype_nil = 3;
  if (has_dtype_nil()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->dtype_nil(), output);
  }

  // string dtype = 4;
  if (has_dtype()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dtype().data(), static_cast<int>(this->dtype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "query.Leaf.dtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dtype(), output);
  }

  // repeated uint32 shape = 5;
  if (this->shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->shape(i), output);
  }

  // bool usage_nil = 6;
  if (has_usage_nil()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->usage_nil(), output);
  }

  // string usage = 7;
  if (has_usage()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usage().data(), static_cast<int>(this->usage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "query.Leaf.usage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->usage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:query.Leaf)
}

::google::protobuf::uint8* Leaf::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:query.Leaf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool label_nil = 1;
  if (has_label_nil()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->label_nil(), target);
  }

  // string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "query.Leaf.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // bool dtype_nil = 3;
  if (has_dtype_nil()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->dtype_nil(), target);
  }

  // string dtype = 4;
  if (has_dtype()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dtype().data(), static_cast<int>(this->dtype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "query.Leaf.dtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dtype(), target);
  }

  // repeated uint32 shape = 5;
  if (this->shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _shape_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->shape_, target);
  }

  // bool usage_nil = 6;
  if (has_usage_nil()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->usage_nil(), target);
  }

  // string usage = 7;
  if (has_usage()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usage().data(), static_cast<int>(this->usage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "query.Leaf.usage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->usage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:query.Leaf)
  return target;
}

size_t Leaf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:query.Leaf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 shape = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  switch (nullable_label_case()) {
    // bool label_nil = 1;
    case kLabelNil: {
      total_size += 1 + 1;
      break;
    }
    // string label = 2;
    case kLabel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
      break;
    }
    case NULLABLE_LABEL_NOT_SET: {
      break;
    }
  }
  switch (nullable_dtype_case()) {
    // bool dtype_nil = 3;
    case kDtypeNil: {
      total_size += 1 + 1;
      break;
    }
    // string dtype = 4;
    case kDtype: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dtype());
      break;
    }
    case NULLABLE_DTYPE_NOT_SET: {
      break;
    }
  }
  switch (nullable_usage_case()) {
    // bool usage_nil = 6;
    case kUsageNil: {
      total_size += 1 + 1;
      break;
    }
    // string usage = 7;
    case kUsage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usage());
      break;
    }
    case NULLABLE_USAGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Leaf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:query.Leaf)
  GOOGLE_DCHECK_NE(&from, this);
  const Leaf* source =
      ::google::protobuf::DynamicCastToGenerated<Leaf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:query.Leaf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:query.Leaf)
    MergeFrom(*source);
  }
}

void Leaf::MergeFrom(const Leaf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:query.Leaf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  switch (from.nullable_label_case()) {
    case kLabelNil: {
      set_label_nil(from.label_nil());
      break;
    }
    case kLabel: {
      set_label(from.label());
      break;
    }
    case NULLABLE_LABEL_NOT_SET: {
      break;
    }
  }
  switch (from.nullable_dtype_case()) {
    case kDtypeNil: {
      set_dtype_nil(from.dtype_nil());
      break;
    }
    case kDtype: {
      set_dtype(from.dtype());
      break;
    }
    case NULLABLE_DTYPE_NOT_SET: {
      break;
    }
  }
  switch (from.nullable_usage_case()) {
    case kUsageNil: {
      set_usage_nil(from.usage_nil());
      break;
    }
    case kUsage: {
      set_usage(from.usage());
      break;
    }
    case NULLABLE_USAGE_NOT_SET: {
      break;
    }
  }
}

void Leaf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:query.Leaf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Leaf::CopyFrom(const Leaf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:query.Leaf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Leaf::IsInitialized() const {
  return true;
}

void Leaf::Swap(Leaf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Leaf::InternalSwap(Leaf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  swap(nullable_label_, other->nullable_label_);
  swap(nullable_dtype_, other->nullable_dtype_);
  swap(nullable_usage_, other->nullable_usage_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
}

::google::protobuf::Metadata Leaf::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_query_2fquery_2eproto);
  return ::file_level_metadata_query_2fquery_2eproto[kIndexInFileMessages];
}


// ===================================================================

Operator_AttrsEntry_DoNotUse::Operator_AttrsEntry_DoNotUse() {}
Operator_AttrsEntry_DoNotUse::Operator_AttrsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void Operator_AttrsEntry_DoNotUse::MergeFrom(const Operator_AttrsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Operator_AttrsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_query_2fquery_2eproto);
  return ::file_level_metadata_query_2fquery_2eproto[2];
}
void Operator_AttrsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Operator_AttrsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      Operator_AttrsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "query.Operator.AttrsEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void Operator::InitAsDefaultInstance() {
  ::query::_Operator_default_instance_.capture_nil_ = false;
  ::query::_Operator_default_instance_.capture_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class Operator::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Operator::kOpnameFieldNumber;
const int Operator::kAttrsFieldNumber;
const int Operator::kArgsFieldNumber;
const int Operator::kCaptureNilFieldNumber;
const int Operator::kCaptureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Operator::Operator()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:query.Operator)
}
Operator::Operator(const Operator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attrs_.MergeFrom(from.attrs_);
  opname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.opname().size() > 0) {
    opname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opname_);
  }
  clear_has_nullable_capture();
  switch (from.nullable_capture_case()) {
    case kCaptureNil: {
      set_capture_nil(from.capture_nil());
      break;
    }
    case kCapture: {
      set_capture(from.capture());
      break;
    }
    case NULLABLE_CAPTURE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:query.Operator)
}

void Operator::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Attribute_query_2fquery_2eproto.base);
  opname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nullable_capture();
}

Operator::~Operator() {
  // @@protoc_insertion_point(destructor:query.Operator)
  SharedDtor();
}

void Operator::SharedDtor() {
  opname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_nullable_capture()) {
    clear_nullable_capture();
  }
}

void Operator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Operator& Operator::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Attribute_query_2fquery_2eproto.base);
  return *internal_default_instance();
}


void Operator::clear_nullable_capture() {
// @@protoc_insertion_point(one_of_clear_start:query.Operator)
  switch (nullable_capture_case()) {
    case kCaptureNil: {
      // No need to clear
      break;
    }
    case kCapture: {
      nullable_capture_.capture_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case NULLABLE_CAPTURE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NULLABLE_CAPTURE_NOT_SET;
}


void Operator::Clear() {
// @@protoc_insertion_point(message_clear_start:query.Operator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attrs_.Clear();
  args_.Clear();
  opname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_nullable_capture();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Operator::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Operator*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string opname = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("query.Operator.opname");
        object = msg->mutable_opname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<string, .query.Attribute> attrs = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::query::Operator_AttrsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->attrs_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .query.Node args = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::query::Node::_InternalParse;
          object = msg->add_args();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // bool capture_nil = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_capture_nil(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string capture = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("query.Operator.capture");
        object = msg->mutable_capture();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Operator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:query.Operator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string opname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->opname().data(), static_cast<int>(this->opname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "query.Operator.opname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .query.Attribute> attrs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          Operator_AttrsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Operator_AttrsEntry_DoNotUse,
              ::std::string, ::query::Attribute,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::query::Attribute > > parser(&attrs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "query.Operator.AttrsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .query.Node args = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool capture_nil = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          clear_nullable_capture();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nullable_capture_.capture_nil_)));
          set_has_capture_nil();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string capture = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capture()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->capture().data(), static_cast<int>(this->capture().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "query.Operator.capture"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:query.Operator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:query.Operator)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Operator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:query.Operator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string opname = 1;
  if (this->opname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opname().data(), static_cast<int>(this->opname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "query.Operator.opname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->opname(), output);
  }

  // map<string, .query.Attribute> attrs = 2;
  if (!this->attrs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::query::Attribute >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "query.Operator.AttrsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attrs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->attrs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::query::Attribute >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::query::Attribute >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Operator_AttrsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attrs_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Operator_AttrsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::query::Attribute >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it) {
        entry.reset(attrs_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .query.Node args = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->args_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->args(static_cast<int>(i)),
      output);
  }

  // bool capture_nil = 4;
  if (has_capture_nil()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->capture_nil(), output);
  }

  // string capture = 5;
  if (has_capture()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->capture().data(), static_cast<int>(this->capture().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "query.Operator.capture");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->capture(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:query.Operator)
}

::google::protobuf::uint8* Operator::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:query.Operator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string opname = 1;
  if (this->opname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opname().data(), static_cast<int>(this->opname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "query.Operator.opname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->opname(), target);
  }

  // map<string, .query.Attribute> attrs = 2;
  if (!this->attrs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::query::Attribute >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "query.Operator.AttrsEntry.key");
      }
    };

    if (false &&
        this->attrs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->attrs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::query::Attribute >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::query::Attribute >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Operator_AttrsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attrs_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Operator_AttrsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::query::Attribute >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it) {
        entry.reset(attrs_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .query.Node args = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->args_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->args(static_cast<int>(i)), target);
  }

  // bool capture_nil = 4;
  if (has_capture_nil()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->capture_nil(), target);
  }

  // string capture = 5;
  if (has_capture()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->capture().data(), static_cast<int>(this->capture().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "query.Operator.capture");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->capture(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:query.Operator)
  return target;
}

size_t Operator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:query.Operator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .query.Attribute> attrs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attrs_size());
  {
    ::std::unique_ptr<Operator_AttrsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::query::Attribute >::const_iterator
        it = this->attrs().begin();
        it != this->attrs().end(); ++it) {
      entry.reset(attrs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .query.Node args = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->args_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->args(static_cast<int>(i)));
    }
  }

  // string opname = 1;
  if (this->opname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->opname());
  }

  switch (nullable_capture_case()) {
    // bool capture_nil = 4;
    case kCaptureNil: {
      total_size += 1 + 1;
      break;
    }
    // string capture = 5;
    case kCapture: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->capture());
      break;
    }
    case NULLABLE_CAPTURE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Operator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:query.Operator)
  GOOGLE_DCHECK_NE(&from, this);
  const Operator* source =
      ::google::protobuf::DynamicCastToGenerated<Operator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:query.Operator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:query.Operator)
    MergeFrom(*source);
  }
}

void Operator::MergeFrom(const Operator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:query.Operator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attrs_.MergeFrom(from.attrs_);
  args_.MergeFrom(from.args_);
  if (from.opname().size() > 0) {

    opname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opname_);
  }
  switch (from.nullable_capture_case()) {
    case kCaptureNil: {
      set_capture_nil(from.capture_nil());
      break;
    }
    case kCapture: {
      set_capture(from.capture());
      break;
    }
    case NULLABLE_CAPTURE_NOT_SET: {
      break;
    }
  }
}

void Operator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:query.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operator::CopyFrom(const Operator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:query.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operator::IsInitialized() const {
  return true;
}

void Operator::Swap(Operator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Operator::InternalSwap(Operator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attrs_.Swap(&other->attrs_);
  CastToBase(&args_)->InternalSwap(CastToBase(&other->args_));
  opname_.Swap(&other->opname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nullable_capture_, other->nullable_capture_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Operator::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_query_2fquery_2eproto);
  return ::file_level_metadata_query_2fquery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Attribute::InitAsDefaultInstance() {
  ::query::_Attribute_default_instance_.inum_ = PROTOBUF_LONGLONG(0);
  ::query::_Attribute_default_instance_.dnum_ = 0;
  ::query::_Attribute_default_instance_.iarr_ = const_cast< ::query::IntArray*>(
      ::query::IntArray::internal_default_instance());
  ::query::_Attribute_default_instance_.darr_ = const_cast< ::query::DoubleArray*>(
      ::query::DoubleArray::internal_default_instance());
  ::query::_Attribute_default_instance_.str_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::query::_Attribute_default_instance_.node_ = const_cast< ::query::Node*>(
      ::query::Node::internal_default_instance());
  ::query::_Attribute_default_instance_.layer_ = const_cast< ::query::Layer*>(
      ::query::Layer::internal_default_instance());
}
class Attribute::HasBitSetters {
 public:
  static const ::query::IntArray& iarr(const Attribute* msg);
  static const ::query::DoubleArray& darr(const Attribute* msg);
  static const ::query::Node& node(const Attribute* msg);
  static const ::query::Layer& layer(const Attribute* msg);
};

const ::query::IntArray&
Attribute::HasBitSetters::iarr(const Attribute* msg) {
  return *msg->attr_.iarr_;
}
const ::query::DoubleArray&
Attribute::HasBitSetters::darr(const Attribute* msg) {
  return *msg->attr_.darr_;
}
const ::query::Node&
Attribute::HasBitSetters::node(const Attribute* msg) {
  return *msg->attr_.node_;
}
const ::query::Layer&
Attribute::HasBitSetters::layer(const Attribute* msg) {
  return *msg->attr_.layer_;
}
void Attribute::set_allocated_iarr(::query::IntArray* iarr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_attr();
  if (iarr) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      iarr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, iarr, submessage_arena);
    }
    set_has_iarr();
    attr_.iarr_ = iarr;
  }
  // @@protoc_insertion_point(field_set_allocated:query.Attribute.iarr)
}
void Attribute::set_allocated_darr(::query::DoubleArray* darr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_attr();
  if (darr) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      darr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, darr, submessage_arena);
    }
    set_has_darr();
    attr_.darr_ = darr;
  }
  // @@protoc_insertion_point(field_set_allocated:query.Attribute.darr)
}
void Attribute::set_allocated_node(::query::Node* node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_attr();
  if (node) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    set_has_node();
    attr_.node_ = node;
  }
  // @@protoc_insertion_point(field_set_allocated:query.Attribute.node)
}
void Attribute::set_allocated_layer(::query::Layer* layer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_attr();
  if (layer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      layer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, layer, submessage_arena);
    }
    set_has_layer();
    attr_.layer_ = layer;
  }
  // @@protoc_insertion_point(field_set_allocated:query.Attribute.layer)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Attribute::kInumFieldNumber;
const int Attribute::kDnumFieldNumber;
const int Attribute::kIarrFieldNumber;
const int Attribute::kDarrFieldNumber;
const int Attribute::kStrFieldNumber;
const int Attribute::kNodeFieldNumber;
const int Attribute::kLayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Attribute::Attribute()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:query.Attribute)
}
Attribute::Attribute(const Attribute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_attr();
  switch (from.attr_case()) {
    case kInum: {
      set_inum(from.inum());
      break;
    }
    case kDnum: {
      set_dnum(from.dnum());
      break;
    }
    case kIarr: {
      mutable_iarr()->::query::IntArray::MergeFrom(from.iarr());
      break;
    }
    case kDarr: {
      mutable_darr()->::query::DoubleArray::MergeFrom(from.darr());
      break;
    }
    case kStr: {
      set_str(from.str());
      break;
    }
    case kNode: {
      mutable_node()->::query::Node::MergeFrom(from.node());
      break;
    }
    case kLayer: {
      mutable_layer()->::query::Layer::MergeFrom(from.layer());
      break;
    }
    case ATTR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:query.Attribute)
}

void Attribute::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Attribute_query_2fquery_2eproto.base);
  clear_has_attr();
}

Attribute::~Attribute() {
  // @@protoc_insertion_point(destructor:query.Attribute)
  SharedDtor();
}

void Attribute::SharedDtor() {
  if (has_attr()) {
    clear_attr();
  }
}

void Attribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Attribute& Attribute::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Attribute_query_2fquery_2eproto.base);
  return *internal_default_instance();
}


void Attribute::clear_attr() {
// @@protoc_insertion_point(one_of_clear_start:query.Attribute)
  switch (attr_case()) {
    case kInum: {
      // No need to clear
      break;
    }
    case kDnum: {
      // No need to clear
      break;
    }
    case kIarr: {
      delete attr_.iarr_;
      break;
    }
    case kDarr: {
      delete attr_.darr_;
      break;
    }
    case kStr: {
      attr_.str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kNode: {
      delete attr_.node_;
      break;
    }
    case kLayer: {
      delete attr_.layer_;
      break;
    }
    case ATTR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ATTR_NOT_SET;
}


void Attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:query.Attribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_attr();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Attribute::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Attribute*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 inum = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_inum(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double dnum = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_dnum(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // .query.IntArray iarr = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::query::IntArray::_InternalParse;
        object = msg->mutable_iarr();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .query.DoubleArray darr = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::query::DoubleArray::_InternalParse;
        object = msg->mutable_darr();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string str = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("query.Attribute.str");
        object = msg->mutable_str();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .query.Node node = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::query::Node::_InternalParse;
        object = msg->mutable_node();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .query.Layer layer = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::query::Layer::_InternalParse;
        object = msg->mutable_layer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Attribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:query.Attribute)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 inum = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          clear_attr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attr_.inum_)));
          set_has_inum();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dnum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          clear_attr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attr_.dnum_)));
          set_has_dnum();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .query.IntArray iarr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_iarr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .query.DoubleArray darr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_darr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string str = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str().data(), static_cast<int>(this->str().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "query.Attribute.str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .query.Node node = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .query.Layer layer = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_layer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:query.Attribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:query.Attribute)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Attribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:query.Attribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 inum = 1;
  if (has_inum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->inum(), output);
  }

  // double dnum = 2;
  if (has_dnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dnum(), output);
  }

  // .query.IntArray iarr = 3;
  if (has_iarr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::iarr(this), output);
  }

  // .query.DoubleArray darr = 4;
  if (has_darr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::darr(this), output);
  }

  // string str = 5;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "query.Attribute.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->str(), output);
  }

  // .query.Node node = 6;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::node(this), output);
  }

  // .query.Layer layer = 7;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::layer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:query.Attribute)
}

::google::protobuf::uint8* Attribute::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:query.Attribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 inum = 1;
  if (has_inum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->inum(), target);
  }

  // double dnum = 2;
  if (has_dnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dnum(), target);
  }

  // .query.IntArray iarr = 3;
  if (has_iarr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::iarr(this), target);
  }

  // .query.DoubleArray darr = 4;
  if (has_darr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::darr(this), target);
  }

  // string str = 5;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "query.Attribute.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->str(), target);
  }

  // .query.Node node = 6;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::node(this), target);
  }

  // .query.Layer layer = 7;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::layer(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:query.Attribute)
  return target;
}

size_t Attribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:query.Attribute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (attr_case()) {
    // int64 inum = 1;
    case kInum: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->inum());
      break;
    }
    // double dnum = 2;
    case kDnum: {
      total_size += 1 + 8;
      break;
    }
    // .query.IntArray iarr = 3;
    case kIarr: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attr_.iarr_);
      break;
    }
    // .query.DoubleArray darr = 4;
    case kDarr: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attr_.darr_);
      break;
    }
    // string str = 5;
    case kStr: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
      break;
    }
    // .query.Node node = 6;
    case kNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attr_.node_);
      break;
    }
    // .query.Layer layer = 7;
    case kLayer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attr_.layer_);
      break;
    }
    case ATTR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Attribute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:query.Attribute)
  GOOGLE_DCHECK_NE(&from, this);
  const Attribute* source =
      ::google::protobuf::DynamicCastToGenerated<Attribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:query.Attribute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:query.Attribute)
    MergeFrom(*source);
  }
}

void Attribute::MergeFrom(const Attribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:query.Attribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.attr_case()) {
    case kInum: {
      set_inum(from.inum());
      break;
    }
    case kDnum: {
      set_dnum(from.dnum());
      break;
    }
    case kIarr: {
      mutable_iarr()->::query::IntArray::MergeFrom(from.iarr());
      break;
    }
    case kDarr: {
      mutable_darr()->::query::DoubleArray::MergeFrom(from.darr());
      break;
    }
    case kStr: {
      set_str(from.str());
      break;
    }
    case kNode: {
      mutable_node()->::query::Node::MergeFrom(from.node());
      break;
    }
    case kLayer: {
      mutable_layer()->::query::Layer::MergeFrom(from.layer());
      break;
    }
    case ATTR_NOT_SET: {
      break;
    }
  }
}

void Attribute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:query.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attribute::CopyFrom(const Attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:query.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribute::IsInitialized() const {
  return true;
}

void Attribute::Swap(Attribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Attribute::InternalSwap(Attribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(attr_, other->attr_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Attribute::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_query_2fquery_2eproto);
  return ::file_level_metadata_query_2fquery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IntArray::InitAsDefaultInstance() {
}
class IntArray::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntArray::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntArray::IntArray()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:query.IntArray)
}
IntArray::IntArray(const IntArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:query.IntArray)
}

void IntArray::SharedCtor() {
}

IntArray::~IntArray() {
  // @@protoc_insertion_point(destructor:query.IntArray)
  SharedDtor();
}

void IntArray::SharedDtor() {
}

void IntArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntArray& IntArray::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IntArray_query_2fquery_2eproto.base);
  return *internal_default_instance();
}


void IntArray::Clear() {
// @@protoc_insertion_point(message_clear_start:query.IntArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntArray::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IntArray*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int64 values = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt64Parser;
          object = msg->mutable_values();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          msg->add_values(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:query.IntArray)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_values())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:query.IntArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:query.IntArray)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:query.IntArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 values = 1;
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:query.IntArray)
}

::google::protobuf::uint8* IntArray::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:query.IntArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 values = 1;
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _values_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->values_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:query.IntArray)
  return target;
}

size_t IntArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:query.IntArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 values = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->values_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:query.IntArray)
  GOOGLE_DCHECK_NE(&from, this);
  const IntArray* source =
      ::google::protobuf::DynamicCastToGenerated<IntArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:query.IntArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:query.IntArray)
    MergeFrom(*source);
  }
}

void IntArray::MergeFrom(const IntArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:query.IntArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void IntArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:query.IntArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntArray::CopyFrom(const IntArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:query.IntArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntArray::IsInitialized() const {
  return true;
}

void IntArray::Swap(IntArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntArray::InternalSwap(IntArray* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::google::protobuf::Metadata IntArray::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_query_2fquery_2eproto);
  return ::file_level_metadata_query_2fquery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoubleArray::InitAsDefaultInstance() {
}
class DoubleArray::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoubleArray::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoubleArray::DoubleArray()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:query.DoubleArray)
}
DoubleArray::DoubleArray(const DoubleArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:query.DoubleArray)
}

void DoubleArray::SharedCtor() {
}

DoubleArray::~DoubleArray() {
  // @@protoc_insertion_point(destructor:query.DoubleArray)
  SharedDtor();
}

void DoubleArray::SharedDtor() {
}

void DoubleArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleArray& DoubleArray::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DoubleArray_query_2fquery_2eproto.base);
  return *internal_default_instance();
}


void DoubleArray::Clear() {
// @@protoc_insertion_point(message_clear_start:query.DoubleArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoubleArray::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DoubleArray*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated double values = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
          object = msg->mutable_values();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        do {
          msg->add_values(::google::protobuf::io::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 9 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoubleArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:query.DoubleArray)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:query.DoubleArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:query.DoubleArray)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoubleArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:query.DoubleArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double values = 1;
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->values().data(), this->values_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:query.DoubleArray)
}

::google::protobuf::uint8* DoubleArray::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:query.DoubleArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double values = 1;
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _values_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->values_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:query.DoubleArray)
  return target;
}

size_t DoubleArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:query.DoubleArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:query.DoubleArray)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleArray* source =
      ::google::protobuf::DynamicCastToGenerated<DoubleArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:query.DoubleArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:query.DoubleArray)
    MergeFrom(*source);
  }
}

void DoubleArray::MergeFrom(const DoubleArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:query.DoubleArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void DoubleArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:query.DoubleArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleArray::CopyFrom(const DoubleArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:query.DoubleArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleArray::IsInitialized() const {
  return true;
}

void DoubleArray::Swap(DoubleArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoubleArray::InternalSwap(DoubleArray* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::google::protobuf::Metadata DoubleArray::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_query_2fquery_2eproto);
  return ::file_level_metadata_query_2fquery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Layer::InitAsDefaultInstance() {
  ::query::_Layer_default_instance_.name_nil_ = false;
  ::query::_Layer_default_instance_.name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::query::_Layer_default_instance_._instance.get_mutable()->input_ = const_cast< ::query::Node*>(
      ::query::Node::internal_default_instance());
}
class Layer::HasBitSetters {
 public:
  static const ::query::Node& input(const Layer* msg);
};

const ::query::Node&
Layer::HasBitSetters::input(const Layer* msg) {
  return *msg->input_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Layer::kNameNilFieldNumber;
const int Layer::kNameFieldNumber;
const int Layer::kInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Layer::Layer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:query.Layer)
}
Layer::Layer(const Layer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_input()) {
    input_ = new ::query::Node(*from.input_);
  } else {
    input_ = nullptr;
  }
  clear_has_nullable_name();
  switch (from.nullable_name_case()) {
    case kNameNil: {
      set_name_nil(from.name_nil());
      break;
    }
    case kName: {
      set_name(from.name());
      break;
    }
    case NULLABLE_NAME_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:query.Layer)
}

void Layer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Attribute_query_2fquery_2eproto.base);
  input_ = nullptr;
  clear_has_nullable_name();
}

Layer::~Layer() {
  // @@protoc_insertion_point(destructor:query.Layer)
  SharedDtor();
}

void Layer::SharedDtor() {
  if (this != internal_default_instance()) delete input_;
  if (has_nullable_name()) {
    clear_nullable_name();
  }
}

void Layer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Layer& Layer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Attribute_query_2fquery_2eproto.base);
  return *internal_default_instance();
}


void Layer::clear_nullable_name() {
// @@protoc_insertion_point(one_of_clear_start:query.Layer)
  switch (nullable_name_case()) {
    case kNameNil: {
      // No need to clear
      break;
    }
    case kName: {
      nullable_name_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case NULLABLE_NAME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NULLABLE_NAME_NOT_SET;
}


void Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:query.Layer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  clear_nullable_name();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Layer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Layer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool name_nil = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_name_nil(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("query.Layer.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .query.Node input = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::query::Node::_InternalParse;
        object = msg->mutable_input();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:query.Layer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool name_nil = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          clear_nullable_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nullable_name_.name_nil_)));
          set_has_name_nil();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "query.Layer.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .query.Node input = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:query.Layer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:query.Layer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:query.Layer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool name_nil = 1;
  if (has_name_nil()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->name_nil(), output);
  }

  // string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "query.Layer.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .query.Node input = 3;
  if (this->has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::input(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:query.Layer)
}

::google::protobuf::uint8* Layer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:query.Layer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool name_nil = 1;
  if (has_name_nil()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->name_nil(), target);
  }

  // string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "query.Layer.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .query.Node input = 3;
  if (this->has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::input(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:query.Layer)
  return target;
}

size_t Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:query.Layer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .query.Node input = 3;
  if (this->has_input()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *input_);
  }

  switch (nullable_name_case()) {
    // bool name_nil = 1;
    case kNameNil: {
      total_size += 1 + 1;
      break;
    }
    // string name = 2;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    case NULLABLE_NAME_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Layer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:query.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  const Layer* source =
      ::google::protobuf::DynamicCastToGenerated<Layer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:query.Layer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:query.Layer)
    MergeFrom(*source);
  }
}

void Layer::MergeFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:query.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_input()) {
    mutable_input()->::query::Node::MergeFrom(from.input());
  }
  switch (from.nullable_name_case()) {
    case kNameNil: {
      set_name_nil(from.name_nil());
      break;
    }
    case kName: {
      set_name(from.name());
      break;
    }
    case NULLABLE_NAME_NOT_SET: {
      break;
    }
  }
}

void Layer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:query.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layer::CopyFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:query.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layer::IsInitialized() const {
  return true;
}

void Layer::Swap(Layer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Layer::InternalSwap(Layer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(input_, other->input_);
  swap(nullable_name_, other->nullable_name_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Layer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_query_2fquery_2eproto);
  return ::file_level_metadata_query_2fquery_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace query
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::query::Node* Arena::CreateMaybeMessage< ::query::Node >(Arena* arena) {
  return Arena::CreateInternal< ::query::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::query::Leaf* Arena::CreateMaybeMessage< ::query::Leaf >(Arena* arena) {
  return Arena::CreateInternal< ::query::Leaf >(arena);
}
template<> PROTOBUF_NOINLINE ::query::Operator_AttrsEntry_DoNotUse* Arena::CreateMaybeMessage< ::query::Operator_AttrsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::query::Operator_AttrsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::query::Operator* Arena::CreateMaybeMessage< ::query::Operator >(Arena* arena) {
  return Arena::CreateInternal< ::query::Operator >(arena);
}
template<> PROTOBUF_NOINLINE ::query::Attribute* Arena::CreateMaybeMessage< ::query::Attribute >(Arena* arena) {
  return Arena::CreateInternal< ::query::Attribute >(arena);
}
template<> PROTOBUF_NOINLINE ::query::IntArray* Arena::CreateMaybeMessage< ::query::IntArray >(Arena* arena) {
  return Arena::CreateInternal< ::query::IntArray >(arena);
}
template<> PROTOBUF_NOINLINE ::query::DoubleArray* Arena::CreateMaybeMessage< ::query::DoubleArray >(Arena* arena) {
  return Arena::CreateInternal< ::query::DoubleArray >(arena);
}
template<> PROTOBUF_NOINLINE ::query::Layer* Arena::CreateMaybeMessage< ::query::Layer >(Arena* arena) {
  return Arena::CreateInternal< ::query::Layer >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
