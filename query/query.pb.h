// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query/query.proto

#ifndef PROTOBUF_INCLUDED_query_2fquery_2eproto
#define PROTOBUF_INCLUDED_query_2fquery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_query_2fquery_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_query_2fquery_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_query_2fquery_2eproto();
namespace query {
class Attribute;
class AttributeDefaultTypeInternal;
extern AttributeDefaultTypeInternal _Attribute_default_instance_;
class DoubleArray;
class DoubleArrayDefaultTypeInternal;
extern DoubleArrayDefaultTypeInternal _DoubleArray_default_instance_;
class IntArray;
class IntArrayDefaultTypeInternal;
extern IntArrayDefaultTypeInternal _IntArray_default_instance_;
class Layer;
class LayerDefaultTypeInternal;
extern LayerDefaultTypeInternal _Layer_default_instance_;
class Leaf;
class LeafDefaultTypeInternal;
extern LeafDefaultTypeInternal _Leaf_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Operator;
class OperatorDefaultTypeInternal;
extern OperatorDefaultTypeInternal _Operator_default_instance_;
class Operator_AttrsEntry_DoNotUse;
class Operator_AttrsEntry_DoNotUseDefaultTypeInternal;
extern Operator_AttrsEntry_DoNotUseDefaultTypeInternal _Operator_AttrsEntry_DoNotUse_default_instance_;
}  // namespace query
namespace google {
namespace protobuf {
template<> ::query::Attribute* Arena::CreateMaybeMessage<::query::Attribute>(Arena*);
template<> ::query::DoubleArray* Arena::CreateMaybeMessage<::query::DoubleArray>(Arena*);
template<> ::query::IntArray* Arena::CreateMaybeMessage<::query::IntArray>(Arena*);
template<> ::query::Layer* Arena::CreateMaybeMessage<::query::Layer>(Arena*);
template<> ::query::Leaf* Arena::CreateMaybeMessage<::query::Leaf>(Arena*);
template<> ::query::Node* Arena::CreateMaybeMessage<::query::Node>(Arena*);
template<> ::query::Operator* Arena::CreateMaybeMessage<::query::Operator>(Arena*);
template<> ::query::Operator_AttrsEntry_DoNotUse* Arena::CreateMaybeMessage<::query::Operator_AttrsEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace query {

// ===================================================================

class Node final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:query.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Node& default_instance();

  enum ValCase {
    kCst = 1,
    kLeaf = 2,
    kOp = 3,
    kSymb = 4,
    VAL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Node* other);
  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double cst = 1;
  private:
  bool has_cst() const;
  public:
  void clear_cst();
  static const int kCstFieldNumber = 1;
  double cst() const;
  void set_cst(double value);

  // .query.Leaf leaf = 2;
  bool has_leaf() const;
  void clear_leaf();
  static const int kLeafFieldNumber = 2;
  const ::query::Leaf& leaf() const;
  ::query::Leaf* release_leaf();
  ::query::Leaf* mutable_leaf();
  void set_allocated_leaf(::query::Leaf* leaf);

  // .query.Operator op = 3;
  bool has_op() const;
  void clear_op();
  static const int kOpFieldNumber = 3;
  const ::query::Operator& op() const;
  ::query::Operator* release_op();
  ::query::Operator* mutable_op();
  void set_allocated_op(::query::Operator* op);

  // string symb = 4;
  private:
  bool has_symb() const;
  public:
  void clear_symb();
  static const int kSymbFieldNumber = 4;
  const ::std::string& symb() const;
  void set_symb(const ::std::string& value);
  #if LANG_CXX11
  void set_symb(::std::string&& value);
  #endif
  void set_symb(const char* value);
  void set_symb(const char* value, size_t size);
  ::std::string* mutable_symb();
  ::std::string* release_symb();
  void set_allocated_symb(::std::string* symb);

  void clear_val();
  ValCase val_case() const;
  // @@protoc_insertion_point(class_scope:query.Node)
 private:
  class HasBitSetters;
  void set_has_cst();
  void set_has_leaf();
  void set_has_op();
  void set_has_symb();

  inline bool has_val() const;
  inline void clear_has_val();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValUnion {
    ValUnion() {}
    double cst_;
    ::query::Leaf* leaf_;
    ::query::Operator* op_;
    ::google::protobuf::internal::ArenaStringPtr symb_;
  } val_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_query_2fquery_2eproto;
};
// -------------------------------------------------------------------

class Leaf final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:query.Leaf) */ {
 public:
  Leaf();
  virtual ~Leaf();

  Leaf(const Leaf& from);

  inline Leaf& operator=(const Leaf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Leaf(Leaf&& from) noexcept
    : Leaf() {
    *this = ::std::move(from);
  }

  inline Leaf& operator=(Leaf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Leaf& default_instance();

  enum NullableLabelCase {
    kLabelNil = 1,
    kLabel = 2,
    NULLABLE_LABEL_NOT_SET = 0,
  };

  enum NullableDtypeCase {
    kDtypeNil = 3,
    kDtype = 4,
    NULLABLE_DTYPE_NOT_SET = 0,
  };

  enum NullableUsageCase {
    kUsageNil = 6,
    kUsage = 7,
    NULLABLE_USAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Leaf* internal_default_instance() {
    return reinterpret_cast<const Leaf*>(
               &_Leaf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Leaf* other);
  friend void swap(Leaf& a, Leaf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Leaf* New() const final {
    return CreateMaybeMessage<Leaf>(nullptr);
  }

  Leaf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Leaf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Leaf& from);
  void MergeFrom(const Leaf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Leaf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 shape = 5;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 5;
  ::google::protobuf::uint32 shape(int index) const;
  void set_shape(int index, ::google::protobuf::uint32 value);
  void add_shape(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      shape() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_shape();

  // bool label_nil = 1;
  private:
  bool has_label_nil() const;
  public:
  void clear_label_nil();
  static const int kLabelNilFieldNumber = 1;
  bool label_nil() const;
  void set_label_nil(bool value);

  // string label = 2;
  private:
  bool has_label() const;
  public:
  void clear_label();
  static const int kLabelFieldNumber = 2;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // bool dtype_nil = 3;
  private:
  bool has_dtype_nil() const;
  public:
  void clear_dtype_nil();
  static const int kDtypeNilFieldNumber = 3;
  bool dtype_nil() const;
  void set_dtype_nil(bool value);

  // string dtype = 4;
  private:
  bool has_dtype() const;
  public:
  void clear_dtype();
  static const int kDtypeFieldNumber = 4;
  const ::std::string& dtype() const;
  void set_dtype(const ::std::string& value);
  #if LANG_CXX11
  void set_dtype(::std::string&& value);
  #endif
  void set_dtype(const char* value);
  void set_dtype(const char* value, size_t size);
  ::std::string* mutable_dtype();
  ::std::string* release_dtype();
  void set_allocated_dtype(::std::string* dtype);

  // bool usage_nil = 6;
  private:
  bool has_usage_nil() const;
  public:
  void clear_usage_nil();
  static const int kUsageNilFieldNumber = 6;
  bool usage_nil() const;
  void set_usage_nil(bool value);

  // string usage = 7;
  private:
  bool has_usage() const;
  public:
  void clear_usage();
  static const int kUsageFieldNumber = 7;
  const ::std::string& usage() const;
  void set_usage(const ::std::string& value);
  #if LANG_CXX11
  void set_usage(::std::string&& value);
  #endif
  void set_usage(const char* value);
  void set_usage(const char* value, size_t size);
  ::std::string* mutable_usage();
  ::std::string* release_usage();
  void set_allocated_usage(::std::string* usage);

  void clear_nullable_label();
  NullableLabelCase nullable_label_case() const;
  void clear_nullable_dtype();
  NullableDtypeCase nullable_dtype_case() const;
  void clear_nullable_usage();
  NullableUsageCase nullable_usage_case() const;
  // @@protoc_insertion_point(class_scope:query.Leaf)
 private:
  class HasBitSetters;
  void set_has_label_nil();
  void set_has_label();
  void set_has_dtype_nil();
  void set_has_dtype();
  void set_has_usage_nil();
  void set_has_usage();

  inline bool has_nullable_label() const;
  inline void clear_has_nullable_label();

  inline bool has_nullable_dtype() const;
  inline void clear_has_nullable_dtype();

  inline bool has_nullable_usage() const;
  inline void clear_has_nullable_usage();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > shape_;
  mutable std::atomic<int> _shape_cached_byte_size_;
  union NullableLabelUnion {
    NullableLabelUnion() {}
    bool label_nil_;
    ::google::protobuf::internal::ArenaStringPtr label_;
  } nullable_label_;
  union NullableDtypeUnion {
    NullableDtypeUnion() {}
    bool dtype_nil_;
    ::google::protobuf::internal::ArenaStringPtr dtype_;
  } nullable_dtype_;
  union NullableUsageUnion {
    NullableUsageUnion() {}
    bool usage_nil_;
    ::google::protobuf::internal::ArenaStringPtr usage_;
  } nullable_usage_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[3];

  friend struct ::TableStruct_query_2fquery_2eproto;
};
// -------------------------------------------------------------------

class Operator_AttrsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Operator_AttrsEntry_DoNotUse, 
    ::std::string, ::query::Attribute,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Operator_AttrsEntry_DoNotUse, 
    ::std::string, ::query::Attribute,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Operator_AttrsEntry_DoNotUse();
  Operator_AttrsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Operator_AttrsEntry_DoNotUse& other);
  static const Operator_AttrsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Operator_AttrsEntry_DoNotUse*>(&_Operator_AttrsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Operator final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:query.Operator) */ {
 public:
  Operator();
  virtual ~Operator();

  Operator(const Operator& from);

  inline Operator& operator=(const Operator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Operator(Operator&& from) noexcept
    : Operator() {
    *this = ::std::move(from);
  }

  inline Operator& operator=(Operator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Operator& default_instance();

  enum NullableCaptureCase {
    kCaptureNil = 4,
    kCapture = 5,
    NULLABLE_CAPTURE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operator* internal_default_instance() {
    return reinterpret_cast<const Operator*>(
               &_Operator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Operator* other);
  friend void swap(Operator& a, Operator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Operator* New() const final {
    return CreateMaybeMessage<Operator>(nullptr);
  }

  Operator* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Operator>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Operator& from);
  void MergeFrom(const Operator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .query.Attribute> attrs = 2;
  int attrs_size() const;
  void clear_attrs();
  static const int kAttrsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::query::Attribute >&
      attrs() const;
  ::google::protobuf::Map< ::std::string, ::query::Attribute >*
      mutable_attrs();

  // repeated .query.Node args = 3;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 3;
  ::query::Node* mutable_args(int index);
  ::google::protobuf::RepeatedPtrField< ::query::Node >*
      mutable_args();
  const ::query::Node& args(int index) const;
  ::query::Node* add_args();
  const ::google::protobuf::RepeatedPtrField< ::query::Node >&
      args() const;

  // string opname = 1;
  void clear_opname();
  static const int kOpnameFieldNumber = 1;
  const ::std::string& opname() const;
  void set_opname(const ::std::string& value);
  #if LANG_CXX11
  void set_opname(::std::string&& value);
  #endif
  void set_opname(const char* value);
  void set_opname(const char* value, size_t size);
  ::std::string* mutable_opname();
  ::std::string* release_opname();
  void set_allocated_opname(::std::string* opname);

  // bool capture_nil = 4;
  private:
  bool has_capture_nil() const;
  public:
  void clear_capture_nil();
  static const int kCaptureNilFieldNumber = 4;
  bool capture_nil() const;
  void set_capture_nil(bool value);

  // string capture = 5;
  private:
  bool has_capture() const;
  public:
  void clear_capture();
  static const int kCaptureFieldNumber = 5;
  const ::std::string& capture() const;
  void set_capture(const ::std::string& value);
  #if LANG_CXX11
  void set_capture(::std::string&& value);
  #endif
  void set_capture(const char* value);
  void set_capture(const char* value, size_t size);
  ::std::string* mutable_capture();
  ::std::string* release_capture();
  void set_allocated_capture(::std::string* capture);

  void clear_nullable_capture();
  NullableCaptureCase nullable_capture_case() const;
  // @@protoc_insertion_point(class_scope:query.Operator)
 private:
  class HasBitSetters;
  void set_has_capture_nil();
  void set_has_capture();

  inline bool has_nullable_capture() const;
  inline void clear_has_nullable_capture();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Operator_AttrsEntry_DoNotUse,
      ::std::string, ::query::Attribute,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > attrs_;
  ::google::protobuf::RepeatedPtrField< ::query::Node > args_;
  ::google::protobuf::internal::ArenaStringPtr opname_;
  union NullableCaptureUnion {
    NullableCaptureUnion() {}
    bool capture_nil_;
    ::google::protobuf::internal::ArenaStringPtr capture_;
  } nullable_capture_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_query_2fquery_2eproto;
};
// -------------------------------------------------------------------

class Attribute final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:query.Attribute) */ {
 public:
  Attribute();
  virtual ~Attribute();

  Attribute(const Attribute& from);

  inline Attribute& operator=(const Attribute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Attribute(Attribute&& from) noexcept
    : Attribute() {
    *this = ::std::move(from);
  }

  inline Attribute& operator=(Attribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Attribute& default_instance();

  enum AttrCase {
    kInum = 1,
    kDnum = 2,
    kIarr = 3,
    kDarr = 4,
    kStr = 5,
    kNode = 6,
    kLayer = 7,
    ATTR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attribute* internal_default_instance() {
    return reinterpret_cast<const Attribute*>(
               &_Attribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Attribute* other);
  friend void swap(Attribute& a, Attribute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Attribute* New() const final {
    return CreateMaybeMessage<Attribute>(nullptr);
  }

  Attribute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Attribute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Attribute& from);
  void MergeFrom(const Attribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 inum = 1;
  private:
  bool has_inum() const;
  public:
  void clear_inum();
  static const int kInumFieldNumber = 1;
  ::google::protobuf::int64 inum() const;
  void set_inum(::google::protobuf::int64 value);

  // double dnum = 2;
  private:
  bool has_dnum() const;
  public:
  void clear_dnum();
  static const int kDnumFieldNumber = 2;
  double dnum() const;
  void set_dnum(double value);

  // .query.IntArray iarr = 3;
  bool has_iarr() const;
  void clear_iarr();
  static const int kIarrFieldNumber = 3;
  const ::query::IntArray& iarr() const;
  ::query::IntArray* release_iarr();
  ::query::IntArray* mutable_iarr();
  void set_allocated_iarr(::query::IntArray* iarr);

  // .query.DoubleArray darr = 4;
  bool has_darr() const;
  void clear_darr();
  static const int kDarrFieldNumber = 4;
  const ::query::DoubleArray& darr() const;
  ::query::DoubleArray* release_darr();
  ::query::DoubleArray* mutable_darr();
  void set_allocated_darr(::query::DoubleArray* darr);

  // string str = 5;
  private:
  bool has_str() const;
  public:
  void clear_str();
  static const int kStrFieldNumber = 5;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  #if LANG_CXX11
  void set_str(::std::string&& value);
  #endif
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // .query.Node node = 6;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 6;
  const ::query::Node& node() const;
  ::query::Node* release_node();
  ::query::Node* mutable_node();
  void set_allocated_node(::query::Node* node);

  // .query.Layer layer = 7;
  bool has_layer() const;
  void clear_layer();
  static const int kLayerFieldNumber = 7;
  const ::query::Layer& layer() const;
  ::query::Layer* release_layer();
  ::query::Layer* mutable_layer();
  void set_allocated_layer(::query::Layer* layer);

  void clear_attr();
  AttrCase attr_case() const;
  // @@protoc_insertion_point(class_scope:query.Attribute)
 private:
  class HasBitSetters;
  void set_has_inum();
  void set_has_dnum();
  void set_has_iarr();
  void set_has_darr();
  void set_has_str();
  void set_has_node();
  void set_has_layer();

  inline bool has_attr() const;
  inline void clear_has_attr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union AttrUnion {
    AttrUnion() {}
    ::google::protobuf::int64 inum_;
    double dnum_;
    ::query::IntArray* iarr_;
    ::query::DoubleArray* darr_;
    ::google::protobuf::internal::ArenaStringPtr str_;
    ::query::Node* node_;
    ::query::Layer* layer_;
  } attr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_query_2fquery_2eproto;
};
// -------------------------------------------------------------------

class IntArray final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:query.IntArray) */ {
 public:
  IntArray();
  virtual ~IntArray();

  IntArray(const IntArray& from);

  inline IntArray& operator=(const IntArray& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IntArray(IntArray&& from) noexcept
    : IntArray() {
    *this = ::std::move(from);
  }

  inline IntArray& operator=(IntArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IntArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntArray* internal_default_instance() {
    return reinterpret_cast<const IntArray*>(
               &_IntArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(IntArray* other);
  friend void swap(IntArray& a, IntArray& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntArray* New() const final {
    return CreateMaybeMessage<IntArray>(nullptr);
  }

  IntArray* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IntArray>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IntArray& from);
  void MergeFrom(const IntArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  ::google::protobuf::int64 values(int index) const;
  void set_values(int index, ::google::protobuf::int64 value);
  void add_values(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      values() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:query.IntArray)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2fquery_2eproto;
};
// -------------------------------------------------------------------

class DoubleArray final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:query.DoubleArray) */ {
 public:
  DoubleArray();
  virtual ~DoubleArray();

  DoubleArray(const DoubleArray& from);

  inline DoubleArray& operator=(const DoubleArray& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DoubleArray(DoubleArray&& from) noexcept
    : DoubleArray() {
    *this = ::std::move(from);
  }

  inline DoubleArray& operator=(DoubleArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoubleArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoubleArray* internal_default_instance() {
    return reinterpret_cast<const DoubleArray*>(
               &_DoubleArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DoubleArray* other);
  friend void swap(DoubleArray& a, DoubleArray& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoubleArray* New() const final {
    return CreateMaybeMessage<DoubleArray>(nullptr);
  }

  DoubleArray* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DoubleArray>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DoubleArray& from);
  void MergeFrom(const DoubleArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::google::protobuf::RepeatedField< double >&
      values() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:query.DoubleArray)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2fquery_2eproto;
};
// -------------------------------------------------------------------

class Layer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:query.Layer) */ {
 public:
  Layer();
  virtual ~Layer();

  Layer(const Layer& from);

  inline Layer& operator=(const Layer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Layer(Layer&& from) noexcept
    : Layer() {
    *this = ::std::move(from);
  }

  inline Layer& operator=(Layer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Layer& default_instance();

  enum NullableNameCase {
    kNameNil = 1,
    kName = 2,
    NULLABLE_NAME_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Layer* internal_default_instance() {
    return reinterpret_cast<const Layer*>(
               &_Layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Layer* other);
  friend void swap(Layer& a, Layer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Layer* New() const final {
    return CreateMaybeMessage<Layer>(nullptr);
  }

  Layer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Layer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Layer& from);
  void MergeFrom(const Layer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Layer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .query.Node input = 3;
  bool has_input() const;
  void clear_input();
  static const int kInputFieldNumber = 3;
  const ::query::Node& input() const;
  ::query::Node* release_input();
  ::query::Node* mutable_input();
  void set_allocated_input(::query::Node* input);

  // bool name_nil = 1;
  private:
  bool has_name_nil() const;
  public:
  void clear_name_nil();
  static const int kNameNilFieldNumber = 1;
  bool name_nil() const;
  void set_name_nil(bool value);

  // string name = 2;
  private:
  bool has_name() const;
  public:
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  void clear_nullable_name();
  NullableNameCase nullable_name_case() const;
  // @@protoc_insertion_point(class_scope:query.Layer)
 private:
  class HasBitSetters;
  void set_has_name_nil();
  void set_has_name();

  inline bool has_nullable_name() const;
  inline void clear_has_nullable_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::query::Node* input_;
  union NullableNameUnion {
    NullableNameUnion() {}
    bool name_nil_;
    ::google::protobuf::internal::ArenaStringPtr name_;
  } nullable_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_query_2fquery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Node

// double cst = 1;
inline bool Node::has_cst() const {
  return val_case() == kCst;
}
inline void Node::set_has_cst() {
  _oneof_case_[0] = kCst;
}
inline void Node::clear_cst() {
  if (has_cst()) {
    val_.cst_ = 0;
    clear_has_val();
  }
}
inline double Node::cst() const {
  // @@protoc_insertion_point(field_get:query.Node.cst)
  if (has_cst()) {
    return val_.cst_;
  }
  return 0;
}
inline void Node::set_cst(double value) {
  if (!has_cst()) {
    clear_val();
    set_has_cst();
  }
  val_.cst_ = value;
  // @@protoc_insertion_point(field_set:query.Node.cst)
}

// .query.Leaf leaf = 2;
inline bool Node::has_leaf() const {
  return val_case() == kLeaf;
}
inline void Node::set_has_leaf() {
  _oneof_case_[0] = kLeaf;
}
inline void Node::clear_leaf() {
  if (has_leaf()) {
    delete val_.leaf_;
    clear_has_val();
  }
}
inline ::query::Leaf* Node::release_leaf() {
  // @@protoc_insertion_point(field_release:query.Node.leaf)
  if (has_leaf()) {
    clear_has_val();
      ::query::Leaf* temp = val_.leaf_;
    val_.leaf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::query::Leaf& Node::leaf() const {
  // @@protoc_insertion_point(field_get:query.Node.leaf)
  return has_leaf()
      ? *val_.leaf_
      : *reinterpret_cast< ::query::Leaf*>(&::query::_Leaf_default_instance_);
}
inline ::query::Leaf* Node::mutable_leaf() {
  if (!has_leaf()) {
    clear_val();
    set_has_leaf();
    val_.leaf_ = CreateMaybeMessage< ::query::Leaf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:query.Node.leaf)
  return val_.leaf_;
}

// .query.Operator op = 3;
inline bool Node::has_op() const {
  return val_case() == kOp;
}
inline void Node::set_has_op() {
  _oneof_case_[0] = kOp;
}
inline void Node::clear_op() {
  if (has_op()) {
    delete val_.op_;
    clear_has_val();
  }
}
inline ::query::Operator* Node::release_op() {
  // @@protoc_insertion_point(field_release:query.Node.op)
  if (has_op()) {
    clear_has_val();
      ::query::Operator* temp = val_.op_;
    val_.op_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::query::Operator& Node::op() const {
  // @@protoc_insertion_point(field_get:query.Node.op)
  return has_op()
      ? *val_.op_
      : *reinterpret_cast< ::query::Operator*>(&::query::_Operator_default_instance_);
}
inline ::query::Operator* Node::mutable_op() {
  if (!has_op()) {
    clear_val();
    set_has_op();
    val_.op_ = CreateMaybeMessage< ::query::Operator >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:query.Node.op)
  return val_.op_;
}

// string symb = 4;
inline bool Node::has_symb() const {
  return val_case() == kSymb;
}
inline void Node::set_has_symb() {
  _oneof_case_[0] = kSymb;
}
inline void Node::clear_symb() {
  if (has_symb()) {
    val_.symb_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_val();
  }
}
inline const ::std::string& Node::symb() const {
  // @@protoc_insertion_point(field_get:query.Node.symb)
  if (has_symb()) {
    return val_.symb_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Node::set_symb(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:query.Node.symb)
  if (!has_symb()) {
    clear_val();
    set_has_symb();
    val_.symb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  val_.symb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:query.Node.symb)
}
#if LANG_CXX11
inline void Node::set_symb(::std::string&& value) {
  // @@protoc_insertion_point(field_set:query.Node.symb)
  if (!has_symb()) {
    clear_val();
    set_has_symb();
    val_.symb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  val_.symb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:query.Node.symb)
}
#endif
inline void Node::set_symb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_symb()) {
    clear_val();
    set_has_symb();
    val_.symb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  val_.symb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:query.Node.symb)
}
inline void Node::set_symb(const char* value, size_t size) {
  if (!has_symb()) {
    clear_val();
    set_has_symb();
    val_.symb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  val_.symb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:query.Node.symb)
}
inline ::std::string* Node::mutable_symb() {
  if (!has_symb()) {
    clear_val();
    set_has_symb();
    val_.symb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:query.Node.symb)
  return val_.symb_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_symb() {
  // @@protoc_insertion_point(field_release:query.Node.symb)
  if (has_symb()) {
    clear_has_val();
    return val_.symb_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Node::set_allocated_symb(::std::string* symb) {
  if (has_val()) {
    clear_val();
  }
  if (symb != nullptr) {
    set_has_symb();
    val_.symb_.UnsafeSetDefault(symb);
  }
  // @@protoc_insertion_point(field_set_allocated:query.Node.symb)
}

inline bool Node::has_val() const {
  return val_case() != VAL_NOT_SET;
}
inline void Node::clear_has_val() {
  _oneof_case_[0] = VAL_NOT_SET;
}
inline Node::ValCase Node::val_case() const {
  return Node::ValCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Leaf

// bool label_nil = 1;
inline bool Leaf::has_label_nil() const {
  return nullable_label_case() == kLabelNil;
}
inline void Leaf::set_has_label_nil() {
  _oneof_case_[0] = kLabelNil;
}
inline void Leaf::clear_label_nil() {
  if (has_label_nil()) {
    nullable_label_.label_nil_ = false;
    clear_has_nullable_label();
  }
}
inline bool Leaf::label_nil() const {
  // @@protoc_insertion_point(field_get:query.Leaf.label_nil)
  if (has_label_nil()) {
    return nullable_label_.label_nil_;
  }
  return false;
}
inline void Leaf::set_label_nil(bool value) {
  if (!has_label_nil()) {
    clear_nullable_label();
    set_has_label_nil();
  }
  nullable_label_.label_nil_ = value;
  // @@protoc_insertion_point(field_set:query.Leaf.label_nil)
}

// string label = 2;
inline bool Leaf::has_label() const {
  return nullable_label_case() == kLabel;
}
inline void Leaf::set_has_label() {
  _oneof_case_[0] = kLabel;
}
inline void Leaf::clear_label() {
  if (has_label()) {
    nullable_label_.label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_nullable_label();
  }
}
inline const ::std::string& Leaf::label() const {
  // @@protoc_insertion_point(field_get:query.Leaf.label)
  if (has_label()) {
    return nullable_label_.label_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Leaf::set_label(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:query.Leaf.label)
  if (!has_label()) {
    clear_nullable_label();
    set_has_label();
    nullable_label_.label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_label_.label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:query.Leaf.label)
}
#if LANG_CXX11
inline void Leaf::set_label(::std::string&& value) {
  // @@protoc_insertion_point(field_set:query.Leaf.label)
  if (!has_label()) {
    clear_nullable_label();
    set_has_label();
    nullable_label_.label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_label_.label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:query.Leaf.label)
}
#endif
inline void Leaf::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_label()) {
    clear_nullable_label();
    set_has_label();
    nullable_label_.label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_label_.label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:query.Leaf.label)
}
inline void Leaf::set_label(const char* value, size_t size) {
  if (!has_label()) {
    clear_nullable_label();
    set_has_label();
    nullable_label_.label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_label_.label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:query.Leaf.label)
}
inline ::std::string* Leaf::mutable_label() {
  if (!has_label()) {
    clear_nullable_label();
    set_has_label();
    nullable_label_.label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:query.Leaf.label)
  return nullable_label_.label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Leaf::release_label() {
  // @@protoc_insertion_point(field_release:query.Leaf.label)
  if (has_label()) {
    clear_has_nullable_label();
    return nullable_label_.label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Leaf::set_allocated_label(::std::string* label) {
  if (has_nullable_label()) {
    clear_nullable_label();
  }
  if (label != nullptr) {
    set_has_label();
    nullable_label_.label_.UnsafeSetDefault(label);
  }
  // @@protoc_insertion_point(field_set_allocated:query.Leaf.label)
}

// bool dtype_nil = 3;
inline bool Leaf::has_dtype_nil() const {
  return nullable_dtype_case() == kDtypeNil;
}
inline void Leaf::set_has_dtype_nil() {
  _oneof_case_[1] = kDtypeNil;
}
inline void Leaf::clear_dtype_nil() {
  if (has_dtype_nil()) {
    nullable_dtype_.dtype_nil_ = false;
    clear_has_nullable_dtype();
  }
}
inline bool Leaf::dtype_nil() const {
  // @@protoc_insertion_point(field_get:query.Leaf.dtype_nil)
  if (has_dtype_nil()) {
    return nullable_dtype_.dtype_nil_;
  }
  return false;
}
inline void Leaf::set_dtype_nil(bool value) {
  if (!has_dtype_nil()) {
    clear_nullable_dtype();
    set_has_dtype_nil();
  }
  nullable_dtype_.dtype_nil_ = value;
  // @@protoc_insertion_point(field_set:query.Leaf.dtype_nil)
}

// string dtype = 4;
inline bool Leaf::has_dtype() const {
  return nullable_dtype_case() == kDtype;
}
inline void Leaf::set_has_dtype() {
  _oneof_case_[1] = kDtype;
}
inline void Leaf::clear_dtype() {
  if (has_dtype()) {
    nullable_dtype_.dtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_nullable_dtype();
  }
}
inline const ::std::string& Leaf::dtype() const {
  // @@protoc_insertion_point(field_get:query.Leaf.dtype)
  if (has_dtype()) {
    return nullable_dtype_.dtype_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Leaf::set_dtype(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:query.Leaf.dtype)
  if (!has_dtype()) {
    clear_nullable_dtype();
    set_has_dtype();
    nullable_dtype_.dtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_dtype_.dtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:query.Leaf.dtype)
}
#if LANG_CXX11
inline void Leaf::set_dtype(::std::string&& value) {
  // @@protoc_insertion_point(field_set:query.Leaf.dtype)
  if (!has_dtype()) {
    clear_nullable_dtype();
    set_has_dtype();
    nullable_dtype_.dtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_dtype_.dtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:query.Leaf.dtype)
}
#endif
inline void Leaf::set_dtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_dtype()) {
    clear_nullable_dtype();
    set_has_dtype();
    nullable_dtype_.dtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_dtype_.dtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:query.Leaf.dtype)
}
inline void Leaf::set_dtype(const char* value, size_t size) {
  if (!has_dtype()) {
    clear_nullable_dtype();
    set_has_dtype();
    nullable_dtype_.dtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_dtype_.dtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:query.Leaf.dtype)
}
inline ::std::string* Leaf::mutable_dtype() {
  if (!has_dtype()) {
    clear_nullable_dtype();
    set_has_dtype();
    nullable_dtype_.dtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:query.Leaf.dtype)
  return nullable_dtype_.dtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Leaf::release_dtype() {
  // @@protoc_insertion_point(field_release:query.Leaf.dtype)
  if (has_dtype()) {
    clear_has_nullable_dtype();
    return nullable_dtype_.dtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Leaf::set_allocated_dtype(::std::string* dtype) {
  if (has_nullable_dtype()) {
    clear_nullable_dtype();
  }
  if (dtype != nullptr) {
    set_has_dtype();
    nullable_dtype_.dtype_.UnsafeSetDefault(dtype);
  }
  // @@protoc_insertion_point(field_set_allocated:query.Leaf.dtype)
}

// repeated uint32 shape = 5;
inline int Leaf::shape_size() const {
  return shape_.size();
}
inline void Leaf::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::uint32 Leaf::shape(int index) const {
  // @@protoc_insertion_point(field_get:query.Leaf.shape)
  return shape_.Get(index);
}
inline void Leaf::set_shape(int index, ::google::protobuf::uint32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:query.Leaf.shape)
}
inline void Leaf::add_shape(::google::protobuf::uint32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:query.Leaf.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Leaf::shape() const {
  // @@protoc_insertion_point(field_list:query.Leaf.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Leaf::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:query.Leaf.shape)
  return &shape_;
}

// bool usage_nil = 6;
inline bool Leaf::has_usage_nil() const {
  return nullable_usage_case() == kUsageNil;
}
inline void Leaf::set_has_usage_nil() {
  _oneof_case_[2] = kUsageNil;
}
inline void Leaf::clear_usage_nil() {
  if (has_usage_nil()) {
    nullable_usage_.usage_nil_ = false;
    clear_has_nullable_usage();
  }
}
inline bool Leaf::usage_nil() const {
  // @@protoc_insertion_point(field_get:query.Leaf.usage_nil)
  if (has_usage_nil()) {
    return nullable_usage_.usage_nil_;
  }
  return false;
}
inline void Leaf::set_usage_nil(bool value) {
  if (!has_usage_nil()) {
    clear_nullable_usage();
    set_has_usage_nil();
  }
  nullable_usage_.usage_nil_ = value;
  // @@protoc_insertion_point(field_set:query.Leaf.usage_nil)
}

// string usage = 7;
inline bool Leaf::has_usage() const {
  return nullable_usage_case() == kUsage;
}
inline void Leaf::set_has_usage() {
  _oneof_case_[2] = kUsage;
}
inline void Leaf::clear_usage() {
  if (has_usage()) {
    nullable_usage_.usage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_nullable_usage();
  }
}
inline const ::std::string& Leaf::usage() const {
  // @@protoc_insertion_point(field_get:query.Leaf.usage)
  if (has_usage()) {
    return nullable_usage_.usage_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Leaf::set_usage(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:query.Leaf.usage)
  if (!has_usage()) {
    clear_nullable_usage();
    set_has_usage();
    nullable_usage_.usage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_usage_.usage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:query.Leaf.usage)
}
#if LANG_CXX11
inline void Leaf::set_usage(::std::string&& value) {
  // @@protoc_insertion_point(field_set:query.Leaf.usage)
  if (!has_usage()) {
    clear_nullable_usage();
    set_has_usage();
    nullable_usage_.usage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_usage_.usage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:query.Leaf.usage)
}
#endif
inline void Leaf::set_usage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_usage()) {
    clear_nullable_usage();
    set_has_usage();
    nullable_usage_.usage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_usage_.usage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:query.Leaf.usage)
}
inline void Leaf::set_usage(const char* value, size_t size) {
  if (!has_usage()) {
    clear_nullable_usage();
    set_has_usage();
    nullable_usage_.usage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_usage_.usage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:query.Leaf.usage)
}
inline ::std::string* Leaf::mutable_usage() {
  if (!has_usage()) {
    clear_nullable_usage();
    set_has_usage();
    nullable_usage_.usage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:query.Leaf.usage)
  return nullable_usage_.usage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Leaf::release_usage() {
  // @@protoc_insertion_point(field_release:query.Leaf.usage)
  if (has_usage()) {
    clear_has_nullable_usage();
    return nullable_usage_.usage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Leaf::set_allocated_usage(::std::string* usage) {
  if (has_nullable_usage()) {
    clear_nullable_usage();
  }
  if (usage != nullptr) {
    set_has_usage();
    nullable_usage_.usage_.UnsafeSetDefault(usage);
  }
  // @@protoc_insertion_point(field_set_allocated:query.Leaf.usage)
}

inline bool Leaf::has_nullable_label() const {
  return nullable_label_case() != NULLABLE_LABEL_NOT_SET;
}
inline void Leaf::clear_has_nullable_label() {
  _oneof_case_[0] = NULLABLE_LABEL_NOT_SET;
}
inline bool Leaf::has_nullable_dtype() const {
  return nullable_dtype_case() != NULLABLE_DTYPE_NOT_SET;
}
inline void Leaf::clear_has_nullable_dtype() {
  _oneof_case_[1] = NULLABLE_DTYPE_NOT_SET;
}
inline bool Leaf::has_nullable_usage() const {
  return nullable_usage_case() != NULLABLE_USAGE_NOT_SET;
}
inline void Leaf::clear_has_nullable_usage() {
  _oneof_case_[2] = NULLABLE_USAGE_NOT_SET;
}
inline Leaf::NullableLabelCase Leaf::nullable_label_case() const {
  return Leaf::NullableLabelCase(_oneof_case_[0]);
}
inline Leaf::NullableDtypeCase Leaf::nullable_dtype_case() const {
  return Leaf::NullableDtypeCase(_oneof_case_[1]);
}
inline Leaf::NullableUsageCase Leaf::nullable_usage_case() const {
  return Leaf::NullableUsageCase(_oneof_case_[2]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Operator

// string opname = 1;
inline void Operator::clear_opname() {
  opname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operator::opname() const {
  // @@protoc_insertion_point(field_get:query.Operator.opname)
  return opname_.GetNoArena();
}
inline void Operator::set_opname(const ::std::string& value) {
  
  opname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:query.Operator.opname)
}
#if LANG_CXX11
inline void Operator::set_opname(::std::string&& value) {
  
  opname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:query.Operator.opname)
}
#endif
inline void Operator::set_opname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  opname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:query.Operator.opname)
}
inline void Operator::set_opname(const char* value, size_t size) {
  
  opname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:query.Operator.opname)
}
inline ::std::string* Operator::mutable_opname() {
  
  // @@protoc_insertion_point(field_mutable:query.Operator.opname)
  return opname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operator::release_opname() {
  // @@protoc_insertion_point(field_release:query.Operator.opname)
  
  return opname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operator::set_allocated_opname(::std::string* opname) {
  if (opname != nullptr) {
    
  } else {
    
  }
  opname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opname);
  // @@protoc_insertion_point(field_set_allocated:query.Operator.opname)
}

// map<string, .query.Attribute> attrs = 2;
inline int Operator::attrs_size() const {
  return attrs_.size();
}
inline void Operator::clear_attrs() {
  attrs_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::query::Attribute >&
Operator::attrs() const {
  // @@protoc_insertion_point(field_map:query.Operator.attrs)
  return attrs_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::query::Attribute >*
Operator::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_map:query.Operator.attrs)
  return attrs_.MutableMap();
}

// repeated .query.Node args = 3;
inline int Operator::args_size() const {
  return args_.size();
}
inline void Operator::clear_args() {
  args_.Clear();
}
inline ::query::Node* Operator::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:query.Operator.args)
  return args_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::query::Node >*
Operator::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:query.Operator.args)
  return &args_;
}
inline const ::query::Node& Operator::args(int index) const {
  // @@protoc_insertion_point(field_get:query.Operator.args)
  return args_.Get(index);
}
inline ::query::Node* Operator::add_args() {
  // @@protoc_insertion_point(field_add:query.Operator.args)
  return args_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::query::Node >&
Operator::args() const {
  // @@protoc_insertion_point(field_list:query.Operator.args)
  return args_;
}

// bool capture_nil = 4;
inline bool Operator::has_capture_nil() const {
  return nullable_capture_case() == kCaptureNil;
}
inline void Operator::set_has_capture_nil() {
  _oneof_case_[0] = kCaptureNil;
}
inline void Operator::clear_capture_nil() {
  if (has_capture_nil()) {
    nullable_capture_.capture_nil_ = false;
    clear_has_nullable_capture();
  }
}
inline bool Operator::capture_nil() const {
  // @@protoc_insertion_point(field_get:query.Operator.capture_nil)
  if (has_capture_nil()) {
    return nullable_capture_.capture_nil_;
  }
  return false;
}
inline void Operator::set_capture_nil(bool value) {
  if (!has_capture_nil()) {
    clear_nullable_capture();
    set_has_capture_nil();
  }
  nullable_capture_.capture_nil_ = value;
  // @@protoc_insertion_point(field_set:query.Operator.capture_nil)
}

// string capture = 5;
inline bool Operator::has_capture() const {
  return nullable_capture_case() == kCapture;
}
inline void Operator::set_has_capture() {
  _oneof_case_[0] = kCapture;
}
inline void Operator::clear_capture() {
  if (has_capture()) {
    nullable_capture_.capture_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_nullable_capture();
  }
}
inline const ::std::string& Operator::capture() const {
  // @@protoc_insertion_point(field_get:query.Operator.capture)
  if (has_capture()) {
    return nullable_capture_.capture_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Operator::set_capture(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:query.Operator.capture)
  if (!has_capture()) {
    clear_nullable_capture();
    set_has_capture();
    nullable_capture_.capture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_capture_.capture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:query.Operator.capture)
}
#if LANG_CXX11
inline void Operator::set_capture(::std::string&& value) {
  // @@protoc_insertion_point(field_set:query.Operator.capture)
  if (!has_capture()) {
    clear_nullable_capture();
    set_has_capture();
    nullable_capture_.capture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_capture_.capture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:query.Operator.capture)
}
#endif
inline void Operator::set_capture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_capture()) {
    clear_nullable_capture();
    set_has_capture();
    nullable_capture_.capture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_capture_.capture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:query.Operator.capture)
}
inline void Operator::set_capture(const char* value, size_t size) {
  if (!has_capture()) {
    clear_nullable_capture();
    set_has_capture();
    nullable_capture_.capture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_capture_.capture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:query.Operator.capture)
}
inline ::std::string* Operator::mutable_capture() {
  if (!has_capture()) {
    clear_nullable_capture();
    set_has_capture();
    nullable_capture_.capture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:query.Operator.capture)
  return nullable_capture_.capture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operator::release_capture() {
  // @@protoc_insertion_point(field_release:query.Operator.capture)
  if (has_capture()) {
    clear_has_nullable_capture();
    return nullable_capture_.capture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Operator::set_allocated_capture(::std::string* capture) {
  if (has_nullable_capture()) {
    clear_nullable_capture();
  }
  if (capture != nullptr) {
    set_has_capture();
    nullable_capture_.capture_.UnsafeSetDefault(capture);
  }
  // @@protoc_insertion_point(field_set_allocated:query.Operator.capture)
}

inline bool Operator::has_nullable_capture() const {
  return nullable_capture_case() != NULLABLE_CAPTURE_NOT_SET;
}
inline void Operator::clear_has_nullable_capture() {
  _oneof_case_[0] = NULLABLE_CAPTURE_NOT_SET;
}
inline Operator::NullableCaptureCase Operator::nullable_capture_case() const {
  return Operator::NullableCaptureCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Attribute

// int64 inum = 1;
inline bool Attribute::has_inum() const {
  return attr_case() == kInum;
}
inline void Attribute::set_has_inum() {
  _oneof_case_[0] = kInum;
}
inline void Attribute::clear_inum() {
  if (has_inum()) {
    attr_.inum_ = PROTOBUF_LONGLONG(0);
    clear_has_attr();
  }
}
inline ::google::protobuf::int64 Attribute::inum() const {
  // @@protoc_insertion_point(field_get:query.Attribute.inum)
  if (has_inum()) {
    return attr_.inum_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Attribute::set_inum(::google::protobuf::int64 value) {
  if (!has_inum()) {
    clear_attr();
    set_has_inum();
  }
  attr_.inum_ = value;
  // @@protoc_insertion_point(field_set:query.Attribute.inum)
}

// double dnum = 2;
inline bool Attribute::has_dnum() const {
  return attr_case() == kDnum;
}
inline void Attribute::set_has_dnum() {
  _oneof_case_[0] = kDnum;
}
inline void Attribute::clear_dnum() {
  if (has_dnum()) {
    attr_.dnum_ = 0;
    clear_has_attr();
  }
}
inline double Attribute::dnum() const {
  // @@protoc_insertion_point(field_get:query.Attribute.dnum)
  if (has_dnum()) {
    return attr_.dnum_;
  }
  return 0;
}
inline void Attribute::set_dnum(double value) {
  if (!has_dnum()) {
    clear_attr();
    set_has_dnum();
  }
  attr_.dnum_ = value;
  // @@protoc_insertion_point(field_set:query.Attribute.dnum)
}

// .query.IntArray iarr = 3;
inline bool Attribute::has_iarr() const {
  return attr_case() == kIarr;
}
inline void Attribute::set_has_iarr() {
  _oneof_case_[0] = kIarr;
}
inline void Attribute::clear_iarr() {
  if (has_iarr()) {
    delete attr_.iarr_;
    clear_has_attr();
  }
}
inline ::query::IntArray* Attribute::release_iarr() {
  // @@protoc_insertion_point(field_release:query.Attribute.iarr)
  if (has_iarr()) {
    clear_has_attr();
      ::query::IntArray* temp = attr_.iarr_;
    attr_.iarr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::query::IntArray& Attribute::iarr() const {
  // @@protoc_insertion_point(field_get:query.Attribute.iarr)
  return has_iarr()
      ? *attr_.iarr_
      : *reinterpret_cast< ::query::IntArray*>(&::query::_IntArray_default_instance_);
}
inline ::query::IntArray* Attribute::mutable_iarr() {
  if (!has_iarr()) {
    clear_attr();
    set_has_iarr();
    attr_.iarr_ = CreateMaybeMessage< ::query::IntArray >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:query.Attribute.iarr)
  return attr_.iarr_;
}

// .query.DoubleArray darr = 4;
inline bool Attribute::has_darr() const {
  return attr_case() == kDarr;
}
inline void Attribute::set_has_darr() {
  _oneof_case_[0] = kDarr;
}
inline void Attribute::clear_darr() {
  if (has_darr()) {
    delete attr_.darr_;
    clear_has_attr();
  }
}
inline ::query::DoubleArray* Attribute::release_darr() {
  // @@protoc_insertion_point(field_release:query.Attribute.darr)
  if (has_darr()) {
    clear_has_attr();
      ::query::DoubleArray* temp = attr_.darr_;
    attr_.darr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::query::DoubleArray& Attribute::darr() const {
  // @@protoc_insertion_point(field_get:query.Attribute.darr)
  return has_darr()
      ? *attr_.darr_
      : *reinterpret_cast< ::query::DoubleArray*>(&::query::_DoubleArray_default_instance_);
}
inline ::query::DoubleArray* Attribute::mutable_darr() {
  if (!has_darr()) {
    clear_attr();
    set_has_darr();
    attr_.darr_ = CreateMaybeMessage< ::query::DoubleArray >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:query.Attribute.darr)
  return attr_.darr_;
}

// string str = 5;
inline bool Attribute::has_str() const {
  return attr_case() == kStr;
}
inline void Attribute::set_has_str() {
  _oneof_case_[0] = kStr;
}
inline void Attribute::clear_str() {
  if (has_str()) {
    attr_.str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_attr();
  }
}
inline const ::std::string& Attribute::str() const {
  // @@protoc_insertion_point(field_get:query.Attribute.str)
  if (has_str()) {
    return attr_.str_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Attribute::set_str(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:query.Attribute.str)
  if (!has_str()) {
    clear_attr();
    set_has_str();
    attr_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  attr_.str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:query.Attribute.str)
}
#if LANG_CXX11
inline void Attribute::set_str(::std::string&& value) {
  // @@protoc_insertion_point(field_set:query.Attribute.str)
  if (!has_str()) {
    clear_attr();
    set_has_str();
    attr_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  attr_.str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:query.Attribute.str)
}
#endif
inline void Attribute::set_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_str()) {
    clear_attr();
    set_has_str();
    attr_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  attr_.str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:query.Attribute.str)
}
inline void Attribute::set_str(const char* value, size_t size) {
  if (!has_str()) {
    clear_attr();
    set_has_str();
    attr_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  attr_.str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:query.Attribute.str)
}
inline ::std::string* Attribute::mutable_str() {
  if (!has_str()) {
    clear_attr();
    set_has_str();
    attr_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:query.Attribute.str)
  return attr_.str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attribute::release_str() {
  // @@protoc_insertion_point(field_release:query.Attribute.str)
  if (has_str()) {
    clear_has_attr();
    return attr_.str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Attribute::set_allocated_str(::std::string* str) {
  if (has_attr()) {
    clear_attr();
  }
  if (str != nullptr) {
    set_has_str();
    attr_.str_.UnsafeSetDefault(str);
  }
  // @@protoc_insertion_point(field_set_allocated:query.Attribute.str)
}

// .query.Node node = 6;
inline bool Attribute::has_node() const {
  return attr_case() == kNode;
}
inline void Attribute::set_has_node() {
  _oneof_case_[0] = kNode;
}
inline void Attribute::clear_node() {
  if (has_node()) {
    delete attr_.node_;
    clear_has_attr();
  }
}
inline ::query::Node* Attribute::release_node() {
  // @@protoc_insertion_point(field_release:query.Attribute.node)
  if (has_node()) {
    clear_has_attr();
      ::query::Node* temp = attr_.node_;
    attr_.node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::query::Node& Attribute::node() const {
  // @@protoc_insertion_point(field_get:query.Attribute.node)
  return has_node()
      ? *attr_.node_
      : *reinterpret_cast< ::query::Node*>(&::query::_Node_default_instance_);
}
inline ::query::Node* Attribute::mutable_node() {
  if (!has_node()) {
    clear_attr();
    set_has_node();
    attr_.node_ = CreateMaybeMessage< ::query::Node >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:query.Attribute.node)
  return attr_.node_;
}

// .query.Layer layer = 7;
inline bool Attribute::has_layer() const {
  return attr_case() == kLayer;
}
inline void Attribute::set_has_layer() {
  _oneof_case_[0] = kLayer;
}
inline void Attribute::clear_layer() {
  if (has_layer()) {
    delete attr_.layer_;
    clear_has_attr();
  }
}
inline ::query::Layer* Attribute::release_layer() {
  // @@protoc_insertion_point(field_release:query.Attribute.layer)
  if (has_layer()) {
    clear_has_attr();
      ::query::Layer* temp = attr_.layer_;
    attr_.layer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::query::Layer& Attribute::layer() const {
  // @@protoc_insertion_point(field_get:query.Attribute.layer)
  return has_layer()
      ? *attr_.layer_
      : *reinterpret_cast< ::query::Layer*>(&::query::_Layer_default_instance_);
}
inline ::query::Layer* Attribute::mutable_layer() {
  if (!has_layer()) {
    clear_attr();
    set_has_layer();
    attr_.layer_ = CreateMaybeMessage< ::query::Layer >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:query.Attribute.layer)
  return attr_.layer_;
}

inline bool Attribute::has_attr() const {
  return attr_case() != ATTR_NOT_SET;
}
inline void Attribute::clear_has_attr() {
  _oneof_case_[0] = ATTR_NOT_SET;
}
inline Attribute::AttrCase Attribute::attr_case() const {
  return Attribute::AttrCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// IntArray

// repeated int64 values = 1;
inline int IntArray::values_size() const {
  return values_.size();
}
inline void IntArray::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::int64 IntArray::values(int index) const {
  // @@protoc_insertion_point(field_get:query.IntArray.values)
  return values_.Get(index);
}
inline void IntArray::set_values(int index, ::google::protobuf::int64 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:query.IntArray.values)
}
inline void IntArray::add_values(::google::protobuf::int64 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:query.IntArray.values)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
IntArray::values() const {
  // @@protoc_insertion_point(field_list:query.IntArray.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
IntArray::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:query.IntArray.values)
  return &values_;
}

// -------------------------------------------------------------------

// DoubleArray

// repeated double values = 1;
inline int DoubleArray::values_size() const {
  return values_.size();
}
inline void DoubleArray::clear_values() {
  values_.Clear();
}
inline double DoubleArray::values(int index) const {
  // @@protoc_insertion_point(field_get:query.DoubleArray.values)
  return values_.Get(index);
}
inline void DoubleArray::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:query.DoubleArray.values)
}
inline void DoubleArray::add_values(double value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:query.DoubleArray.values)
}
inline const ::google::protobuf::RepeatedField< double >&
DoubleArray::values() const {
  // @@protoc_insertion_point(field_list:query.DoubleArray.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< double >*
DoubleArray::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:query.DoubleArray.values)
  return &values_;
}

// -------------------------------------------------------------------

// Layer

// bool name_nil = 1;
inline bool Layer::has_name_nil() const {
  return nullable_name_case() == kNameNil;
}
inline void Layer::set_has_name_nil() {
  _oneof_case_[0] = kNameNil;
}
inline void Layer::clear_name_nil() {
  if (has_name_nil()) {
    nullable_name_.name_nil_ = false;
    clear_has_nullable_name();
  }
}
inline bool Layer::name_nil() const {
  // @@protoc_insertion_point(field_get:query.Layer.name_nil)
  if (has_name_nil()) {
    return nullable_name_.name_nil_;
  }
  return false;
}
inline void Layer::set_name_nil(bool value) {
  if (!has_name_nil()) {
    clear_nullable_name();
    set_has_name_nil();
  }
  nullable_name_.name_nil_ = value;
  // @@protoc_insertion_point(field_set:query.Layer.name_nil)
}

// string name = 2;
inline bool Layer::has_name() const {
  return nullable_name_case() == kName;
}
inline void Layer::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void Layer::clear_name() {
  if (has_name()) {
    nullable_name_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_nullable_name();
  }
}
inline const ::std::string& Layer::name() const {
  // @@protoc_insertion_point(field_get:query.Layer.name)
  if (has_name()) {
    return nullable_name_.name_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Layer::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:query.Layer.name)
  if (!has_name()) {
    clear_nullable_name();
    set_has_name();
    nullable_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:query.Layer.name)
}
#if LANG_CXX11
inline void Layer::set_name(::std::string&& value) {
  // @@protoc_insertion_point(field_set:query.Layer.name)
  if (!has_name()) {
    clear_nullable_name();
    set_has_name();
    nullable_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:query.Layer.name)
}
#endif
inline void Layer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_name()) {
    clear_nullable_name();
    set_has_name();
    nullable_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:query.Layer.name)
}
inline void Layer::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_nullable_name();
    set_has_name();
    nullable_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  nullable_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:query.Layer.name)
}
inline ::std::string* Layer::mutable_name() {
  if (!has_name()) {
    clear_nullable_name();
    set_has_name();
    nullable_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:query.Layer.name)
  return nullable_name_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Layer::release_name() {
  // @@protoc_insertion_point(field_release:query.Layer.name)
  if (has_name()) {
    clear_has_nullable_name();
    return nullable_name_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Layer::set_allocated_name(::std::string* name) {
  if (has_nullable_name()) {
    clear_nullable_name();
  }
  if (name != nullptr) {
    set_has_name();
    nullable_name_.name_.UnsafeSetDefault(name);
  }
  // @@protoc_insertion_point(field_set_allocated:query.Layer.name)
}

// .query.Node input = 3;
inline bool Layer::has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline void Layer::clear_input() {
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::query::Node& Layer::input() const {
  const ::query::Node* p = input_;
  // @@protoc_insertion_point(field_get:query.Layer.input)
  return p != nullptr ? *p : *reinterpret_cast<const ::query::Node*>(
      &::query::_Node_default_instance_);
}
inline ::query::Node* Layer::release_input() {
  // @@protoc_insertion_point(field_release:query.Layer.input)
  
  ::query::Node* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::query::Node* Layer::mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::query::Node>(GetArenaNoVirtual());
    input_ = p;
  }
  // @@protoc_insertion_point(field_mutable:query.Layer.input)
  return input_;
}
inline void Layer::set_allocated_input(::query::Node* input) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:query.Layer.input)
}

inline bool Layer::has_nullable_name() const {
  return nullable_name_case() != NULLABLE_NAME_NOT_SET;
}
inline void Layer::clear_has_nullable_name() {
  _oneof_case_[0] = NULLABLE_NAME_NOT_SET;
}
inline Layer::NullableNameCase Layer::nullable_name_case() const {
  return Layer::NullableNameCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace query

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_query_2fquery_2eproto
