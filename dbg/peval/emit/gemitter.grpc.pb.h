// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dbg/peval/emit/gemitter.proto
#ifndef GRPC_dbg_2fpeval_2femit_2fgemitter_2eproto__INCLUDED
#define GRPC_dbg_2fpeval_2femit_2fgemitter_2eproto__INCLUDED

#include "dbg/peval/emit/gemitter.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace gemitter {

class GraphEmitter final {
 public:
  static constexpr char const* service_full_name() {
    return "gemitter.GraphEmitter";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Liveness probe: no timeout means host is reachable
    virtual ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::gemitter::Empty& request, ::gemitter::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemitter::Empty>> AsyncHealthCheck(::grpc::ClientContext* context, const ::gemitter::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemitter::Empty>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemitter::Empty>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::gemitter::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemitter::Empty>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    // Create uniquely identified graph
    virtual ::grpc::Status CreateModel(::grpc::ClientContext* context, const ::gemitter::CreateModelRequest& request, ::gemitter::CreateModelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemitter::CreateModelResponse>> AsyncCreateModel(::grpc::ClientContext* context, const ::gemitter::CreateModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemitter::CreateModelResponse>>(AsyncCreateModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemitter::CreateModelResponse>> PrepareAsyncCreateModel(::grpc::ClientContext* context, const ::gemitter::CreateModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemitter::CreateModelResponse>>(PrepareAsyncCreateModelRaw(context, request, cq));
    }
    // Update tensor/node data in specified graph
    std::unique_ptr< ::grpc::ClientWriterInterface< ::gemitter::UpdateNodeDataRequest>> UpdateNodeData(::grpc::ClientContext* context, ::gemitter::UpdateNodeDataResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::gemitter::UpdateNodeDataRequest>>(UpdateNodeDataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::gemitter::UpdateNodeDataRequest>> AsyncUpdateNodeData(::grpc::ClientContext* context, ::gemitter::UpdateNodeDataResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::gemitter::UpdateNodeDataRequest>>(AsyncUpdateNodeDataRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::gemitter::UpdateNodeDataRequest>> PrepareAsyncUpdateNodeData(::grpc::ClientContext* context, ::gemitter::UpdateNodeDataResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::gemitter::UpdateNodeDataRequest>>(PrepareAsyncUpdateNodeDataRaw(context, response, cq));
    }
    // Delete existing graph
    virtual ::grpc::Status DeleteModel(::grpc::ClientContext* context, const ::gemitter::DeleteModelRequest& request, ::gemitter::DeleteModelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemitter::DeleteModelResponse>> AsyncDeleteModel(::grpc::ClientContext* context, const ::gemitter::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemitter::DeleteModelResponse>>(AsyncDeleteModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemitter::DeleteModelResponse>> PrepareAsyncDeleteModel(::grpc::ClientContext* context, const ::gemitter::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemitter::DeleteModelResponse>>(PrepareAsyncDeleteModelRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Liveness probe: no timeout means host is reachable
      virtual void HealthCheck(::grpc::ClientContext* context, const ::gemitter::Empty* request, ::gemitter::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HealthCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemitter::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HealthCheck(::grpc::ClientContext* context, const ::gemitter::Empty* request, ::gemitter::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void HealthCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemitter::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Create uniquely identified graph
      virtual void CreateModel(::grpc::ClientContext* context, const ::gemitter::CreateModelRequest* request, ::gemitter::CreateModelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemitter::CreateModelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateModel(::grpc::ClientContext* context, const ::gemitter::CreateModelRequest* request, ::gemitter::CreateModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemitter::CreateModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Update tensor/node data in specified graph
      virtual void UpdateNodeData(::grpc::ClientContext* context, ::gemitter::UpdateNodeDataResponse* response, ::grpc::experimental::ClientWriteReactor< ::gemitter::UpdateNodeDataRequest>* reactor) = 0;
      // Delete existing graph
      virtual void DeleteModel(::grpc::ClientContext* context, const ::gemitter::DeleteModelRequest* request, ::gemitter::DeleteModelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemitter::DeleteModelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteModel(::grpc::ClientContext* context, const ::gemitter::DeleteModelRequest* request, ::gemitter::DeleteModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemitter::DeleteModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gemitter::Empty>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::gemitter::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gemitter::Empty>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::gemitter::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gemitter::CreateModelResponse>* AsyncCreateModelRaw(::grpc::ClientContext* context, const ::gemitter::CreateModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gemitter::CreateModelResponse>* PrepareAsyncCreateModelRaw(::grpc::ClientContext* context, const ::gemitter::CreateModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::gemitter::UpdateNodeDataRequest>* UpdateNodeDataRaw(::grpc::ClientContext* context, ::gemitter::UpdateNodeDataResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::gemitter::UpdateNodeDataRequest>* AsyncUpdateNodeDataRaw(::grpc::ClientContext* context, ::gemitter::UpdateNodeDataResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::gemitter::UpdateNodeDataRequest>* PrepareAsyncUpdateNodeDataRaw(::grpc::ClientContext* context, ::gemitter::UpdateNodeDataResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gemitter::DeleteModelResponse>* AsyncDeleteModelRaw(::grpc::ClientContext* context, const ::gemitter::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gemitter::DeleteModelResponse>* PrepareAsyncDeleteModelRaw(::grpc::ClientContext* context, const ::gemitter::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::gemitter::Empty& request, ::gemitter::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemitter::Empty>> AsyncHealthCheck(::grpc::ClientContext* context, const ::gemitter::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemitter::Empty>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemitter::Empty>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::gemitter::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemitter::Empty>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    ::grpc::Status CreateModel(::grpc::ClientContext* context, const ::gemitter::CreateModelRequest& request, ::gemitter::CreateModelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemitter::CreateModelResponse>> AsyncCreateModel(::grpc::ClientContext* context, const ::gemitter::CreateModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemitter::CreateModelResponse>>(AsyncCreateModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemitter::CreateModelResponse>> PrepareAsyncCreateModel(::grpc::ClientContext* context, const ::gemitter::CreateModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemitter::CreateModelResponse>>(PrepareAsyncCreateModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::gemitter::UpdateNodeDataRequest>> UpdateNodeData(::grpc::ClientContext* context, ::gemitter::UpdateNodeDataResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::gemitter::UpdateNodeDataRequest>>(UpdateNodeDataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::gemitter::UpdateNodeDataRequest>> AsyncUpdateNodeData(::grpc::ClientContext* context, ::gemitter::UpdateNodeDataResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::gemitter::UpdateNodeDataRequest>>(AsyncUpdateNodeDataRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::gemitter::UpdateNodeDataRequest>> PrepareAsyncUpdateNodeData(::grpc::ClientContext* context, ::gemitter::UpdateNodeDataResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::gemitter::UpdateNodeDataRequest>>(PrepareAsyncUpdateNodeDataRaw(context, response, cq));
    }
    ::grpc::Status DeleteModel(::grpc::ClientContext* context, const ::gemitter::DeleteModelRequest& request, ::gemitter::DeleteModelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemitter::DeleteModelResponse>> AsyncDeleteModel(::grpc::ClientContext* context, const ::gemitter::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemitter::DeleteModelResponse>>(AsyncDeleteModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemitter::DeleteModelResponse>> PrepareAsyncDeleteModel(::grpc::ClientContext* context, const ::gemitter::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemitter::DeleteModelResponse>>(PrepareAsyncDeleteModelRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void HealthCheck(::grpc::ClientContext* context, const ::gemitter::Empty* request, ::gemitter::Empty* response, std::function<void(::grpc::Status)>) override;
      void HealthCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemitter::Empty* response, std::function<void(::grpc::Status)>) override;
      void HealthCheck(::grpc::ClientContext* context, const ::gemitter::Empty* request, ::gemitter::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void HealthCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemitter::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateModel(::grpc::ClientContext* context, const ::gemitter::CreateModelRequest* request, ::gemitter::CreateModelResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemitter::CreateModelResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateModel(::grpc::ClientContext* context, const ::gemitter::CreateModelRequest* request, ::gemitter::CreateModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemitter::CreateModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateNodeData(::grpc::ClientContext* context, ::gemitter::UpdateNodeDataResponse* response, ::grpc::experimental::ClientWriteReactor< ::gemitter::UpdateNodeDataRequest>* reactor) override;
      void DeleteModel(::grpc::ClientContext* context, const ::gemitter::DeleteModelRequest* request, ::gemitter::DeleteModelResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemitter::DeleteModelResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteModel(::grpc::ClientContext* context, const ::gemitter::DeleteModelRequest* request, ::gemitter::DeleteModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemitter::DeleteModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::gemitter::Empty>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::gemitter::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gemitter::Empty>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::gemitter::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gemitter::CreateModelResponse>* AsyncCreateModelRaw(::grpc::ClientContext* context, const ::gemitter::CreateModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gemitter::CreateModelResponse>* PrepareAsyncCreateModelRaw(::grpc::ClientContext* context, const ::gemitter::CreateModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::gemitter::UpdateNodeDataRequest>* UpdateNodeDataRaw(::grpc::ClientContext* context, ::gemitter::UpdateNodeDataResponse* response) override;
    ::grpc::ClientAsyncWriter< ::gemitter::UpdateNodeDataRequest>* AsyncUpdateNodeDataRaw(::grpc::ClientContext* context, ::gemitter::UpdateNodeDataResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::gemitter::UpdateNodeDataRequest>* PrepareAsyncUpdateNodeDataRaw(::grpc::ClientContext* context, ::gemitter::UpdateNodeDataResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gemitter::DeleteModelResponse>* AsyncDeleteModelRaw(::grpc::ClientContext* context, const ::gemitter::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gemitter::DeleteModelResponse>* PrepareAsyncDeleteModelRaw(::grpc::ClientContext* context, const ::gemitter::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_HealthCheck_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateModel_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateNodeData_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteModel_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Liveness probe: no timeout means host is reachable
    virtual ::grpc::Status HealthCheck(::grpc::ServerContext* context, const ::gemitter::Empty* request, ::gemitter::Empty* response);
    // Create uniquely identified graph
    virtual ::grpc::Status CreateModel(::grpc::ServerContext* context, const ::gemitter::CreateModelRequest* request, ::gemitter::CreateModelResponse* response);
    // Update tensor/node data in specified graph
    virtual ::grpc::Status UpdateNodeData(::grpc::ServerContext* context, ::grpc::ServerReader< ::gemitter::UpdateNodeDataRequest>* reader, ::gemitter::UpdateNodeDataResponse* response);
    // Delete existing graph
    virtual ::grpc::Status DeleteModel(::grpc::ServerContext* context, const ::gemitter::DeleteModelRequest* request, ::gemitter::DeleteModelResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HealthCheck() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::gemitter::Empty* /*request*/, ::gemitter::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::gemitter::Empty* request, ::grpc::ServerAsyncResponseWriter< ::gemitter::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateModel() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateModel(::grpc::ServerContext* /*context*/, const ::gemitter::CreateModelRequest* /*request*/, ::gemitter::CreateModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateModel(::grpc::ServerContext* context, ::gemitter::CreateModelRequest* request, ::grpc::ServerAsyncResponseWriter< ::gemitter::CreateModelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateNodeData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateNodeData() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateNodeData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNodeData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gemitter::UpdateNodeDataRequest>* /*reader*/, ::gemitter::UpdateNodeDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNodeData(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::gemitter::UpdateNodeDataResponse, ::gemitter::UpdateNodeDataRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteModel() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* /*context*/, const ::gemitter::DeleteModelRequest* /*request*/, ::gemitter::DeleteModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteModel(::grpc::ServerContext* context, ::gemitter::DeleteModelRequest* request, ::grpc::ServerAsyncResponseWriter< ::gemitter::DeleteModelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_HealthCheck<WithAsyncMethod_CreateModel<WithAsyncMethod_UpdateNodeData<WithAsyncMethod_DeleteModel<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_HealthCheck() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::gemitter::Empty, ::gemitter::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::gemitter::Empty* request,
                 ::gemitter::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->HealthCheck(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_HealthCheck(
        ::grpc::experimental::MessageAllocator< ::gemitter::Empty, ::gemitter::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::gemitter::Empty, ::gemitter::Empty>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::gemitter::Empty* /*request*/, ::gemitter::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void HealthCheck(::grpc::ServerContext* /*context*/, const ::gemitter::Empty* /*request*/, ::gemitter::Empty* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateModel() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::gemitter::CreateModelRequest, ::gemitter::CreateModelResponse>(
          [this](::grpc::ServerContext* context,
                 const ::gemitter::CreateModelRequest* request,
                 ::gemitter::CreateModelResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateModel(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateModel(
        ::grpc::experimental::MessageAllocator< ::gemitter::CreateModelRequest, ::gemitter::CreateModelResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::gemitter::CreateModelRequest, ::gemitter::CreateModelResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateModel(::grpc::ServerContext* /*context*/, const ::gemitter::CreateModelRequest* /*request*/, ::gemitter::CreateModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateModel(::grpc::ServerContext* /*context*/, const ::gemitter::CreateModelRequest* /*request*/, ::gemitter::CreateModelResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateNodeData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateNodeData() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::gemitter::UpdateNodeDataRequest, ::gemitter::UpdateNodeDataResponse>(
          [this] { return this->UpdateNodeData(); }));
    }
    ~ExperimentalWithCallbackMethod_UpdateNodeData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNodeData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gemitter::UpdateNodeDataRequest>* /*reader*/, ::gemitter::UpdateNodeDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::gemitter::UpdateNodeDataRequest, ::gemitter::UpdateNodeDataResponse>* UpdateNodeData() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::gemitter::UpdateNodeDataRequest, ::gemitter::UpdateNodeDataResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteModel() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::gemitter::DeleteModelRequest, ::gemitter::DeleteModelResponse>(
          [this](::grpc::ServerContext* context,
                 const ::gemitter::DeleteModelRequest* request,
                 ::gemitter::DeleteModelResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeleteModel(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DeleteModel(
        ::grpc::experimental::MessageAllocator< ::gemitter::DeleteModelRequest, ::gemitter::DeleteModelResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::gemitter::DeleteModelRequest, ::gemitter::DeleteModelResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* /*context*/, const ::gemitter::DeleteModelRequest* /*request*/, ::gemitter::DeleteModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteModel(::grpc::ServerContext* /*context*/, const ::gemitter::DeleteModelRequest* /*request*/, ::gemitter::DeleteModelResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_HealthCheck<ExperimentalWithCallbackMethod_CreateModel<ExperimentalWithCallbackMethod_UpdateNodeData<ExperimentalWithCallbackMethod_DeleteModel<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HealthCheck() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::gemitter::Empty* /*request*/, ::gemitter::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateModel() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateModel(::grpc::ServerContext* /*context*/, const ::gemitter::CreateModelRequest* /*request*/, ::gemitter::CreateModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateNodeData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateNodeData() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateNodeData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNodeData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gemitter::UpdateNodeDataRequest>* /*reader*/, ::gemitter::UpdateNodeDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteModel() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* /*context*/, const ::gemitter::DeleteModelRequest* /*request*/, ::gemitter::DeleteModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::gemitter::Empty* /*request*/, ::gemitter::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateModel() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateModel(::grpc::ServerContext* /*context*/, const ::gemitter::CreateModelRequest* /*request*/, ::gemitter::CreateModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateNodeData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateNodeData() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateNodeData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNodeData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gemitter::UpdateNodeDataRequest>* /*reader*/, ::gemitter::UpdateNodeDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNodeData(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteModel() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* /*context*/, const ::gemitter::DeleteModelRequest* /*request*/, ::gemitter::DeleteModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_HealthCheck() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->HealthCheck(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::gemitter::Empty* /*request*/, ::gemitter::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void HealthCheck(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateModel() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateModel(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateModel(::grpc::ServerContext* /*context*/, const ::gemitter::CreateModelRequest* /*request*/, ::gemitter::CreateModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateModel(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateNodeData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateNodeData() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->UpdateNodeData(); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateNodeData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNodeData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::gemitter::UpdateNodeDataRequest>* /*reader*/, ::gemitter::UpdateNodeDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* UpdateNodeData() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteModel() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeleteModel(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* /*context*/, const ::gemitter::DeleteModelRequest* /*request*/, ::gemitter::DeleteModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteModel(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HealthCheck() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::gemitter::Empty, ::gemitter::Empty>(std::bind(&WithStreamedUnaryMethod_HealthCheck<BaseClass>::StreamedHealthCheck, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::gemitter::Empty* /*request*/, ::gemitter::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHealthCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gemitter::Empty,::gemitter::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateModel() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::gemitter::CreateModelRequest, ::gemitter::CreateModelResponse>(std::bind(&WithStreamedUnaryMethod_CreateModel<BaseClass>::StreamedCreateModel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateModel(::grpc::ServerContext* /*context*/, const ::gemitter::CreateModelRequest* /*request*/, ::gemitter::CreateModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateModel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gemitter::CreateModelRequest,::gemitter::CreateModelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteModel() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::gemitter::DeleteModelRequest, ::gemitter::DeleteModelResponse>(std::bind(&WithStreamedUnaryMethod_DeleteModel<BaseClass>::StreamedDeleteModel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* /*context*/, const ::gemitter::DeleteModelRequest* /*request*/, ::gemitter::DeleteModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteModel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gemitter::DeleteModelRequest,::gemitter::DeleteModelResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_HealthCheck<WithStreamedUnaryMethod_CreateModel<WithStreamedUnaryMethod_DeleteModel<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_HealthCheck<WithStreamedUnaryMethod_CreateModel<WithStreamedUnaryMethod_DeleteModel<Service > > > StreamedService;
};

}  // namespace gemitter


#endif  // GRPC_dbg_2fpeval_2femit_2fgemitter_2eproto__INCLUDED
