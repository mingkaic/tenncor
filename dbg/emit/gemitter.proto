syntax = "proto3";

import "onnx/onnx.proto";

package gemitter;

// ======== GENERAL MESSAGE OBJECTS ========

message ModelPayload {
    string model_id = 1;

    onnx.ModelProto model = 2;
}

message NodePayload {
    string model_id = 1;

    string node_id = 2;

    repeated float data = 3;
}

enum Status {
    OK = 0;
    BAD_INPUT = 1; // basically 400's error
    INTERNAL_ERR = 2; // basically 500's error
    UNKNOWN = 3; // something bad
}

// ======== REQUEST + RESPONSE MESSAGES ========

message Empty {}

message CreateModelRequest {
    ModelPayload payload = 1;
}

message CreateModelResponse {
    Status status = 1;

    string message = 2;
}

message UpdateNodeDataRequest {
    NodePayload payload = 1;
}

message UpdateNodeDataResponse {
    Status status = 1;

    string message = 2;
}

message DeleteModelRequest {
    string model_id = 1;
}

message DeleteModelResponse {
    Status status = 1;

    string message = 2;
}

service GraphEmitter {
    // Liveness probe: no timeout means host is reachable
    rpc HealthCheck (Empty) returns (Empty);

    // Create uniquely identified graph
    rpc CreateModel (CreateModelRequest) returns (CreateModelResponse);

    // Update tensor/node data in specified graph
    rpc UpdateNodeData (stream UpdateNodeDataRequest) returns (UpdateNodeDataResponse);

    // Delete existing graph
    rpc DeleteModel (DeleteModelRequest) returns (DeleteModelResponse);
}
