licenses(["notice"])

load("@com_github_nelhage_rules_boost//:boost/boost.bzl", "boost_library")

load("//third_party/drake_rules:pybind.bzl", "pybind_library")

filegroup(
    name = "srcs",
    srcs = glob([
        "*.hpp",
        "src/*.cpp",
    ]) + ["BUILD.bazel"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "ctest_srcs",
    srcs = glob([
        "test/*.hpp",
        "test/*.cpp",
    ]),
)

filegroup(
    name = "ptest_srcs",
    srcs = glob([
        "test/*.py",
    ]),
)

filegroup(
    name = "benchmark_srcs",
    srcs = glob([
        "bm/*.hpp",
        "bm/*.cpp",
    ]),
)

# filegroup(
#     name = "compile_runtime",
#     srcs = glob([
#         "compiler/plugins/*.hpp",
#     ]) + [
#         "eigen.hpp",
#         "random.hpp",
#         "@boost//:config_srcs",
#         "@com_github_eigenteam_eigen//:srcs",
#     ],
#     visibility = ["//visibility:public"],
# )

######### LIBRARY #########

genrule(
    name = "generated_ead",
    srcs = ["cfg/ead.json"],
    outs = [
        "generated/api.hpp",
        "generated/api.cpp",
        "generated/codes.hpp",
        "generated/codes.cpp",
        "generated/data.hpp",
        "generated/grader.hpp",
        "generated/grader.cpp",
        "generated/opmap.hpp",
        "generated/pyapi.cpp",
    ],
    tools = ["//pybinder:pyagen"],
    cmd = "$(location //pybinder:pyagen) " +
        "--cfg $(location :cfg/ead.json) " +
        "--out $(@D)/generated " +
        "--strip_prefix=$$(dirname $(@D))",
)

cc_library(
    name = "ead",
    hdrs = glob([
        "*.hpp",
        "opt/*.hpp",
    ]) + [
        "//ead:generated/api.hpp",
        "//ead:generated/codes.hpp",
        "//ead:generated/data.hpp",
        "//ead:generated/grader.hpp",
        "//ead:generated/opmap.hpp",
    ],
    srcs = glob(["src/*.cpp"]) + [
        "//ead:generated/api.cpp",
        "//ead:generated/codes.cpp",
        "//ead:generated/grader.cpp",
    ],
    copts = ["-std=c++17"],
    deps = [
        "//ade:ade",
        "//opt:opt",
        "//pbm:pbm",
        "@com_github_eigenteam_eigen//:eigen",
    ],
    visibility = ["//visibility:public"],
)

# # this plugin is slower... currently experimental
# cc_library(
#     name = "compiler",
#     hdrs = glob([
#         "compiler/*.hpp",
#         "compiler/plugins/*.hpp",
#     ]),
#     copts = ["-std=c++17"],
#     deps = [
#         "@boost//:dll",
#         "//ead:ead",
#     ],
#     visibility = ["//visibility:public"],
# )

pybind_library(
    name = "age_py",
    cc_srcs = ["//ead:generated/pyapi.cpp"],
    cc_deps = ["//ead:ead"],
)

pybind_library(
    name = "ead_py",
    cc_srcs = ["//ead:python/ead.cpp"],
    cc_deps = ["//ead:ead"],
    py_deps = ["//ead:age_py"],
    visibility = ["//visibility:public"],
)

######### TEST #########

cc_test(
    name = "ctest",
    srcs = ["//ead:ctest_srcs"],
    copts = ["-std=c++17", "-ftemplate-backtrace-limit=0"],
    deps = [
        "//ead:ead",
        "//dbg:dbg",
        "//testutil:testutil",
    ],
    linkstatic = True,
)

py_test(
    name = "ptest",
    srcs = ["//ead:ptest_srcs"],
    deps = ["//ead:ead_py"],
)

######### BENCHMARK #########

cc_binary(
    name = "benchmark",
    srcs = ["bm/benchmark.cpp"],
    deps = [
        "//ead:ead",
        "@com_github_google_benchmark//:benchmark",
    ],
    copts = ["-std=c++17"],
)

# cc_binary(
#     name = "benchmark_compiled",
#     srcs = ["bm/benchmark_compiled.cpp"],
#     deps = [
#         "//ead:compiler",
#         "@com_github_google_benchmark//:benchmark",
#     ],
#     copts = ["-std=c++17"],
#     data = ["//ead:compile_runtime"],
# )

######### DEBUG #########

cc_binary(
    name = "graph_performance",
    srcs = ["bm/benchmark_graph.cpp"],
    deps = [
        "//ead:ead",
        "//dbg:dbg",
    ],
    copts = ["-std=c++17"],
)
