// TENSORSHAPE BEHAVIOR
A000 - vector constructor and vector assignment, does not override big 4 
A001 - index accessor returns value at input dimension. 
		accessing dimension greater or equal to rank throws std::out_of_range
A002 - n_elems returns the product of all dimension value. non-fully defined shapes have n_elems of 0
A003 - n_known obtains the product of all known dimensions
A004 - rank returns the length of the dimension vector
A005 - Shape is compatible if one of the shapes are undefined,
		or the tensors are of the same rank and dimension values equal for defined dimensions (> 0)
A006 - a Shapes is partially defined if it has a rank > 0
A007 - a Shapes is fully defined if it is at least partially defined
		and all its dimensional values are defined (> 0)
A008 - Shape merge return the most defined most defined shape
		(that is dimension values > 0 are preferred)
		merging incompatible Shapes results in a logic error
A009 - a Shape can have its leading and trailing 1s removed
A010 - two Shapes can concatenate to form a Shape depending on the order of
		concatenation assuming both tensors are at least partially defined
A011 - a Shape's rank can be manipulated by padding with ones or clipping
A012 - coord_from_idx converts coordinates C to sequential index I on a Shape S takes form:
		I = SIGMA_i=0:n(C[i]*PI_j=0:i-1(S[i])) where n is rank of S, and S[-1] is 1
		flat_idx remap coordinate C on a Shape equals the initial index converted to C (reverse of A015)

// TYPE BEHAVIOR
B000 - type_size returns the number of bytes taken by specified type
		throws error when requesting unsupported type
B001 - get_type returns type mapped by the template argument
B002 - convert with string-vector input turns vector data to string of otype, return false if bad otype
B003 - convert with vector-string input turns string data of itype to vector, return false if bad itype
B004 - convert with string-string input converts between itype and otype, return false if otype or itype

// TENSOR BEHAVIOR
C000 - constructor throws error if data is nullptr, shape is not fully defined, or type is BAD,
		does not override default big 4
C001 - total_bytes returns the size of allocated bytes in data
C002 - read_from copies data from input source, return false if 
		source shape or type not compatible with existing shape and type
		fail reads do not change data
