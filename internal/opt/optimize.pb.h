// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/opt/optimize.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_internal_2fopt_2foptimize_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_internal_2fopt_2foptimize_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "internal/query/query.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_internal_2fopt_2foptimize_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_internal_2fopt_2foptimize_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_internal_2fopt_2foptimize_2eproto;
namespace opt {
class Conversion;
class ConversionDefaultTypeInternal;
extern ConversionDefaultTypeInternal _Conversion_default_instance_;
class Optimization;
class OptimizationDefaultTypeInternal;
extern OptimizationDefaultTypeInternal _Optimization_default_instance_;
class Scalar;
class ScalarDefaultTypeInternal;
extern ScalarDefaultTypeInternal _Scalar_default_instance_;
class TargOp;
class TargOpDefaultTypeInternal;
extern TargOpDefaultTypeInternal _TargOp_default_instance_;
class TargOp_AttrsEntry_DoNotUse;
class TargOp_AttrsEntry_DoNotUseDefaultTypeInternal;
extern TargOp_AttrsEntry_DoNotUseDefaultTypeInternal _TargOp_AttrsEntry_DoNotUse_default_instance_;
class TargetNode;
class TargetNodeDefaultTypeInternal;
extern TargetNodeDefaultTypeInternal _TargetNode_default_instance_;
}  // namespace opt
PROTOBUF_NAMESPACE_OPEN
template<> ::opt::Conversion* Arena::CreateMaybeMessage<::opt::Conversion>(Arena*);
template<> ::opt::Optimization* Arena::CreateMaybeMessage<::opt::Optimization>(Arena*);
template<> ::opt::Scalar* Arena::CreateMaybeMessage<::opt::Scalar>(Arena*);
template<> ::opt::TargOp* Arena::CreateMaybeMessage<::opt::TargOp>(Arena*);
template<> ::opt::TargOp_AttrsEntry_DoNotUse* Arena::CreateMaybeMessage<::opt::TargOp_AttrsEntry_DoNotUse>(Arena*);
template<> ::opt::TargetNode* Arena::CreateMaybeMessage<::opt::TargetNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opt {

// ===================================================================

class TargetNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opt.TargetNode) */ {
 public:
  TargetNode();
  virtual ~TargetNode();

  TargetNode(const TargetNode& from);
  TargetNode(TargetNode&& from) noexcept
    : TargetNode() {
    *this = ::std::move(from);
  }

  inline TargetNode& operator=(const TargetNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetNode& operator=(TargetNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TargetNode& default_instance();

  enum ValCase {
    kCst = 1,
    kOp = 2,
    kSymb = 3,
    VAL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetNode* internal_default_instance() {
    return reinterpret_cast<const TargetNode*>(
               &_TargetNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TargetNode& a, TargetNode& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TargetNode* New() const final {
    return CreateMaybeMessage<TargetNode>(nullptr);
  }

  TargetNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargetNode& from);
  void MergeFrom(const TargetNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opt.TargetNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_internal_2fopt_2foptimize_2eproto);
    return ::descriptor_table_internal_2fopt_2foptimize_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCstFieldNumber = 1,
    kOpFieldNumber = 2,
    kSymbFieldNumber = 3,
  };
  // .opt.Scalar cst = 1;
  bool has_cst() const;
  private:
  bool _internal_has_cst() const;
  public:
  void clear_cst();
  const ::opt::Scalar& cst() const;
  ::opt::Scalar* release_cst();
  ::opt::Scalar* mutable_cst();
  void set_allocated_cst(::opt::Scalar* cst);
  private:
  const ::opt::Scalar& _internal_cst() const;
  ::opt::Scalar* _internal_mutable_cst();
  public:

  // .opt.TargOp op = 2;
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  const ::opt::TargOp& op() const;
  ::opt::TargOp* release_op();
  ::opt::TargOp* mutable_op();
  void set_allocated_op(::opt::TargOp* op);
  private:
  const ::opt::TargOp& _internal_op() const;
  ::opt::TargOp* _internal_mutable_op();
  public:

  // string symb = 3;
  private:
  bool _internal_has_symb() const;
  public:
  void clear_symb();
  const std::string& symb() const;
  void set_symb(const std::string& value);
  void set_symb(std::string&& value);
  void set_symb(const char* value);
  void set_symb(const char* value, size_t size);
  std::string* mutable_symb();
  std::string* release_symb();
  void set_allocated_symb(std::string* symb);
  private:
  const std::string& _internal_symb() const;
  void _internal_set_symb(const std::string& value);
  std::string* _internal_mutable_symb();
  public:

  void clear_val();
  ValCase val_case() const;
  // @@protoc_insertion_point(class_scope:opt.TargetNode)
 private:
  class _Internal;
  void set_has_cst();
  void set_has_op();
  void set_has_symb();

  inline bool has_val() const;
  inline void clear_has_val();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ValUnion {
    ValUnion() {}
    ::opt::Scalar* cst_;
    ::opt::TargOp* op_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symb_;
  } val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_internal_2fopt_2foptimize_2eproto;
};
// -------------------------------------------------------------------

class Scalar :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opt.Scalar) */ {
 public:
  Scalar();
  virtual ~Scalar();

  Scalar(const Scalar& from);
  Scalar(Scalar&& from) noexcept
    : Scalar() {
    *this = ::std::move(from);
  }

  inline Scalar& operator=(const Scalar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scalar& operator=(Scalar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scalar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scalar* internal_default_instance() {
    return reinterpret_cast<const Scalar*>(
               &_Scalar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Scalar& a, Scalar& b) {
    a.Swap(&b);
  }
  inline void Swap(Scalar* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scalar* New() const final {
    return CreateMaybeMessage<Scalar>(nullptr);
  }

  Scalar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scalar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scalar& from);
  void MergeFrom(const Scalar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scalar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opt.Scalar";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_internal_2fopt_2foptimize_2eproto);
    return ::descriptor_table_internal_2fopt_2foptimize_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // string shape = 2;
  void clear_shape();
  const std::string& shape() const;
  void set_shape(const std::string& value);
  void set_shape(std::string&& value);
  void set_shape(const char* value);
  void set_shape(const char* value, size_t size);
  std::string* mutable_shape();
  std::string* release_shape();
  void set_allocated_shape(std::string* shape);
  private:
  const std::string& _internal_shape() const;
  void _internal_set_shape(const std::string& value);
  std::string* _internal_mutable_shape();
  public:

  // double value = 1;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:opt.Scalar)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shape_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_internal_2fopt_2foptimize_2eproto;
};
// -------------------------------------------------------------------

class TargOp_AttrsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TargOp_AttrsEntry_DoNotUse, 
    std::string, ::query::Attribute,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TargOp_AttrsEntry_DoNotUse, 
    std::string, ::query::Attribute,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  TargOp_AttrsEntry_DoNotUse();
  TargOp_AttrsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TargOp_AttrsEntry_DoNotUse& other);
  static const TargOp_AttrsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TargOp_AttrsEntry_DoNotUse*>(&_TargOp_AttrsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "opt.TargOp.AttrsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_internal_2fopt_2foptimize_2eproto);
    return ::descriptor_table_internal_2fopt_2foptimize_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class TargOp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opt.TargOp) */ {
 public:
  TargOp();
  virtual ~TargOp();

  TargOp(const TargOp& from);
  TargOp(TargOp&& from) noexcept
    : TargOp() {
    *this = ::std::move(from);
  }

  inline TargOp& operator=(const TargOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargOp& operator=(TargOp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TargOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargOp* internal_default_instance() {
    return reinterpret_cast<const TargOp*>(
               &_TargOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TargOp& a, TargOp& b) {
    a.Swap(&b);
  }
  inline void Swap(TargOp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TargOp* New() const final {
    return CreateMaybeMessage<TargOp>(nullptr);
  }

  TargOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargOp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargOp& from);
  void MergeFrom(const TargOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opt.TargOp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_internal_2fopt_2foptimize_2eproto);
    return ::descriptor_table_internal_2fopt_2foptimize_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAttrsFieldNumber = 2,
    kArgsFieldNumber = 3,
    kOpnameFieldNumber = 1,
  };
  // map<string, .query.Attribute> attrs = 2;
  int attrs_size() const;
  private:
  int _internal_attrs_size() const;
  public:
  void clear_attrs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query::Attribute >&
      _internal_attrs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query::Attribute >*
      _internal_mutable_attrs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query::Attribute >&
      attrs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query::Attribute >*
      mutable_attrs();

  // repeated .opt.TargetNode args = 3;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  ::opt::TargetNode* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opt::TargetNode >*
      mutable_args();
  private:
  const ::opt::TargetNode& _internal_args(int index) const;
  ::opt::TargetNode* _internal_add_args();
  public:
  const ::opt::TargetNode& args(int index) const;
  ::opt::TargetNode* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opt::TargetNode >&
      args() const;

  // string opname = 1;
  void clear_opname();
  const std::string& opname() const;
  void set_opname(const std::string& value);
  void set_opname(std::string&& value);
  void set_opname(const char* value);
  void set_opname(const char* value, size_t size);
  std::string* mutable_opname();
  std::string* release_opname();
  void set_allocated_opname(std::string* opname);
  private:
  const std::string& _internal_opname() const;
  void _internal_set_opname(const std::string& value);
  std::string* _internal_mutable_opname();
  public:

  // @@protoc_insertion_point(class_scope:opt.TargOp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TargOp_AttrsEntry_DoNotUse,
      std::string, ::query::Attribute,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > attrs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opt::TargetNode > args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_internal_2fopt_2foptimize_2eproto;
};
// -------------------------------------------------------------------

class Conversion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opt.Conversion) */ {
 public:
  Conversion();
  virtual ~Conversion();

  Conversion(const Conversion& from);
  Conversion(Conversion&& from) noexcept
    : Conversion() {
    *this = ::std::move(from);
  }

  inline Conversion& operator=(const Conversion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Conversion& operator=(Conversion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Conversion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Conversion* internal_default_instance() {
    return reinterpret_cast<const Conversion*>(
               &_Conversion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Conversion& a, Conversion& b) {
    a.Swap(&b);
  }
  inline void Swap(Conversion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Conversion* New() const final {
    return CreateMaybeMessage<Conversion>(nullptr);
  }

  Conversion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Conversion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Conversion& from);
  void MergeFrom(const Conversion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Conversion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opt.Conversion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_internal_2fopt_2foptimize_2eproto);
    return ::descriptor_table_internal_2fopt_2foptimize_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcsFieldNumber = 1,
    kDestFieldNumber = 2,
  };
  // repeated .query.Node srcs = 1;
  int srcs_size() const;
  private:
  int _internal_srcs_size() const;
  public:
  void clear_srcs();
  ::query::Node* mutable_srcs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query::Node >*
      mutable_srcs();
  private:
  const ::query::Node& _internal_srcs(int index) const;
  ::query::Node* _internal_add_srcs();
  public:
  const ::query::Node& srcs(int index) const;
  ::query::Node* add_srcs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query::Node >&
      srcs() const;

  // .opt.TargetNode dest = 2;
  bool has_dest() const;
  private:
  bool _internal_has_dest() const;
  public:
  void clear_dest();
  const ::opt::TargetNode& dest() const;
  ::opt::TargetNode* release_dest();
  ::opt::TargetNode* mutable_dest();
  void set_allocated_dest(::opt::TargetNode* dest);
  private:
  const ::opt::TargetNode& _internal_dest() const;
  ::opt::TargetNode* _internal_mutable_dest();
  public:

  // @@protoc_insertion_point(class_scope:opt.Conversion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query::Node > srcs_;
  ::opt::TargetNode* dest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_internal_2fopt_2foptimize_2eproto;
};
// -------------------------------------------------------------------

class Optimization :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opt.Optimization) */ {
 public:
  Optimization();
  virtual ~Optimization();

  Optimization(const Optimization& from);
  Optimization(Optimization&& from) noexcept
    : Optimization() {
    *this = ::std::move(from);
  }

  inline Optimization& operator=(const Optimization& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optimization& operator=(Optimization&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optimization& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Optimization* internal_default_instance() {
    return reinterpret_cast<const Optimization*>(
               &_Optimization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Optimization& a, Optimization& b) {
    a.Swap(&b);
  }
  inline void Swap(Optimization* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optimization* New() const final {
    return CreateMaybeMessage<Optimization>(nullptr);
  }

  Optimization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optimization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optimization& from);
  void MergeFrom(const Optimization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optimization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opt.Optimization";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_internal_2fopt_2foptimize_2eproto);
    return ::descriptor_table_internal_2fopt_2foptimize_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConversionsFieldNumber = 1,
  };
  // repeated .opt.Conversion conversions = 1;
  int conversions_size() const;
  private:
  int _internal_conversions_size() const;
  public:
  void clear_conversions();
  ::opt::Conversion* mutable_conversions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opt::Conversion >*
      mutable_conversions();
  private:
  const ::opt::Conversion& _internal_conversions(int index) const;
  ::opt::Conversion* _internal_add_conversions();
  public:
  const ::opt::Conversion& conversions(int index) const;
  ::opt::Conversion* add_conversions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opt::Conversion >&
      conversions() const;

  // @@protoc_insertion_point(class_scope:opt.Optimization)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opt::Conversion > conversions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_internal_2fopt_2foptimize_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TargetNode

// .opt.Scalar cst = 1;
inline bool TargetNode::_internal_has_cst() const {
  return val_case() == kCst;
}
inline bool TargetNode::has_cst() const {
  return _internal_has_cst();
}
inline void TargetNode::set_has_cst() {
  _oneof_case_[0] = kCst;
}
inline void TargetNode::clear_cst() {
  if (_internal_has_cst()) {
    delete val_.cst_;
    clear_has_val();
  }
}
inline ::opt::Scalar* TargetNode::release_cst() {
  // @@protoc_insertion_point(field_release:opt.TargetNode.cst)
  if (_internal_has_cst()) {
    clear_has_val();
      ::opt::Scalar* temp = val_.cst_;
    val_.cst_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opt::Scalar& TargetNode::_internal_cst() const {
  return _internal_has_cst()
      ? *val_.cst_
      : *reinterpret_cast< ::opt::Scalar*>(&::opt::_Scalar_default_instance_);
}
inline const ::opt::Scalar& TargetNode::cst() const {
  // @@protoc_insertion_point(field_get:opt.TargetNode.cst)
  return _internal_cst();
}
inline ::opt::Scalar* TargetNode::_internal_mutable_cst() {
  if (!_internal_has_cst()) {
    clear_val();
    set_has_cst();
    val_.cst_ = CreateMaybeMessage< ::opt::Scalar >(
        GetArenaNoVirtual());
  }
  return val_.cst_;
}
inline ::opt::Scalar* TargetNode::mutable_cst() {
  // @@protoc_insertion_point(field_mutable:opt.TargetNode.cst)
  return _internal_mutable_cst();
}

// .opt.TargOp op = 2;
inline bool TargetNode::_internal_has_op() const {
  return val_case() == kOp;
}
inline bool TargetNode::has_op() const {
  return _internal_has_op();
}
inline void TargetNode::set_has_op() {
  _oneof_case_[0] = kOp;
}
inline void TargetNode::clear_op() {
  if (_internal_has_op()) {
    delete val_.op_;
    clear_has_val();
  }
}
inline ::opt::TargOp* TargetNode::release_op() {
  // @@protoc_insertion_point(field_release:opt.TargetNode.op)
  if (_internal_has_op()) {
    clear_has_val();
      ::opt::TargOp* temp = val_.op_;
    val_.op_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opt::TargOp& TargetNode::_internal_op() const {
  return _internal_has_op()
      ? *val_.op_
      : *reinterpret_cast< ::opt::TargOp*>(&::opt::_TargOp_default_instance_);
}
inline const ::opt::TargOp& TargetNode::op() const {
  // @@protoc_insertion_point(field_get:opt.TargetNode.op)
  return _internal_op();
}
inline ::opt::TargOp* TargetNode::_internal_mutable_op() {
  if (!_internal_has_op()) {
    clear_val();
    set_has_op();
    val_.op_ = CreateMaybeMessage< ::opt::TargOp >(
        GetArenaNoVirtual());
  }
  return val_.op_;
}
inline ::opt::TargOp* TargetNode::mutable_op() {
  // @@protoc_insertion_point(field_mutable:opt.TargetNode.op)
  return _internal_mutable_op();
}

// string symb = 3;
inline bool TargetNode::_internal_has_symb() const {
  return val_case() == kSymb;
}
inline void TargetNode::set_has_symb() {
  _oneof_case_[0] = kSymb;
}
inline void TargetNode::clear_symb() {
  if (_internal_has_symb()) {
    val_.symb_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_val();
  }
}
inline const std::string& TargetNode::symb() const {
  // @@protoc_insertion_point(field_get:opt.TargetNode.symb)
  return _internal_symb();
}
inline void TargetNode::set_symb(const std::string& value) {
  _internal_set_symb(value);
  // @@protoc_insertion_point(field_set:opt.TargetNode.symb)
}
inline std::string* TargetNode::mutable_symb() {
  // @@protoc_insertion_point(field_mutable:opt.TargetNode.symb)
  return _internal_mutable_symb();
}
inline const std::string& TargetNode::_internal_symb() const {
  if (_internal_has_symb()) {
    return val_.symb_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TargetNode::_internal_set_symb(const std::string& value) {
  if (!_internal_has_symb()) {
    clear_val();
    set_has_symb();
    val_.symb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  val_.symb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TargetNode::set_symb(std::string&& value) {
  // @@protoc_insertion_point(field_set:opt.TargetNode.symb)
  if (!_internal_has_symb()) {
    clear_val();
    set_has_symb();
    val_.symb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  val_.symb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opt.TargetNode.symb)
}
inline void TargetNode::set_symb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_symb()) {
    clear_val();
    set_has_symb();
    val_.symb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  val_.symb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opt.TargetNode.symb)
}
inline void TargetNode::set_symb(const char* value, size_t size) {
  if (!_internal_has_symb()) {
    clear_val();
    set_has_symb();
    val_.symb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  val_.symb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opt.TargetNode.symb)
}
inline std::string* TargetNode::_internal_mutable_symb() {
  if (!_internal_has_symb()) {
    clear_val();
    set_has_symb();
    val_.symb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return val_.symb_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TargetNode::release_symb() {
  // @@protoc_insertion_point(field_release:opt.TargetNode.symb)
  if (_internal_has_symb()) {
    clear_has_val();
    return val_.symb_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TargetNode::set_allocated_symb(std::string* symb) {
  if (has_val()) {
    clear_val();
  }
  if (symb != nullptr) {
    set_has_symb();
    val_.symb_.UnsafeSetDefault(symb);
  }
  // @@protoc_insertion_point(field_set_allocated:opt.TargetNode.symb)
}

inline bool TargetNode::has_val() const {
  return val_case() != VAL_NOT_SET;
}
inline void TargetNode::clear_has_val() {
  _oneof_case_[0] = VAL_NOT_SET;
}
inline TargetNode::ValCase TargetNode::val_case() const {
  return TargetNode::ValCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Scalar

// double value = 1;
inline void Scalar::clear_value() {
  value_ = 0;
}
inline double Scalar::_internal_value() const {
  return value_;
}
inline double Scalar::value() const {
  // @@protoc_insertion_point(field_get:opt.Scalar.value)
  return _internal_value();
}
inline void Scalar::_internal_set_value(double value) {
  
  value_ = value;
}
inline void Scalar::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:opt.Scalar.value)
}

// string shape = 2;
inline void Scalar::clear_shape() {
  shape_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Scalar::shape() const {
  // @@protoc_insertion_point(field_get:opt.Scalar.shape)
  return _internal_shape();
}
inline void Scalar::set_shape(const std::string& value) {
  _internal_set_shape(value);
  // @@protoc_insertion_point(field_set:opt.Scalar.shape)
}
inline std::string* Scalar::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:opt.Scalar.shape)
  return _internal_mutable_shape();
}
inline const std::string& Scalar::_internal_shape() const {
  return shape_.GetNoArena();
}
inline void Scalar::_internal_set_shape(const std::string& value) {
  
  shape_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Scalar::set_shape(std::string&& value) {
  
  shape_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opt.Scalar.shape)
}
inline void Scalar::set_shape(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shape_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opt.Scalar.shape)
}
inline void Scalar::set_shape(const char* value, size_t size) {
  
  shape_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opt.Scalar.shape)
}
inline std::string* Scalar::_internal_mutable_shape() {
  
  return shape_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Scalar::release_shape() {
  // @@protoc_insertion_point(field_release:opt.Scalar.shape)
  
  return shape_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Scalar::set_allocated_shape(std::string* shape) {
  if (shape != nullptr) {
    
  } else {
    
  }
  shape_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shape);
  // @@protoc_insertion_point(field_set_allocated:opt.Scalar.shape)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TargOp

// string opname = 1;
inline void TargOp::clear_opname() {
  opname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TargOp::opname() const {
  // @@protoc_insertion_point(field_get:opt.TargOp.opname)
  return _internal_opname();
}
inline void TargOp::set_opname(const std::string& value) {
  _internal_set_opname(value);
  // @@protoc_insertion_point(field_set:opt.TargOp.opname)
}
inline std::string* TargOp::mutable_opname() {
  // @@protoc_insertion_point(field_mutable:opt.TargOp.opname)
  return _internal_mutable_opname();
}
inline const std::string& TargOp::_internal_opname() const {
  return opname_.GetNoArena();
}
inline void TargOp::_internal_set_opname(const std::string& value) {
  
  opname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TargOp::set_opname(std::string&& value) {
  
  opname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opt.TargOp.opname)
}
inline void TargOp::set_opname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  opname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opt.TargOp.opname)
}
inline void TargOp::set_opname(const char* value, size_t size) {
  
  opname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opt.TargOp.opname)
}
inline std::string* TargOp::_internal_mutable_opname() {
  
  return opname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TargOp::release_opname() {
  // @@protoc_insertion_point(field_release:opt.TargOp.opname)
  
  return opname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TargOp::set_allocated_opname(std::string* opname) {
  if (opname != nullptr) {
    
  } else {
    
  }
  opname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opname);
  // @@protoc_insertion_point(field_set_allocated:opt.TargOp.opname)
}

// map<string, .query.Attribute> attrs = 2;
inline int TargOp::_internal_attrs_size() const {
  return attrs_.size();
}
inline int TargOp::attrs_size() const {
  return _internal_attrs_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query::Attribute >&
TargOp::_internal_attrs() const {
  return attrs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query::Attribute >&
TargOp::attrs() const {
  // @@protoc_insertion_point(field_map:opt.TargOp.attrs)
  return _internal_attrs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query::Attribute >*
TargOp::_internal_mutable_attrs() {
  return attrs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query::Attribute >*
TargOp::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_map:opt.TargOp.attrs)
  return _internal_mutable_attrs();
}

// repeated .opt.TargetNode args = 3;
inline int TargOp::_internal_args_size() const {
  return args_.size();
}
inline int TargOp::args_size() const {
  return _internal_args_size();
}
inline void TargOp::clear_args() {
  args_.Clear();
}
inline ::opt::TargetNode* TargOp::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:opt.TargOp.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opt::TargetNode >*
TargOp::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:opt.TargOp.args)
  return &args_;
}
inline const ::opt::TargetNode& TargOp::_internal_args(int index) const {
  return args_.Get(index);
}
inline const ::opt::TargetNode& TargOp::args(int index) const {
  // @@protoc_insertion_point(field_get:opt.TargOp.args)
  return _internal_args(index);
}
inline ::opt::TargetNode* TargOp::_internal_add_args() {
  return args_.Add();
}
inline ::opt::TargetNode* TargOp::add_args() {
  // @@protoc_insertion_point(field_add:opt.TargOp.args)
  return _internal_add_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opt::TargetNode >&
TargOp::args() const {
  // @@protoc_insertion_point(field_list:opt.TargOp.args)
  return args_;
}

// -------------------------------------------------------------------

// Conversion

// repeated .query.Node srcs = 1;
inline int Conversion::_internal_srcs_size() const {
  return srcs_.size();
}
inline int Conversion::srcs_size() const {
  return _internal_srcs_size();
}
inline ::query::Node* Conversion::mutable_srcs(int index) {
  // @@protoc_insertion_point(field_mutable:opt.Conversion.srcs)
  return srcs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query::Node >*
Conversion::mutable_srcs() {
  // @@protoc_insertion_point(field_mutable_list:opt.Conversion.srcs)
  return &srcs_;
}
inline const ::query::Node& Conversion::_internal_srcs(int index) const {
  return srcs_.Get(index);
}
inline const ::query::Node& Conversion::srcs(int index) const {
  // @@protoc_insertion_point(field_get:opt.Conversion.srcs)
  return _internal_srcs(index);
}
inline ::query::Node* Conversion::_internal_add_srcs() {
  return srcs_.Add();
}
inline ::query::Node* Conversion::add_srcs() {
  // @@protoc_insertion_point(field_add:opt.Conversion.srcs)
  return _internal_add_srcs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query::Node >&
Conversion::srcs() const {
  // @@protoc_insertion_point(field_list:opt.Conversion.srcs)
  return srcs_;
}

// .opt.TargetNode dest = 2;
inline bool Conversion::_internal_has_dest() const {
  return this != internal_default_instance() && dest_ != nullptr;
}
inline bool Conversion::has_dest() const {
  return _internal_has_dest();
}
inline void Conversion::clear_dest() {
  if (GetArenaNoVirtual() == nullptr && dest_ != nullptr) {
    delete dest_;
  }
  dest_ = nullptr;
}
inline const ::opt::TargetNode& Conversion::_internal_dest() const {
  const ::opt::TargetNode* p = dest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::opt::TargetNode*>(
      &::opt::_TargetNode_default_instance_);
}
inline const ::opt::TargetNode& Conversion::dest() const {
  // @@protoc_insertion_point(field_get:opt.Conversion.dest)
  return _internal_dest();
}
inline ::opt::TargetNode* Conversion::release_dest() {
  // @@protoc_insertion_point(field_release:opt.Conversion.dest)
  
  ::opt::TargetNode* temp = dest_;
  dest_ = nullptr;
  return temp;
}
inline ::opt::TargetNode* Conversion::_internal_mutable_dest() {
  
  if (dest_ == nullptr) {
    auto* p = CreateMaybeMessage<::opt::TargetNode>(GetArenaNoVirtual());
    dest_ = p;
  }
  return dest_;
}
inline ::opt::TargetNode* Conversion::mutable_dest() {
  // @@protoc_insertion_point(field_mutable:opt.Conversion.dest)
  return _internal_mutable_dest();
}
inline void Conversion::set_allocated_dest(::opt::TargetNode* dest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dest_;
  }
  if (dest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest, submessage_arena);
    }
    
  } else {
    
  }
  dest_ = dest;
  // @@protoc_insertion_point(field_set_allocated:opt.Conversion.dest)
}

// -------------------------------------------------------------------

// Optimization

// repeated .opt.Conversion conversions = 1;
inline int Optimization::_internal_conversions_size() const {
  return conversions_.size();
}
inline int Optimization::conversions_size() const {
  return _internal_conversions_size();
}
inline void Optimization::clear_conversions() {
  conversions_.Clear();
}
inline ::opt::Conversion* Optimization::mutable_conversions(int index) {
  // @@protoc_insertion_point(field_mutable:opt.Optimization.conversions)
  return conversions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opt::Conversion >*
Optimization::mutable_conversions() {
  // @@protoc_insertion_point(field_mutable_list:opt.Optimization.conversions)
  return &conversions_;
}
inline const ::opt::Conversion& Optimization::_internal_conversions(int index) const {
  return conversions_.Get(index);
}
inline const ::opt::Conversion& Optimization::conversions(int index) const {
  // @@protoc_insertion_point(field_get:opt.Optimization.conversions)
  return _internal_conversions(index);
}
inline ::opt::Conversion* Optimization::_internal_add_conversions() {
  return conversions_.Add();
}
inline ::opt::Conversion* Optimization::add_conversions() {
  // @@protoc_insertion_point(field_add:opt.Optimization.conversions)
  return _internal_add_conversions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opt::Conversion >&
Optimization::conversions() const {
  // @@protoc_insertion_point(field_list:opt.Optimization.conversions)
  return conversions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace opt

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_internal_2fopt_2foptimize_2eproto
