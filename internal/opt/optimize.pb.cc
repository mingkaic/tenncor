// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/opt/optimize.proto

#include "internal/opt/optimize.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_internal_2fopt_2foptimize_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Conversion_internal_2fopt_2foptimize_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_internal_2fopt_2foptimize_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scalar_internal_2fopt_2foptimize_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_internal_2fopt_2foptimize_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TargOp_internal_2fopt_2foptimize_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_internal_2fopt_2foptimize_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TargOp_AttrsEntry_DoNotUse_internal_2fopt_2foptimize_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_internal_2fquery_2fquery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Attribute_internal_2fquery_2fquery_2eproto;
namespace opt {
class TargetNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetNode> _instance;
  const ::opt::Scalar* cst_;
  const ::opt::TargOp* op_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symb_;
} _TargetNode_default_instance_;
class ScalarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scalar> _instance;
} _Scalar_default_instance_;
class TargOp_AttrsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargOp_AttrsEntry_DoNotUse> _instance;
} _TargOp_AttrsEntry_DoNotUse_default_instance_;
class TargOpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargOp> _instance;
} _TargOp_default_instance_;
class ConversionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Conversion> _instance;
} _Conversion_default_instance_;
class OptimizationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Optimization> _instance;
} _Optimization_default_instance_;
}  // namespace opt
static void InitDefaultsscc_info_Conversion_internal_2fopt_2foptimize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opt::_Conversion_default_instance_;
    new (ptr) ::opt::Conversion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opt::Conversion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Conversion_internal_2fopt_2foptimize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Conversion_internal_2fopt_2foptimize_2eproto}, {
      &scc_info_Attribute_internal_2fquery_2fquery_2eproto.base,
      &scc_info_TargOp_internal_2fopt_2foptimize_2eproto.base,}};

static void InitDefaultsscc_info_Optimization_internal_2fopt_2foptimize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opt::_Optimization_default_instance_;
    new (ptr) ::opt::Optimization();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opt::Optimization::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Optimization_internal_2fopt_2foptimize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Optimization_internal_2fopt_2foptimize_2eproto}, {
      &scc_info_Conversion_internal_2fopt_2foptimize_2eproto.base,}};

static void InitDefaultsscc_info_Scalar_internal_2fopt_2foptimize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opt::_Scalar_default_instance_;
    new (ptr) ::opt::Scalar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opt::Scalar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scalar_internal_2fopt_2foptimize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scalar_internal_2fopt_2foptimize_2eproto}, {}};

static void InitDefaultsscc_info_TargOp_internal_2fopt_2foptimize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opt::_TargetNode_default_instance_;
    new (ptr) ::opt::TargetNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::opt::_TargOp_default_instance_;
    new (ptr) ::opt::TargOp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opt::TargetNode::InitAsDefaultInstance();
  ::opt::TargOp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TargOp_internal_2fopt_2foptimize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TargOp_internal_2fopt_2foptimize_2eproto}, {
      &scc_info_TargOp_AttrsEntry_DoNotUse_internal_2fopt_2foptimize_2eproto.base,
      &scc_info_Scalar_internal_2fopt_2foptimize_2eproto.base,}};

static void InitDefaultsscc_info_TargOp_AttrsEntry_DoNotUse_internal_2fopt_2foptimize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opt::_TargOp_AttrsEntry_DoNotUse_default_instance_;
    new (ptr) ::opt::TargOp_AttrsEntry_DoNotUse();
  }
  ::opt::TargOp_AttrsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TargOp_AttrsEntry_DoNotUse_internal_2fopt_2foptimize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TargOp_AttrsEntry_DoNotUse_internal_2fopt_2foptimize_2eproto}, {
      &scc_info_Attribute_internal_2fquery_2fquery_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_internal_2fopt_2foptimize_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_internal_2fopt_2foptimize_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_internal_2fopt_2foptimize_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_internal_2fopt_2foptimize_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opt::TargetNode, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opt::TargetNode, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::opt::TargetNodeDefaultTypeInternal, cst_),
  offsetof(::opt::TargetNodeDefaultTypeInternal, op_),
  offsetof(::opt::TargetNodeDefaultTypeInternal, symb_),
  PROTOBUF_FIELD_OFFSET(::opt::TargetNode, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opt::Scalar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opt::Scalar, value_),
  PROTOBUF_FIELD_OFFSET(::opt::Scalar, shape_),
  PROTOBUF_FIELD_OFFSET(::opt::TargOp_AttrsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::opt::TargOp_AttrsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opt::TargOp_AttrsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::opt::TargOp_AttrsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opt::TargOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opt::TargOp, opname_),
  PROTOBUF_FIELD_OFFSET(::opt::TargOp, attrs_),
  PROTOBUF_FIELD_OFFSET(::opt::TargOp, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opt::Conversion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opt::Conversion, srcs_),
  PROTOBUF_FIELD_OFFSET(::opt::Conversion, dest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opt::Optimization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opt::Optimization, conversions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::opt::TargetNode)},
  { 9, -1, sizeof(::opt::Scalar)},
  { 16, 23, sizeof(::opt::TargOp_AttrsEntry_DoNotUse)},
  { 25, -1, sizeof(::opt::TargOp)},
  { 33, -1, sizeof(::opt::Conversion)},
  { 40, -1, sizeof(::opt::Optimization)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opt::_TargetNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opt::_Scalar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opt::_TargOp_AttrsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opt::_TargOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opt::_Conversion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opt::_Optimization_default_instance_),
};

const char descriptor_table_protodef_internal_2fopt_2foptimize_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033internal/opt/optimize.proto\022\003opt\032\032inte"
  "rnal/query/query.proto\"Z\n\nTargetNode\022\032\n\003"
  "cst\030\001 \001(\0132\013.opt.ScalarH\000\022\031\n\002op\030\002 \001(\0132\013.o"
  "pt.TargOpH\000\022\016\n\004symb\030\003 \001(\tH\000B\005\n\003val\"&\n\006Sc"
  "alar\022\r\n\005value\030\001 \001(\001\022\r\n\005shape\030\002 \001(\t\"\236\001\n\006T"
  "argOp\022\016\n\006opname\030\001 \001(\t\022%\n\005attrs\030\002 \003(\0132\026.o"
  "pt.TargOp.AttrsEntry\022\035\n\004args\030\003 \003(\0132\017.opt"
  ".TargetNode\032>\n\nAttrsEntry\022\013\n\003key\030\001 \001(\t\022\037"
  "\n\005value\030\002 \001(\0132\020.query.Attribute:\0028\001\"F\n\nC"
  "onversion\022\031\n\004srcs\030\001 \003(\0132\013.query.Node\022\035\n\004"
  "dest\030\002 \001(\0132\017.opt.TargetNode\"4\n\014Optimizat"
  "ion\022$\n\013conversions\030\001 \003(\0132\017.opt.Conversio"
  "nb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_internal_2fopt_2foptimize_2eproto_deps[1] = {
  &::descriptor_table_internal_2fquery_2fquery_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_internal_2fopt_2foptimize_2eproto_sccs[5] = {
  &scc_info_Conversion_internal_2fopt_2foptimize_2eproto.base,
  &scc_info_Optimization_internal_2fopt_2foptimize_2eproto.base,
  &scc_info_Scalar_internal_2fopt_2foptimize_2eproto.base,
  &scc_info_TargOp_internal_2fopt_2foptimize_2eproto.base,
  &scc_info_TargOp_AttrsEntry_DoNotUse_internal_2fopt_2foptimize_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_internal_2fopt_2foptimize_2eproto_once;
static bool descriptor_table_internal_2fopt_2foptimize_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_internal_2fopt_2foptimize_2eproto = {
  &descriptor_table_internal_2fopt_2foptimize_2eproto_initialized, descriptor_table_protodef_internal_2fopt_2foptimize_2eproto, "internal/opt/optimize.proto", 489,
  &descriptor_table_internal_2fopt_2foptimize_2eproto_once, descriptor_table_internal_2fopt_2foptimize_2eproto_sccs, descriptor_table_internal_2fopt_2foptimize_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_internal_2fopt_2foptimize_2eproto::offsets,
  file_level_metadata_internal_2fopt_2foptimize_2eproto, 6, file_level_enum_descriptors_internal_2fopt_2foptimize_2eproto, file_level_service_descriptors_internal_2fopt_2foptimize_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_internal_2fopt_2foptimize_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_internal_2fopt_2foptimize_2eproto), true);
namespace opt {

// ===================================================================

void TargetNode::InitAsDefaultInstance() {
  ::opt::_TargetNode_default_instance_.cst_ = const_cast< ::opt::Scalar*>(
      ::opt::Scalar::internal_default_instance());
  ::opt::_TargetNode_default_instance_.op_ = const_cast< ::opt::TargOp*>(
      ::opt::TargOp::internal_default_instance());
  ::opt::_TargetNode_default_instance_.symb_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class TargetNode::_Internal {
 public:
  static const ::opt::Scalar& cst(const TargetNode* msg);
  static const ::opt::TargOp& op(const TargetNode* msg);
};

const ::opt::Scalar&
TargetNode::_Internal::cst(const TargetNode* msg) {
  return *msg->val_.cst_;
}
const ::opt::TargOp&
TargetNode::_Internal::op(const TargetNode* msg) {
  return *msg->val_.op_;
}
void TargetNode::set_allocated_cst(::opt::Scalar* cst) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_val();
  if (cst) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cst = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cst, submessage_arena);
    }
    set_has_cst();
    val_.cst_ = cst;
  }
  // @@protoc_insertion_point(field_set_allocated:opt.TargetNode.cst)
}
void TargetNode::set_allocated_op(::opt::TargOp* op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_val();
  if (op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op, submessage_arena);
    }
    set_has_op();
    val_.op_ = op;
  }
  // @@protoc_insertion_point(field_set_allocated:opt.TargetNode.op)
}
TargetNode::TargetNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opt.TargetNode)
}
TargetNode::TargetNode(const TargetNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_val();
  switch (from.val_case()) {
    case kCst: {
      _internal_mutable_cst()->::opt::Scalar::MergeFrom(from._internal_cst());
      break;
    }
    case kOp: {
      _internal_mutable_op()->::opt::TargOp::MergeFrom(from._internal_op());
      break;
    }
    case kSymb: {
      _internal_set_symb(from._internal_symb());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opt.TargetNode)
}

void TargetNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TargOp_internal_2fopt_2foptimize_2eproto.base);
  clear_has_val();
}

TargetNode::~TargetNode() {
  // @@protoc_insertion_point(destructor:opt.TargetNode)
  SharedDtor();
}

void TargetNode::SharedDtor() {
  if (has_val()) {
    clear_val();
  }
}

void TargetNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetNode& TargetNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargOp_internal_2fopt_2foptimize_2eproto.base);
  return *internal_default_instance();
}


void TargetNode::clear_val() {
// @@protoc_insertion_point(one_of_clear_start:opt.TargetNode)
  switch (val_case()) {
    case kCst: {
      delete val_.cst_;
      break;
    }
    case kOp: {
      delete val_.op_;
      break;
    }
    case kSymb: {
      val_.symb_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VAL_NOT_SET;
}


void TargetNode::Clear() {
// @@protoc_insertion_point(message_clear_start:opt.TargetNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_val();
  _internal_metadata_.Clear();
}

const char* TargetNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .opt.Scalar cst = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cst(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opt.TargOp op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_symb();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opt.TargetNode.symb"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opt.TargetNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opt.Scalar cst = 1;
  if (_internal_has_cst()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cst(this), target, stream);
  }

  // .opt.TargOp op = 2;
  if (_internal_has_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::op(this), target, stream);
  }

  // string symb = 3;
  if (_internal_has_symb()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symb().data(), static_cast<int>(this->_internal_symb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opt.TargetNode.symb");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_symb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opt.TargetNode)
  return target;
}

size_t TargetNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opt.TargetNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (val_case()) {
    // .opt.Scalar cst = 1;
    case kCst: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *val_.cst_);
      break;
    }
    // .opt.TargOp op = 2;
    case kOp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *val_.op_);
      break;
    }
    // string symb = 3;
    case kSymb: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_symb());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opt.TargetNode)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opt.TargetNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opt.TargetNode)
    MergeFrom(*source);
  }
}

void TargetNode::MergeFrom(const TargetNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opt.TargetNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.val_case()) {
    case kCst: {
      _internal_mutable_cst()->::opt::Scalar::MergeFrom(from._internal_cst());
      break;
    }
    case kOp: {
      _internal_mutable_op()->::opt::TargOp::MergeFrom(from._internal_op());
      break;
    }
    case kSymb: {
      _internal_set_symb(from._internal_symb());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
}

void TargetNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opt.TargetNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetNode::CopyFrom(const TargetNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opt.TargetNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetNode::IsInitialized() const {
  return true;
}

void TargetNode::InternalSwap(TargetNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(val_, other->val_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Scalar::InitAsDefaultInstance() {
}
class Scalar::_Internal {
 public:
};

Scalar::Scalar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opt.Scalar)
}
Scalar::Scalar(const Scalar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shape_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shape().empty()) {
    shape_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shape_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:opt.Scalar)
}

void Scalar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scalar_internal_2fopt_2foptimize_2eproto.base);
  shape_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

Scalar::~Scalar() {
  // @@protoc_insertion_point(destructor:opt.Scalar)
  SharedDtor();
}

void Scalar::SharedDtor() {
  shape_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Scalar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scalar& Scalar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scalar_internal_2fopt_2foptimize_2eproto.base);
  return *internal_default_instance();
}


void Scalar::Clear() {
// @@protoc_insertion_point(message_clear_start:opt.Scalar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  _internal_metadata_.Clear();
}

const char* Scalar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_shape();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opt.Scalar.shape"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scalar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opt.Scalar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // string shape = 2;
  if (this->shape().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shape().data(), static_cast<int>(this->_internal_shape().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opt.Scalar.shape");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_shape(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opt.Scalar)
  return target;
}

size_t Scalar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opt.Scalar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string shape = 2;
  if (this->shape().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shape());
  }

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scalar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opt.Scalar)
  GOOGLE_DCHECK_NE(&from, this);
  const Scalar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scalar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opt.Scalar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opt.Scalar)
    MergeFrom(*source);
  }
}

void Scalar::MergeFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opt.Scalar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shape().size() > 0) {

    shape_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shape_);
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void Scalar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opt.Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scalar::CopyFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opt.Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar::IsInitialized() const {
  return true;
}

void Scalar::InternalSwap(Scalar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  shape_.Swap(&other->shape_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scalar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TargOp_AttrsEntry_DoNotUse::TargOp_AttrsEntry_DoNotUse() {}
TargOp_AttrsEntry_DoNotUse::TargOp_AttrsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TargOp_AttrsEntry_DoNotUse::MergeFrom(const TargOp_AttrsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TargOp_AttrsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TargOp_AttrsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TargOp::InitAsDefaultInstance() {
}
class TargOp::_Internal {
 public:
};

void TargOp::clear_attrs() {
  attrs_.Clear();
}
TargOp::TargOp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opt.TargOp)
}
TargOp::TargOp(const TargOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attrs_.MergeFrom(from.attrs_);
  opname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_opname().empty()) {
    opname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.opname_);
  }
  // @@protoc_insertion_point(copy_constructor:opt.TargOp)
}

void TargOp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TargOp_internal_2fopt_2foptimize_2eproto.base);
  opname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TargOp::~TargOp() {
  // @@protoc_insertion_point(destructor:opt.TargOp)
  SharedDtor();
}

void TargOp::SharedDtor() {
  opname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TargOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargOp& TargOp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargOp_internal_2fopt_2foptimize_2eproto.base);
  return *internal_default_instance();
}


void TargOp::Clear() {
// @@protoc_insertion_point(message_clear_start:opt.TargOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attrs_.Clear();
  args_.Clear();
  opname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TargOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string opname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_opname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opt.TargOp.opname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .query.Attribute> attrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attrs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .opt.TargetNode args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargOp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opt.TargOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string opname = 1;
  if (this->opname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_opname().data(), static_cast<int>(this->_internal_opname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opt.TargOp.opname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_opname(), target);
  }

  // map<string, .query.Attribute> attrs = 2;
  if (!this->_internal_attrs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query::Attribute >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "opt.TargOp.AttrsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_attrs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_attrs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query::Attribute >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query::Attribute >::const_iterator
          it = this->_internal_attrs().begin();
          it != this->_internal_attrs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TargOp_AttrsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query::Attribute >::const_iterator
          it = this->_internal_attrs().begin();
          it != this->_internal_attrs().end(); ++it) {
        target = TargOp_AttrsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .opt.TargetNode args = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_args(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opt.TargOp)
  return target;
}

size_t TargOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opt.TargOp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .query.Attribute> attrs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attrs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query::Attribute >::const_iterator
      it = this->_internal_attrs().begin();
      it != this->_internal_attrs().end(); ++it) {
    total_size += TargOp_AttrsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .opt.TargetNode args = 3;
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string opname = 1;
  if (this->opname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_opname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opt.TargOp)
  GOOGLE_DCHECK_NE(&from, this);
  const TargOp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opt.TargOp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opt.TargOp)
    MergeFrom(*source);
  }
}

void TargOp::MergeFrom(const TargOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opt.TargOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attrs_.MergeFrom(from.attrs_);
  args_.MergeFrom(from.args_);
  if (from.opname().size() > 0) {

    opname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.opname_);
  }
}

void TargOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opt.TargOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargOp::CopyFrom(const TargOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opt.TargOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargOp::IsInitialized() const {
  return true;
}

void TargOp::InternalSwap(TargOp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attrs_.Swap(&other->attrs_);
  args_.InternalSwap(&other->args_);
  opname_.Swap(&other->opname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TargOp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Conversion::InitAsDefaultInstance() {
  ::opt::_Conversion_default_instance_._instance.get_mutable()->dest_ = const_cast< ::opt::TargetNode*>(
      ::opt::TargetNode::internal_default_instance());
}
class Conversion::_Internal {
 public:
  static const ::opt::TargetNode& dest(const Conversion* msg);
};

const ::opt::TargetNode&
Conversion::_Internal::dest(const Conversion* msg) {
  return *msg->dest_;
}
void Conversion::clear_srcs() {
  srcs_.Clear();
}
Conversion::Conversion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opt.Conversion)
}
Conversion::Conversion(const Conversion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      srcs_(from.srcs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_dest()) {
    dest_ = new ::opt::TargetNode(*from.dest_);
  } else {
    dest_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opt.Conversion)
}

void Conversion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Conversion_internal_2fopt_2foptimize_2eproto.base);
  dest_ = nullptr;
}

Conversion::~Conversion() {
  // @@protoc_insertion_point(destructor:opt.Conversion)
  SharedDtor();
}

void Conversion::SharedDtor() {
  if (this != internal_default_instance()) delete dest_;
}

void Conversion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Conversion& Conversion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Conversion_internal_2fopt_2foptimize_2eproto.base);
  return *internal_default_instance();
}


void Conversion::Clear() {
// @@protoc_insertion_point(message_clear_start:opt.Conversion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srcs_.Clear();
  if (GetArenaNoVirtual() == nullptr && dest_ != nullptr) {
    delete dest_;
  }
  dest_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Conversion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .query.Node srcs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_srcs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .opt.TargetNode dest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Conversion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opt.Conversion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .query.Node srcs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_srcs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_srcs(i), target, stream);
  }

  // .opt.TargetNode dest = 2;
  if (this->has_dest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dest(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opt.Conversion)
  return target;
}

size_t Conversion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opt.Conversion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .query.Node srcs = 1;
  total_size += 1UL * this->_internal_srcs_size();
  for (const auto& msg : this->srcs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opt.TargetNode dest = 2;
  if (this->has_dest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Conversion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opt.Conversion)
  GOOGLE_DCHECK_NE(&from, this);
  const Conversion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Conversion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opt.Conversion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opt.Conversion)
    MergeFrom(*source);
  }
}

void Conversion::MergeFrom(const Conversion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opt.Conversion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  srcs_.MergeFrom(from.srcs_);
  if (from.has_dest()) {
    _internal_mutable_dest()->::opt::TargetNode::MergeFrom(from._internal_dest());
  }
}

void Conversion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opt.Conversion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conversion::CopyFrom(const Conversion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opt.Conversion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conversion::IsInitialized() const {
  return true;
}

void Conversion::InternalSwap(Conversion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  srcs_.InternalSwap(&other->srcs_);
  swap(dest_, other->dest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Conversion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Optimization::InitAsDefaultInstance() {
}
class Optimization::_Internal {
 public:
};

Optimization::Optimization()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opt.Optimization)
}
Optimization::Optimization(const Optimization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      conversions_(from.conversions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opt.Optimization)
}

void Optimization::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Optimization_internal_2fopt_2foptimize_2eproto.base);
}

Optimization::~Optimization() {
  // @@protoc_insertion_point(destructor:opt.Optimization)
  SharedDtor();
}

void Optimization::SharedDtor() {
}

void Optimization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Optimization& Optimization::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Optimization_internal_2fopt_2foptimize_2eproto.base);
  return *internal_default_instance();
}


void Optimization::Clear() {
// @@protoc_insertion_point(message_clear_start:opt.Optimization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conversions_.Clear();
  _internal_metadata_.Clear();
}

const char* Optimization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opt.Conversion conversions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conversions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optimization::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opt.Optimization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opt.Conversion conversions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conversions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_conversions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opt.Optimization)
  return target;
}

size_t Optimization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opt.Optimization)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opt.Conversion conversions = 1;
  total_size += 1UL * this->_internal_conversions_size();
  for (const auto& msg : this->conversions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optimization::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opt.Optimization)
  GOOGLE_DCHECK_NE(&from, this);
  const Optimization* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optimization>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opt.Optimization)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opt.Optimization)
    MergeFrom(*source);
  }
}

void Optimization::MergeFrom(const Optimization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opt.Optimization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conversions_.MergeFrom(from.conversions_);
}

void Optimization::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opt.Optimization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optimization::CopyFrom(const Optimization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opt.Optimization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optimization::IsInitialized() const {
  return true;
}

void Optimization::InternalSwap(Optimization* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  conversions_.InternalSwap(&other->conversions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optimization::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace opt
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opt::TargetNode* Arena::CreateMaybeMessage< ::opt::TargetNode >(Arena* arena) {
  return Arena::CreateInternal< ::opt::TargetNode >(arena);
}
template<> PROTOBUF_NOINLINE ::opt::Scalar* Arena::CreateMaybeMessage< ::opt::Scalar >(Arena* arena) {
  return Arena::CreateInternal< ::opt::Scalar >(arena);
}
template<> PROTOBUF_NOINLINE ::opt::TargOp_AttrsEntry_DoNotUse* Arena::CreateMaybeMessage< ::opt::TargOp_AttrsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::opt::TargOp_AttrsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::opt::TargOp* Arena::CreateMaybeMessage< ::opt::TargOp >(Arena* arena) {
  return Arena::CreateInternal< ::opt::TargOp >(arena);
}
template<> PROTOBUF_NOINLINE ::opt::Conversion* Arena::CreateMaybeMessage< ::opt::Conversion >(Arena* arena) {
  return Arena::CreateInternal< ::opt::Conversion >(arena);
}
template<> PROTOBUF_NOINLINE ::opt::Optimization* Arena::CreateMaybeMessage< ::opt::Optimization >(Arena* arena) {
  return Arena::CreateInternal< ::opt::Optimization >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
