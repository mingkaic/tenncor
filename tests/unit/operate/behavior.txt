// FUNCTIONAL BIND
A000 - abs ebinds to "abs". it returns the absolute value of input
A001 - neg ebinds to "neg". it returns the negative value of input
A002 - logical not ebinds to "logic_not". it applies the ! operator to input
A003 - sin ebinds to "sin". it applies the std::sin function to input
A004 - cos ebinds to "cos". it applies the std::cos function to input
A005 - tan ebinds to "tan". it applies the std::tan function to input
A006 - exp ebinds to "exp". it applies the std::exp function to input
A007 - log ebinds to "log". it applies the std::log function to input
A008 - sqrt ebinds to "sqrt". it applies the std::sqrt function to input
A009 - round ebinds to "round". it applies the std::round function to input

A010 - argmax abinds to "argmax". it returns the index of the max value
A011 - max abinds to "max". it returns the max value
A012 - sum abinds to "sum". it returns the sum of the inputs

A020 - pow ebinds to "pow". it takes 2 inputs returns input1 to the power of input2
A021 - add ebinds to "add". it takes 2 inputs returns the sum
A022 - sub ebinds to "sub". it takes 2 inputs returns the difference
A023 - mul ebinds to "mul". it takes 2 inputs returns the product
A024 - div ebinds to "div". it takes 2 inputs returns the quotient
A025 - eq ebinds to "eq". it takes 2 inputs and applies the == operator to inputs
A026 - neq ebinds to "neq". it takes 2 inputs and applies the != operator to inputs
A027 - lt ebinds to "lt". it takes 2 inputs and applies the < operator to inputs
A028 - gt ebinds to "gt". it takes 2 inputs and applies the > operator to inputs
A029 - rand_uniform ebinds to "rand_uniform". 
		it takes 2 inputs and returns the uniform_..._distribution(input1, input2)
A030 - rand_binom ebinds to "rand_binom". 
		it takes 2 inputs and applies the std::binomial_distribution(input1, input2)
		throws bad_function_call if type is double or float
A031 - rand_normal ebinds to "rand_normal".
		it takes 2 inputs and returns the normal_distribution(input1, input2)
		throws bad_function_call if type is integer
A032 - matmul ebinds to "matmul". it takes 2 inputs and 
		returns matrix multiplication of the first 2 dimensions of inputs

// NODE-LEVEL FUNCTIONS
B000 - multiple operations on the same array of arguments will use the same instance
B001 - any operations taking a nullptr treats the argument as zero

B100 - abs returns the absolute value of input, expect null out on null in, run_opcode with ABS
B101 - neg returns the negative value of input, expect null out on null in, run_opcode with NEG
B102 - not applies ! operator to input, expect 1 out on null in, run_opcode with NOT
B103 - sin applies std::sin function to input, expect null out on null in, run_opcode with SIN
B104 - cos applies std::cos function to input, expect 1 out on null in, run_opcode with COS
B105 - tan applies std::tan function to input, expect null out on null in, run_opcode with TAN
B106 - exp applies std::exp function to input, expect 1 out on null in, run_opcode with EXP
B107 - log applies std::log function to input, expect throw on null in, run_opcode with LOG
B108 - sqrt applies std::sqrt function to input, expect null out on null in, run_opcode with SQRT
B109 - round applies std::round function to input, expect null out on null in, run_opcode with ROUND

B120 - pow returns the pow(input1, input2), run_opcode POW generates pow,
	expect null if input1 is null, 1 if input2 is null or both are null
B121 - add returns input1 + input2, run_opcode ADD generates +,
	expect input2 if input1 is null, input1 if input2 is null
B122 - sub returns input1 - input2, run_opcode SUB generates -,
	expect -input2 if input1 is null, input1 if input2 is null
B123 - mul returns input1 * input2, run_opcode MUL generates *,
	expect null if input1 or input2 is null
B124 - div returns input1 / input2, run_opcode DIV generates /,
	expect null if input1 is null, throws if input2 is null
B125 - eq returns input1 == input2, run_opcode EQ generates ==,
	throws input1 or input2 is null
B126 - neq returns input1 != input2, run_opcode EQ generates !=,
	throws input1 or input2 is null
B127 - gt returns input1 > input2, run_opcode EQ generates >,
	throws input1 or input2 is null
B128 - lt returns input1 < input2, run_opcode EQ generates <,
	throws input1 or input2 is null
B129 - rand_binomial applies std::binomial_distribution, run_opcode BINO gets result,
	throws null if input1 or input2 is null
B130 - rand_uniform applies std::uniform_..._distribution, run_opcode UNIF gets result,
	throws null if input1 or input2 is null
B131 - rand_norm applies std::normal_distribution, run_opcode NORM gets result,
	throws null if input1 or input2 is null
B132 - matmul matrix multiplies input1 and input2, run_opcode MATMUL gets result,
	throws null if input1 or input2 is null

B140 - arg_max gets the index of the max value along specified dimensions, 
		if no dimension is specify, get the index of the max everything
B141 - reduce_max gets max value along specified dimensions, if no dimension is specify, get max of everything
B142 - reduce_sum sums value along specified dimensions, if no dimension is specify, sum everything
B143 - transpose accepts tensors of 1-D and 2-D, output tensor is always 2-D,
		with 1-D shapes interpreted as shape <dim1, 1>
B144 - flip mirrors the values along the specified dimension, the shape is not changed
B145 - expand duplicates data across a dimension (index) a number of times specified by input multiplier
B146 - n_elems
B147 - n_dimension
B148 - clip
B149 - clip_norm
B150 - reduce_mean
B151 - reduce_l2norm

// unimplemented
- type_assert
- shape_assert

// GRAPH SERIALIZATION
C000 - graph serialization creates the same graph structure (without constraints on node id)
C001 - serialized nodes saves the labels
C002 - serialized constant saves the data
C003 - serialized placeholder saves the allowed shape
C004 - serialized variable saves the data_ep_, the data source, and the allowed shape
C005 - serialized functor saves the opcode, deserialization constructs the same type of operation
C006 - data serialization and deserialization persists the data in variables
