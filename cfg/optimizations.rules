// remove useless transformations
REDUCE_SUM{coorder:[]}(X) => X;
REDUCE_PROD{coorder:[]}(X) => X;
REDUCE_MIN{coorder:[]}(X) => X;
REDUCE_MAX{coorder:[]}(X) => X;
PERMUTE{coorder:[0,1,2,3,4,5,6,7]}(X) => X;
EXTEND{coorder:[]}(X) => X;

ABS(NEG(X)) => ABS(X);
POW(X,2) => SQUARE(X);
POW(X,3) => CUBE(X);

SUB(X,0) => X;
SUB(0,X) => NEG(X);

SQUARE(SQRT(X)) => X;
SQRT(SQUARE(X)) => X;

EXP(LOG(X)) => X;
LOG(EXP(X)) => X;

comm ADD(X,0) => X;
comm MUL(X,0) => 0;
comm MUL(X,1) => X;
comm MUL(X,-1) => NEG(X);

POW(0,X) => 0;
POW(1,X) => 1;
POW(X,0) => 1;
POW(X,1) => X;
DIV(0,X) => 0;
DIV(X,1) => X;
DIV(X,X) => 1;

// sigmoid
DIV(1,comm ADD(1,EXP(NEG(X)))) => SIGMOID(X);

// abbreviate add and mul operations
comm MUL(DIV(X,Y),Y) => X;
DIV(comm MUL(X,Y),Y) => X;

comm ADD(X,NEG(X)) => 0;
comm MUL(X,X) => SQUARE(X);
comm MUL(X,SQUARE(X)) => CUBE(X);
comm ADD(X,NEG(Y)) => SUB(X,Y);

// group operations
DIV(comm MUL(X,..Y),X) => MUL(..Y);
// comm MUL(DIV(X,Y),Y,..Z) => MUL(X,..Z);

// comm ADD(X,NEG(X),..Y) => ADD(..Y);
// comm MUL(X,X,X,..Y) => MUL(CUBE(X),..Y);
// comm MUL(X,X,..Y) => MUL(SQUARE(X),..Y);
// comm MUL(X,SQUARE(X),..Y) => MUL(CUBE(X),..Y);

// comm ADD(X,NEG(Y),..Z) => ADD(SUB(X,Y),..Z);
