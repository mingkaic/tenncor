opcode:
  operator_path: eigen/operator.hpp
  params: teq::Shape shape, eigen::EigenptrT<T>& out, const eigen::EigenEdgesT<T>& in
  opcalls:
    ABS: out = eigen::abs(shape,in[0].get());
    NEG: out = eigen::neg(shape,in[0].get());
    SIN: out = eigen::sin(shape,in[0].get());
    COS: out = eigen::cos(shape,in[0].get());
    TAN: out = eigen::tan(shape,in[0].get());
    EXP: out = eigen::exp(shape,in[0].get());
    LOG: out = eigen::log(shape,in[0].get());
    SQRT: out = eigen::sqrt(shape,in[0].get());
    ROUND: out = eigen::round(shape,in[0].get());
    SIGMOID: out = eigen::sigmoid(shape,in[0].get());
    TANH: out = eigen::tanh(shape,in[0].get());
    SQUARE: out = eigen::square(shape,in[0].get());
    CUBE: out = eigen::cube(shape,in[0].get());
    POW: out = eigen::pow(shape,in[0].get(),in[1].get());
    ADD: out = eigen::add(shape,in[0].get(),in[1].get());
    SUB: out = eigen::sub(shape,in[0].get(),in[1].get());
    MUL: out = eigen::mul(shape,in[0].get(),in[1].get());
    DIV: out = eigen::div(shape,in[0].get(),in[1].get());
    MIN: out = eigen::min(shape,in[0].get(),in[1].get());
    MAX: out = eigen::max(shape,in[0].get(),in[1].get());
    EQ: out = eigen::eq(shape,in[0].get(),in[1].get());
    NEQ: out = eigen::neq(shape,in[0].get(),in[1].get());
    LT: out = eigen::lt(shape,in[0].get(),in[1].get());
    GT: out = eigen::gt(shape,in[0].get(),in[1].get());
    RAND_UNIF: out = eigen::rand_uniform(shape,in[0].get(),in[1].get());
    REVERSE: out = eigen::reverse(shape, in[0].get());
    REDUCE_SUM: out = eigen::reduce_sum(shape,in[0].get());
    REDUCE_PROD: out = eigen::reduce_prod(shape,in[0].get());
    REDUCE_MIN: out = eigen::reduce_min(shape,in[0].get());
    REDUCE_MAX: out = eigen::reduce_max(shape,in[0].get());
    ARGMAX: out = eigen::argmax(shape,in[0].get());
    PERMUTE: out = eigen::permute(shape,in[0].get());
    EXTEND: out = eigen::extend(shape,in[0].get());
    RESHAPE: out = eigen::reshape(shape,in[0].get());
    MATMUL: out = eigen::matmul(shape,in[0].get(),in[1].get());
    CONV: out = eigen::convolution(shape,in[0].get(),in[1].get());
    SLICE: out = eigen::slice(shape,in[0].get());
    PAD: out = eigen::pad(shape,in[0].get());
    STRIDE: out = eigen::stride(shape,in[0].get());
    SCATTER: out = eigen::scatter(shape,in[0].get());
    SELECT: out = eigen::select(shape, in[0].get(), in[1].get(), in[2].get());
    CONCAT: out = eigen::concat(shape, in[0].get(), in[1].get());
    GROUP_CONCAT: out = eigen::group_concat(shape, in);
    GROUP_SUM: out = eigen::group_sum(shape, in);
    GROUP_PROD: out = eigen::group_prod(shape, in);
