// INODE BEHAVIOR
A000 - copying do not copy over audiences
A001 - moving iNode move over audiences and
		audiences have their dependencies replaced by new iNode
A002 - upon deletion, trigger all audiences' deletion

// CONSTANT BEHAVIOR
B000 - construct with nullptr, non-fully defined shape or bad type throws exception
B001 - copy constructor copies over data, shape, and dtype of original
B002 - always have data and get_state returns state set on construction

// VARIABLE BEHAVIOR
C000 - copy constructor copies over data, shape, and dtype of original if initialized
		otherwise uninitialize copied target
C001 - move constructor moves over data, shape, and dtype of original if initialized
		otherwise uninitialize moved target
C002 - has_data if initialized successful
C003 - get_state throws error if never initialized
C004 - assign from source updates data_,
		throws error if assigning to uninitialized variable

// FUNCTOR BEHAVIOR
D000 - copy copies over arguments, and
		add new Functor as audience for all arguments
D001 - move moves over arguments, add new Functor as audience
		and remove old Functor as audience for all arguments
D002 - upon deletion, remove this from argument's audiences
D003 - has_data returns false if never initialized, otherwise true
D004 - get_state throws error if has_data returns false

// SINK BEHAVIOR
E000 - copy deep copies observed arg if not expired,
 		otherwise expire sink
E001 - move moves observed arg if not expired, otherwise expire sink
E002 - assign inode to sink changes observed node
E003 - expired returns true when observed arg is deleted

// ONDEATH BEHAVIOR
F000 - when deleted, ondeath triggers its ondeath function
F001 - copy and move constructors specify and use their
		own ondeath functions instead of the source's ondeath
F002 - clear_term removes the ondeath function

// RANGE BEHAVIOR
G000 - upon construction, range will sort its 2 inputs by lower and upper values
G001 - apply takes the subshape of input starting at index lower (inclusive) and ending at upper (exclusive)
		range partially outside of shape will clip upper at the max rank of input
		range outside of shape will return undefined shape
G002 - split takes the concatenation of the subshapes before the range [0:lower) and after [upper:]
		range partially outside of the shape will only take subshape before range
		range outside of shape will return input shape
